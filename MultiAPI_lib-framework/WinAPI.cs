using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

/* 
  =================- INFO -===================
 * File:         | WinAPI.cs
 * Class:        | WinAPI
 * Project:      | MultiAPI
 * Author:       | Plufik
 * Version:      | 0.0.0.0
 * VerType:      | major_version.minor_version.patch_version.builds
 * Main file:    | Main.cs
 * [OPEN SOURCE] | +True
 * [CONSTRUCTOR] | -False
  =- ATTENTION -==============================
 * ATTENTION! The use of this function may cause irreversible consequences 
 * for an ordinary user in case of incorrect use or incorrectly written class code. 
 * Before publishing your software using this class, please make sure that your 
 * software will not harm the average user in any way. We are not responsible 
 * for the fact that you can harm or destroy the system with methods from the class 
 * and the like. All responsibility shifts to you. 
 * Be careful! Good luck!
 * 
 * This code was generated by AI. It is also written, added or modified by a human. 
 * The code may not work correctly in some places.
  ============================================
 */

namespace MultiAPI
{
    public static class WinAPI
    {
        public static class Window
        {
            [DllImport("user32.dll")]
            private static extern IntPtr CreateWindowEx(
                WindowStylesEx dwExStyle,
                string lpClassName,
                string lpWindowName,
                WindowStyles dwStyle,
                int x,
                int y,
                int nWidth,
                int nHeight,
                IntPtr hWndParent,
                IntPtr hMenu,
                IntPtr hInstance,
                IntPtr lpParam
            );

            [DllImport("user32.dll")]
            [return: MarshalAs(UnmanagedType.Bool)]
            private static extern bool ShowWindow(IntPtr hWnd, ShowWindowCommands nCmdShow);

            [DllImport("user32.dll", SetLastError = true)]
            private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

            [DllImport("user32.dll", SetLastError = true)]
            private static extern bool DestroyWindow(IntPtr hWnd);

            [DllImport("user32.dll")]
            [return: MarshalAs(UnmanagedType.Bool)]
            private static extern bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);

            [DllImport("user32.dll")]
            private static extern bool UpdateWindow(IntPtr hWnd);

            [DllImport("user32.dll")]
            [return: MarshalAs(UnmanagedType.Bool)]
            private static extern bool SetWindowText(IntPtr hWnd, string lpString);


            /// <summary>
            /// Стили окна
            /// </summary>
            public enum WindowStyles : uint
            {
                WS_OVERLAPPED = 0x00000000,
                WS_CAPTION = 0x00C00000,
                WS_SYSMENU = 0x00080000,
                WS_MINIMIZEBOX = 0x00020000,
                WS_MAXIMIZEBOX = 0x00010000,
                WS_THICKFRAME = 0x00040000,
                WS_VISIBLE = 0x10000000
            }

            /// <summary>
            /// Стили окна
            /// </summary>
            public enum WindowStylesEx : uint
            {
                WS_EX_APPWINDOW = 0x00040000,
                WS_EX_WINDOWEDGE = 0x00000100
            }

            /// <summary>
            /// Тип отображения окна
            /// </summary>
            public enum ShowWindowCommands : int
            {
                SW_SHOWNORMAL = 1,
                SW_SHOWMAXIMIZED = 3
            }

            /// <summary>
            /// Создать окно
            /// </summary>
            /// <param name="windowStyleEx">Стиль окна из WindowStylesEx</param>
            /// <param name="windowStyle">Стиль окна из WindowStyle</param>
            /// <param name="className">Название класса в котором будет находится окно</param>
            /// <param name="windowName">Имя окна (отображается)</param>
            /// <param name="x">Положение окна по оси X</param>
            /// <param name="y">Положение окна по оси Y</param>
            /// <param name="width">Размер окна (Ширина)</param>
            /// <param name="height">Размер окна (Высота)</param>
            /// <returns>hWindows для дальнейшего использования в методах (для переменных укажите тип IntPtr, например: IntPtr windowExample = WinAPI.CreateWindw(...); )</returns>
            public static IntPtr Create(WindowStylesEx windowStyleEx, WindowStyles windowStyle, string className, string windowName, int x, int y, int width, int height)
            {
                return CreateWindowEx(
                    windowStyleEx,
                    className,
                    windowName,
                    windowStyle,
                    x,
                    y,
                    width,
                    height,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    IntPtr.Zero,
                    IntPtr.Zero
                );
            }

            /// <summary>
            /// Отобразить окно
            /// </summary>
            /// <param name="hWindow">Окно</param>
            /// <param name="command">Тип отображения окна из ShowWindowCommands</param>
            /// <returns></returns>
            public static bool Show(IntPtr hWindow, ShowWindowCommands command)
            {
                return ShowWindow(hWindow, command);
            }

            /// <summary>
            /// Найти окно по классу и названию
            /// </summary>
            /// <param name="className">Класс окна</param>
            /// <param name="windowName">Имя окна</param>
            /// <returns>Само окно в IntPtr для дальнейшего использования в методах или переменных</returns>
            public static IntPtr Find(string className, string windowName)
            {
                return FindWindow(className, windowName);
            }

            /// <summary>
            /// Уничтожение окна
            /// </summary>
            /// <param name="hWnd">Само окно</param>
            /// <returns></returns>
            public static bool Destroy(IntPtr hWnd)
            {
                return DestroyWindow(hWnd);
            }

            /// <summary>
            /// Изменить размер и позицию окна
            /// </summary>
            /// <param name="hWindow">Само окно</param>
            /// <param name="x">Новая позиция по оси X</param>
            /// <param name="y">Новая позиция по оси Y</param>
            /// <param name="width">Новый размер по ширине</param>
            /// <param name="height">Новый размер по высоте</param>
            /// <returns></returns>
            public static bool Move(IntPtr hWindow, int x, int y, int width, int height)
            {
                return MoveWindow(hWindow, x, y, width, height, true);
            }

            /// <summary>
            /// Обновить окно
            /// </summary>
            /// <param name="hWindow">Само окно</param>
            /// <returns></returns>
            public static bool Update(IntPtr hWindow)
            {
                return UpdateWindow(hWindow);
            }

            /// <summary>
            /// Установить новый текст (новое имя) окну
            /// </summary>
            /// <param name="hWindow">Само окно</param>
            /// <param name="text">Новый текст (Новое имя)</param>
            /// <returns></returns>
            public static bool SetText(IntPtr hWindow, string text)
            {
                return SetWindowText(hWindow, text);
            }
        }
    }
}
