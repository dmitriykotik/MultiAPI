<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bcl.Numerics</name>
    </assembly>
    <members>
        <member name="T:System.MathF">
            <summary>
            Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.
            </summary>
        </member>
        <member name="F:System.MathF.PI">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, p.
            </summary>
        </member>
        <member name="F:System.MathF.E">
            <summary>
            Represents the natural logarithmic base, specified by the constant, e.
            </summary>
        </member>
        <member name="M:System.MathF.Abs(System.Single)">
            <summary>
            Returns the absolute value of a single-precision floating-point number.
            </summary>
            <param name="x">The number to take the absolute value of.</param>
            <returns>The absolute value of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Acos(System.Single)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="x">The number to take the acos of.</param>
            <returns>The acos of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Asin(System.Single)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="x">The number to take the asin of.</param>
            <returns>The asin of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Atan(System.Single)">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            <param name="x">The number to take the atan of.</param>
            <returns>The atan of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Atan2(System.Single,System.Single)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The first number.</param>
            <param name="x">The second number.</param>
            <returns>The angle whose tangent is the quotient of <paramref name="y"/> and <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Ceiling(System.Single)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified single-precision floating-point number.
            </summary>
            <param name="x">The number to take the ceiling of.</param>
            <returns>The ceiling of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Cos(System.Single)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="x">The angle to take the cosine of.</param>
            <returns>The cosine of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Cosh(System.Single)">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="x">The angle to take the hyperbolic cosine of.</param>
            <returns>The hyperbolic cosine of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Exp(System.Single)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="x">The number to raise e to.</param>
            <returns>e raised to the power of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Floor(System.Single)">
            <summary>
            Returns the largest integral value less than or equal to the specified single-precision floating-point number.
            </summary>
            <param name="x">The number to take the floor of.</param>
            <returns>The floor of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.IEEERemainder(System.Single,System.Single)">
            <summary>
            Returns the remainder resulting from the division of a specified number by another specified number.
            </summary>
            <param name="x">The numerator</param>
            <param name="y">The denominator</param>
            <returns>The result of dividing <paramref name="x"/> by <paramref name="y"/></returns>
        </member>
        <member name="M:System.MathF.Log(System.Single)">
            <summary>
            Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="x">The number to take the natural log of.</param>
            <returns>The natural log of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Log(System.Single,System.Single)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="x">The number to take the log of.</param>
            <param name="y">The base of the log</param>
            <returns>The log of <paramref name="x"/> with base <paramref name="y"/></returns>
        </member>
        <member name="M:System.MathF.Log10(System.Single)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="x">The number to take the base 10 log of.</param>
            <returns>The base 10 log of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Max(System.Single,System.Single)">
            <summary>
            Returns the larger of two single-precision floating-point numbers.
            </summary>
            <param name="x">The first number to compare.</param>
            <param name="y">The second number to compare.</param>
            <returns>The larger of <paramref name="x"/> and <paramref name="y"/></returns>
        </member>
        <member name="M:System.MathF.Min(System.Single,System.Single)">
            <summary>
            Returns the smaller of two single-precision floating-point numbers.
            </summary>
            <param name="x">The first number to compare.</param>
            <param name="y">The second number to compare.</param>
            <returns>The smaller of <paramref name="x"/> and <paramref name="y"/></returns>
        </member>
        <member name="M:System.MathF.Pow(System.Single,System.Single)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="x">The base number.</param>
            <param name="y">The specified power.</param>
            <returns><paramref name="x"/> raised to the power of <paramref name="y"/></returns>
        </member>
        <member name="M:System.MathF.Round(System.Single)">
            <summary>
            Rounds a single-precision floating-point value to the nearest integral value, and rounds midpoint values to the nearest even number.
            </summary>
            <param name="x">The number to round.</param>
            <returns>The rounded representation of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Round(System.Single,System.Int32)">
            <summary>
            Rounds a single-precision floating-point value to a specified number of fractional digits, and rounds midpoint values to the nearest even number.
            </summary>
            <param name="x">The number to round.</param>
            <param name="digits">How many fractional digits to keep.</param>
            <returns>The rounded representation of <paramref name="x"/> with <paramref name="digits"/> fractional digits</returns>
        </member>
        <member name="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds a single-precision floating-point value to a specified number of fractional digits using the specified rounding convention.
            </summary>
            <param name="x">The number to round.</param>
            <param name="digits">How many fractional digits to keep.</param>
            <param name="mode">The rounding convention to use.</param>
            <returns>The rounded representation of <paramref name="x"/> with <paramref name="digits"/> fractional digits using <paramref name="mode"/> rounding convention</returns>
        </member>
        <member name="M:System.MathF.Round(System.Single,System.MidpointRounding)">
            <summary>
            Rounds a single-precision floating-point value to an integer using the specified rounding convention.
            </summary>
            <param name="x">The number to round.</param>
            <param name="mode">The rounding convention to use.</param>
            <returns>The rounded representation of <paramref name="x"/> using <paramref name="mode"/> rounding convention</returns>
        </member>
        <member name="M:System.MathF.Sign(System.Single)">
            <summary>
            Returns an integer that indicates the sign of a single-precision floating-point number.
            </summary>
            <param name="x">The number check the sign of.</param>
            <returns>The sign of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Sin(System.Single)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="x">The angle to take the sine of.</param>
            <returns>The sine of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Sinh(System.Single)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="x">The angle to take the hyperbolic sine of.</param>
            <returns>The hyperbolic sine of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Sqrt(System.Single)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="x">The number to take the square root of.</param>
            <returns>The square root of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Tan(System.Single)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="x">The angle to take the tangent of.</param>
            <returns>The tangent of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Tanh(System.Single)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="x">The angle to take the hyperbolic tangent of.</param>
            <returns>The hyperbolic tangent of <paramref name="x"/></returns>
        </member>
        <member name="M:System.MathF.Truncate(System.Single)">
            <summary>
            Calculates the integral part of a specified single-precision floating-point number.
            </summary>
            <param name="x">The number to truncate.</param>
            <returns>The truncated representation of <paramref name="x"/></returns>
        </member>
        <member name="T:System.Runtime.InteropServices.LibraryImportAttribute">
            <summary>
            Attribute used to indicate a source generator should create a function for marshalling
            arguments instead of relying on the runtime to generate an equivalent marshalling function at run-time.
            </summary>
            <remarks>
            This attribute is meaningless if the source generator associated with it is not enabled.
            The current built-in source generator only supports C# and only supplies an implementation when
            applied to static, partial, non-generic methods.
            </remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.LibraryImportAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.LibraryImportAttribute"/>.
            </summary>
            <param name="libraryName">Name of the library containing the import.</param>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.LibraryName">
            <summary>
            Gets the name of the library containing the import.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.EntryPoint">
            <summary>
            Gets or sets the name of the entry point to be called.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling">
            <summary>
            Gets or sets how to marshal string arguments to the method.
            </summary>
            <remarks>
            If this field is set to a value other than <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />,
            <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType" /> must not be specified.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> used to control how string arguments to the method are marshalled.
            </summary>
            <remarks>
            If this field is specified, <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling" /> must not be specified
            or must be set to <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.SetLastError">
            <summary>
            Gets or sets whether the callee sets an error (SetLastError on Windows or errno
            on other platforms) before returning from the attributed method.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.StringMarshalling">
            <summary>
            Specifies how strings should be marshalled for generated p/invokes
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Custom">
            <summary>
            Indicates the user is suppling a specific marshaller in <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf8">
            <summary>
            Use the platform-provided UTF-8 marshaller.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf16">
            <summary>
            Use the platform-provided UTF-16 marshaller.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
