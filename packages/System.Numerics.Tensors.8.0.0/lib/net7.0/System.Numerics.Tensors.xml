<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Numerics.Tensors</name>
    </assembly>
    <members>
        <member name="T:System.Numerics.Tensors.TensorPrimitives">
            <summary>Performs primitive tensor operations over spans of memory.</summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Abs(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise absolute value of each single-precision floating-point number in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = MathF.Abs(<paramref name="x" />[i])</c>.
            </para>
            <para>
            The absolute value of a <see cref="T:System.Single"/> is its numeric value without its sign. For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.
            </para>
            <para>
            If a value is equal to <see cref="F:System.Single.NegativeInfinity"/> or <see cref="F:System.Single.PositiveInfinity"/>, the result stored into the corresponding destination location is set to <see cref="F:System.Single.PositiveInfinity"/>.
            If a value is equal to <see cref="F:System.Single.NaN"/>, the result stored into the corresponding destination location is the original NaN value with the sign bit removed.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Add(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise addition of single-precision floating-point numbers in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <paramref name="x" />[i] + <paramref name="y" />[i]</c>.
            </para>
            <para>
            If either of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Add(System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
            <summary>Computes the element-wise addition of single-precision floating-point numbers in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a scalar.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <paramref name="x" />[i] + <paramref name="y" /></c>.
            </para>
            <para>
            If either of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.AddMultiply(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise result of <c>(<paramref name="x" /> + <paramref name="y" />) * <paramref name="multiplier" /></c> for the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <param name="multiplier">The third tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" /> and the length of <paramref name="multiplier" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="multiplier"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = (<paramref name="x" />[i] + <paramref name="y" />[i]) * <paramref name="multiplier" />[i]</c>.
            </para>
            <para>
            If any of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.AddMultiply(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
            <summary>Computes the element-wise result of <c>(<paramref name="x" /> + <paramref name="y" />) * <paramref name="multiplier" /></c> for the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <param name="multiplier">The third tensor, represented as a scalar.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = (<paramref name="x" />[i] + <paramref name="y" />[i]) * <paramref name="multiplier" /></c>.
            </para>
            <para>
            If any of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.AddMultiply(System.ReadOnlySpan{System.Single},System.Single,System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise result of <c>(<paramref name="x" /> + <paramref name="y" />) * <paramref name="multiplier" /></c> for the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a scalar.</param>
            <param name="multiplier">The third tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="multiplier" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="multiplier"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = (<paramref name="x" />[i] + <paramref name="y" />) * <paramref name="multiplier" />[i]</c>.
            </para>
            <para>
            If any of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Cosh(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise hyperbolic cosine of each single-precision floating-point radian angle in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <see cref="T:System.MathF" />.Cosh(<paramref name="x" />[i])</c>.
            </para>
            <para>
            If a value is equal to <see cref="F:System.Single.NegativeInfinity"/> or <see cref="F:System.Single.PositiveInfinity"/>, the result stored into the corresponding destination location is set to <see cref="F:System.Single.PositiveInfinity"/>.
            If a value is equal to <see cref="F:System.Single.NaN"/>, the result stored into the corresponding destination location is also NaN.
            </para>
            <para>
            The angles in x must be in radians. Use <see cref="M:System.Single.DegreesToRadians"/> or multiply by <see cref="F:System.MathF.PI"/>/180 to convert degrees to radians.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.CosineSimilarity(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>Computes the cosine similarity between the two specified non-empty, equal-length tensors of single-precision floating-point numbers.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <returns>The cosine similarity of the two tensors.</returns>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x" /> and <paramref name="y" /> must not be empty.</exception>
            <remarks>
            <para>
            This method effectively computes <c>TensorPrimitives.Dot(x, y) / (MathF.Sqrt(TensorPrimitives.SumOfSquares(x)) * MathF.Sqrt(TensorPrimitives.SumOfSquares(y)).</c>
            </para>
            <para>
            If any element in either input tensor is equal to <see cref="F:System.Single.NegativeInfinity"/>, <see cref="F:System.Single.PositiveInfinity"/>, or <see cref="F:System.Single.NaN"/>,
            NaN is returned.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Distance(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>Computes the distance between two points, specified as non-empty, equal-length tensors of single-precision floating-point numbers, in Euclidean space.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <returns>The Euclidean distance.</returns>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x" /> and <paramref name="y" /> must not be empty.</exception>
            <remarks>
            <para>
            This method effectively computes the equivalent of:
            <c>
                Span&lt;float&gt; difference = ...;
                TensorPrimitives.Subtract(x, y, difference);
                float result = MathF.Sqrt(TensorPrimitives.SumOfSquares(difference));
            </c>
            but without requiring additional temporary storage for the intermediate differences.
            </para>
            <para>
            If any element in either input tensor is equal to <see cref="F:System.Single.NaN"/>, NaN is returned.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Divide(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise division of single-precision floating-point numbers in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <paramref name="x" />[i] / <paramref name="y" />[i]</c>.
            </para>
            <para>
            If either of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Divide(System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
            <summary>Computes the element-wise division of single-precision floating-point numbers in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a scalar.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <paramref name="x" />[i] / <paramref name="y" /></c>.
            </para>
            <para>
            If either of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Dot(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>Computes the dot product of two tensors containing single-precision floating-point numbers.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <returns>The dot product.</returns>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <remarks>
            <para>
            This method effectively computes the equivalent of:
            <c>
                Span&lt;float&gt; products = ...;
                TensorPrimitives.Multiply(x, y, products);
                float result = TensorPrimitives.Sum(products);
            </c>
            but without requiring additional temporary storage for the intermediate products. It corresponds to the <c>dot</c> method defined by <c>BLAS1</c>.
            </para>
            <para>
            If any of the input elements is equal to <see cref="F:System.Single.NaN"/>, the resulting value is also NaN.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Exp(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise result of raising <c>e</c> to the single-precision floating-point number powers in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <see cref="T:System.MathF" />.Exp(<paramref name="x" />[i])</c>.
            </para>
            <para>
            If a value equals <see cref="F:System.Single.NaN"/> or <see cref="F:System.Single.PositiveInfinity"/>, the result stored into the corresponding destination location is set to NaN.
            If a value equals <see cref="F:System.Single.NegativeInfinity"/>, the result stored into the corresponding destination location is set to 0.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMax(System.ReadOnlySpan{System.Single})">
            <summary>Searches for the index of the largest single-precision floating-point number in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The index of the maximum element in <paramref name="x"/>, or -1 if <paramref name="x"/> is empty.</returns>
            <remarks>
            <para>
            The determination of the maximum element matches the IEEE 754:2019 `maximum` function. If any value equal to <see cref="F:System.Single.NaN"/>
            is present, the index of the first is returned. Positive 0 is considered greater than negative 0.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMaxMagnitude(System.ReadOnlySpan{System.Single})">
            <summary>Searches for the index of the single-precision floating-point number with the largest magnitude in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The index of the element in <paramref name="x"/> with the largest magnitude (absolute value), or -1 if <paramref name="x"/> is empty.</returns>
            <remarks>
            <para>
            The determination of the maximum magnitude matches the IEEE 754:2019 `maximumMagnitude` function. If any value equal to <see cref="F:System.Single.NaN"/>
            is present, the index of the first is returned. If two values have the same magnitude and one is positive and the other is negative,
            the positive value is considered to have the larger magnitude.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMin(System.ReadOnlySpan{System.Single})">
            <summary>Searches for the index of the smallest single-precision floating-point number in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The index of the minimum element in <paramref name="x"/>, or -1 if <paramref name="x"/> is empty.</returns>
            <remarks>
            <para>
            The determination of the minimum element matches the IEEE 754:2019 `minimum` function. If any value equal to <see cref="F:System.Single.NaN"/>
            is present, the index of the first is returned. Negative 0 is considered smaller than positive 0.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.IndexOfMinMagnitude(System.ReadOnlySpan{System.Single})">
            <summary>Searches for the index of the single-precision floating-point number with the smallest magnitude in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The index of the element in <paramref name="x"/> with the smallest magnitude (absolute value), or -1 if <paramref name="x"/> is empty.</returns>
            <remarks>
            <para>
            The determination of the minimum magnitude matches the IEEE 754:2019 `minimumMagnitude` function. If any value equal to <see cref="F:System.Single.NaN"/>
            is present, the index of the first is returned. If two values have the same magnitude and one is positive and the other is negative,
            the negative value is considered to have the smaller magnitude.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Log(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise natural (base <c>e</c>) logarithm of single-precision floating-point numbers in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <see cref="T:System.MathF" />.Log(<paramref name="x" />[i])</c>.
            </para>
            <para>
            If a value equals 0, the result stored into the corresponding destination location is set to <see cref="F:System.Single.NegativeInfinity"/>.
            If a value is negative or equal to <see cref="F:System.Single.NaN"/>, the result stored into the corresponding destination location is set to NaN.
            If a value is positive infinity, the result stored into the corresponding destination location is set to <see cref="F:System.Single.PositiveInfinity"/>.
            Otherwise, if a value is positive, its natural logarithm is stored into the corresponding destination location.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Log2(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise base 2 logarithm of single-precision floating-point numbers in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <see cref="T:System.MathF" />.Log2(<paramref name="x" />[i])</c>.
            </para>
            <para>
            If a value equals 0, the result stored into the corresponding destination location is set to <see cref="F:System.Single.NegativeInfinity"/>.
            If a value is negative or equal to <see cref="F:System.Single.NaN"/>, the result stored into the corresponding destination location is set to NaN.
            If a value is positive infinity, the result stored into the corresponding destination location is set to <see cref="F:System.Single.PositiveInfinity"/>.
            Otherwise, if a value is positive, its natural logarithm is stored into the corresponding destination location.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Max(System.ReadOnlySpan{System.Single})">
            <summary>Searches for the largest single-precision floating-point number in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The maximum element in <paramref name="x"/>.</returns>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
            <remarks>
            <para>
            The determination of the maximum element matches the IEEE 754:2019 `maximum` function. If any value equal to <see cref="F:System.Single.NaN"/>
            is present, the first is returned. Positive 0 is considered greater than negative 0.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Max(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise maximum of the single-precision floating-point numbers in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = MathF.Max(<paramref name="x" />[i], <paramref name="y" />[i])</c>.
            </para>
            <para>
            The determination of the maximum element matches the IEEE 754:2019 `maximum` function. If either value is equal to <see cref="F:System.Single.NaN"/>,
            that value is stored as the result. Positive 0 is considered greater than negative 0.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxMagnitude(System.ReadOnlySpan{System.Single})">
            <summary>Searches for the single-precision floating-point number with the largest magnitude in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The element in <paramref name="x"/> with the largest magnitude (absolute value).</returns>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
            <remarks>
            <para>
            The determination of the maximum magnitude matches the IEEE 754:2019 `maximumMagnitude` function. If any value equal to <see cref="F:System.Single.NaN"/>
            is present, the first is returned. If two values have the same magnitude and one is positive and the other is negative,
            the positive value is considered to have the larger magnitude.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.MaxMagnitude(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise single-precision floating-point number with the largest magnitude in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>This method effectively computes <c><paramref name="destination" />[i] = MathF.MaxMagnitude(<paramref name="x" />[i], <paramref name="y" />[i])</c>.</remarks>
            <remarks>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Min(System.ReadOnlySpan{System.Single})">
            <summary>Searches for the smallest single-precision floating-point number in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The minimum element in <paramref name="x"/>.</returns>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
            <remarks>
            <para>
            The determination of the minimum element matches the IEEE 754:2019 `minimum` function. If any value is equal to <see cref="F:System.Single.NaN"/>
            is present, the first is returned. Negative 0 is considered smaller than positive 0.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Min(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise minimum of the single-precision floating-point numbers in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = MathF.Max(<paramref name="x" />[i], <paramref name="y" />[i])</c>.
            </para>
            <para>
            The determination of the maximum element matches the IEEE 754:2019 `maximum` function. If either value is equal to <see cref="F:System.Single.NaN"/>,
            that value is stored as the result. Positive 0 is considered greater than negative 0.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.MinMagnitude(System.ReadOnlySpan{System.Single})">
            <summary>Searches for the single-precision floating-point number with the smallest magnitude in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The element in <paramref name="x"/> with the smallest magnitude (absolute value).</returns>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
            <remarks>
            <para>
            The determination of the minimum magnitude matches the IEEE 754:2019 `minimumMagnitude` function. If any value equal to <see cref="F:System.Single.NaN"/>
            is present, the first is returned. If two values have the same magnitude and one is positive and the other is negative,
            the negative value is considered to have the smaller magnitude.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.MinMagnitude(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise single-precision floating-point number with the smallest magnitude in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>This method effectively computes <c><paramref name="destination" />[i] = MathF.MinMagnitude(<paramref name="x" />[i], <paramref name="y" />[i])</c>.</remarks>
            <remarks>
            <para>
            The determination of the maximum magnitude matches the IEEE 754:2019 `minimumMagnitude` function. If either value is equal to <see cref="F:System.Single.NaN"/>,
            that value is stored as the result. If the two values have the same magnitude and one is positive and the other is negative,
            the negative value is considered to have the smaller magnitude.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Multiply(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise product of single-precision floating-point numbers in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <paramref name="x" />[i] * <paramref name="y" />[i]</c>.
            </para>
            <para>
            If either of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Multiply(System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
            <summary>Computes the element-wise product of single-precision floating-point numbers in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a scalar.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <paramref name="x" />[i] * <paramref name="y" /></c>.
            It corresponds to the <c>scal</c> method defined by <c>BLAS1</c>.
            </para>
            <para>
            If either of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAdd(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) * <paramref name="addend" /></c> for the specified tensors of single-precision floating-point numbers.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <param name="addend">The third tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" /> and length of <paramref name="addend" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="addend"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = (<paramref name="x" />[i] * <paramref name="y" />[i]) + <paramref name="addend" />[i]</c>.
            </para>
            <para>
            If either of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAdd(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
            <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) * <paramref name="addend" /></c> for the specified tensors of single-precision floating-point numbers.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <param name="addend">The third tensor, represented as a scalar.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = (<paramref name="x" />[i] * <paramref name="y" />[i]) + <paramref name="addend" /></c>.
            It corresponds to the <c>axpy</c> method defined by <c>BLAS1</c>.
            </para>
            <para>
            If either of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.MultiplyAdd(System.ReadOnlySpan{System.Single},System.Single,System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise result of <c>(<paramref name="x" /> * <paramref name="y" />) * <paramref name="addend" /></c> for the specified tensors of single-precision floating-point numbers.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a scalar.</param>
            <param name="addend">The third tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="addend" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="addend"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = (<paramref name="x" />[i] * <paramref name="y" />) + <paramref name="addend" />[i]</c>.
            </para>
            <para>
            If either of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Negate(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise negation of each single-precision floating-point number in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = -<paramref name="x" />[i]</c>.
            </para>
            <para>
            If any of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Norm(System.ReadOnlySpan{System.Single})">
            <summary>Computes the Euclidean norm of the specified tensor of single-precision floating-point numbers.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <returns>The norm.</returns>
            <remarks>
            <para>
            This method effectively computes <c>MathF.Sqrt(TensorPrimitives.SumOfSquares(x))</c>.
            This is often referred to as the Euclidean norm or L2 norm.
            It corresponds to the <c>nrm2</c> method defined by <c>BLAS1</c>.
            </para>
            <para>
            If any of the input values is equal to <see cref="F:System.Single.NaN"/>, the result value is also NaN.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Product(System.ReadOnlySpan{System.Single})">
            <summary>Computes the product of all elements in the specified non-empty tensor of single-precision floating-point numbers.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The result of multiplying all elements in <paramref name="x"/>.</returns>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be greater than zero.</exception>
            <remarks>
            <para>
            If any of the input values is equal to <see cref="F:System.Single.NaN"/>, the result value is also NaN.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.ProductOfDifferences(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>Computes the product of the element-wise differences of the single-precision floating-point numbers in the specified non-empty tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <returns>The result of multiplying the element-wise subtraction of the elements in the second tensor from the first tensor.</returns>
            <exception cref="T:System.ArgumentException">Length of both input spans must be greater than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="y"/> must have the same length.</exception>
            <remarks>
            <para>
            This method effectively computes:
            <c>
                Span&lt;float&gt; differences = ...;
                TensorPrimitives.Subtract(x, y, differences);
                float result = TensorPrimitives.Product(differences);
            </c>
            but without requiring additional temporary storage for the intermediate differences.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.ProductOfSums(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>Computes the product of the element-wise sums of the single-precision floating-point numbers in the specified non-empty tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a span.</param>
            <returns>The result of multiplying the element-wise additions of the elements in each tensor.</returns>
            <exception cref="T:System.ArgumentException">Length of both input spans must be greater than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="y"/> must have the same length.</exception>
            <remarks>
            <para>
            This method effectively computes:
            <c>
                Span&lt;float&gt; sums = ...;
                TensorPrimitives.Add(x, y, sums);
                float result = TensorPrimitives.Product(sums);
            </c>
            but without requiring additional temporary storage for the intermediate sums.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Sigmoid(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise sigmoid function on the specified non-empty tensor of single-precision floating-point numbers.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <param name="destination">The destination tensor.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x" /> must not be empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = 1f / (1f + <see cref="T:System.MathF" />.Exp(-<paramref name="x" />[i]))</c>.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Sinh(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise hyperbolic sine of each single-precision floating-point radian angle in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <see cref="T:System.MathF" />.Sinh(<paramref name="x" />[i])</c>.
            </para>
            <para>
            If a value is equal to <see cref="F:System.Single.NegativeInfinity"/>, <see cref="F:System.Single.PositiveInfinity"/>, or <see cref="F:System.Single.NaN"/>,
            the corresponding destination location is set to that value.
            </para>
            <para>
            The angles in x must be in radians. Use <see cref="M:System.Single.DegreesToRadians"/> or multiply by <see cref="F:System.MathF.PI"/>/180 to convert degrees to radians.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.SoftMax(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the softmax function over the specified non-empty tensor of single-precision floating-point numbers.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <param name="destination">The destination tensor.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x" /> must not be empty.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes a sum of <c>MathF.Exp(x[i])</c> for all elements in <paramref name="x"/>.
            It then effectively computes <c><paramref name="destination" />[i] = MathF.Exp(<paramref name="x" />[i]) / sum</c>.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Subtract(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise difference between single-precision floating-point numbers in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a scalar.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Length of <paramref name="x" /> must be same as length of <paramref name="y" />.</exception>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="y"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <paramref name="x" />[i] - <paramref name="y" />[i]</c>.
            </para>
            <para>
            If either of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Subtract(System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
            <summary>Computes the element-wise difference between single-precision floating-point numbers in the specified tensors.</summary>
            <param name="x">The first tensor, represented as a span.</param>
            <param name="y">The second tensor, represented as a scalar.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <paramref name="x" />[i] - <paramref name="y" /></c>.
            </para>
            <para>
            If either of the element-wise input values is equal to <see cref="F:System.Single.NaN"/>, the resulting element-wise value is also NaN.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Sum(System.ReadOnlySpan{System.Single})">
            <summary>Computes the sum of all elements in the specified tensor of single-precision floating-point numbers.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The result of adding all elements in <paramref name="x"/>, or zero if <paramref name="x"/> is empty.</returns>
            <remarks>
            <para>
            If any of the values in the input is equal to <see cref="F:System.Single.NaN"/>, the result is also NaN.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.SumOfMagnitudes(System.ReadOnlySpan{System.Single})">
            <summary>Computes the sum of the absolute values of every element in the specified tensor of single-precision floating-point numbers.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The result of adding the absolute value of every element in <paramref name="x"/>, or zero if <paramref name="x"/> is empty.</returns>
            <remarks>
            <para>
            This method effectively computes:
            <c>
                Span&lt;float&gt; absoluteValues = ...;
                TensorPrimitives.Abs(x, absoluteValues);
                float result = TensorPrimitives.Sum(absoluteValues);
            </c>
            but without requiring intermediate storage for the absolute values. It corresponds to the <c>asum</c> method defined by <c>BLAS1</c>.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.SumOfSquares(System.ReadOnlySpan{System.Single})">
            <summary>Computes the sum of the square of every element in the specified tensor of single-precision floating-point numbers.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <returns>The result of adding the square of every element in <paramref name="x"/>, or zero if <paramref name="x"/> is empty.</returns>
            <remarks>
            <para>
            This method effectively computes:
            <c>
                Span&lt;float&gt; squaredValues = ...;
                TensorPrimitives.Multiply(x, x, squaredValues);
                float result = TensorPrimitives.Sum(squaredValues);
            </c>
            but without requiring intermediate storage for the squared values.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Tanh(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Computes the element-wise hyperbolic tangent of each single-precision floating-point radian angle in the specified tensor.</summary>
            <param name="x">The tensor, represented as a span.</param>
            <param name="destination">The destination tensor, represented as a span.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="destination"/> reference overlapping memory locations and do not begin at the same location.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = <see cref="T:System.MathF" />.Tanh(<paramref name="x" />[i])</c>.
            </para>
            <para>
            If a value is equal to <see cref="F:System.Single.NegativeInfinity"/>, the corresponding destination location is set to -1.
            If a value is equal to <see cref="F:System.Single.PositiveInfinity"/>, the corresponding destination location is set to 1.
            If a value is equal to <see cref="F:System.Single.NaN"/>, the corresponding destination location is set to NaN.
            </para>
            <para>
            The angles in x must be in radians. Use <see cref="M:System.Single.DegreesToRadians"/> or multiply by <see cref="F:System.MathF.PI"/>/180 to convert degrees to radians.
            </para>
            <para>
            This method may call into the underlying C runtime or employ instructions specific to the current architecture. Exact results may differ between different
            operating systems or architectures.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.ValidateInputOutputSpanNonOverlapping(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Throws an exception if the <paramref name="input"/> and <paramref name="output"/> spans overlap and don't begin at the same memory location.</summary>
        </member>
        <member name="P:System.Numerics.Tensors.TensorPrimitives.AlignmentUInt32Mask_16x16">
             <summary>Mask used to handle alignment elements before vectorized handling of the input.</summary>
             <remarks>
             Logically 16 rows of 16 uints. The Nth row should be used to handle N alignment elements at the
             beginning of the input, where elements in the vector after that will be zero'd.
            
             There actually exists 17 rows in the table with the last row being a repeat of the first. This is
             done because it allows the main algorithms to use a simplified algorithm when computing the amount
             of misalignment where we always skip the first 16 elements, even if already aligned, so we don't
             double process them. This allows us to avoid an additional branch.
             </remarks>
        </member>
        <member name="P:System.Numerics.Tensors.TensorPrimitives.RemainderUInt32Mask_16x16">
             <summary>Mask used to handle remaining elements after vectorized handling of the input.</summary>
             <remarks>
             Logically 16 rows of 16 uints. The Nth row should be used to handle N remaining elements at the
             end of the input, where elements in the vector prior to that will be zero'd.
            
             Much as with the AlignmentMask table, we actually have 17 rows where the last row is a repeat of
             the first. Doing this allows us to avoid an additional branch and instead to always process the
             last 16 elements via a conditional select instead.
             </remarks>
        </member>
        <member name="F:System.Numerics.Tensors.TensorPrimitives.NonTemporalByteThreshold">
             <summary>Defines the threshold, in bytes, at which non-temporal stores will be used.</summary>
             <remarks>
                 A non-temporal store is one that allows the CPU to bypass the cache when writing to memory.
            
                 This can be beneficial when working with large amounts of memory where the writes would otherwise
                 cause large amounts of repeated updates and evictions. The hardware optimization manuals recommend
                 the threshold to be roughly half the size of the last level of on-die cache -- that is, if you have approximately
                 4MB of L3 cache per core, you'd want this to be approx. 1-2MB, depending on if hyperthreading was enabled.
            
                 However, actually computing the amount of L3 cache per core can be tricky or error prone. Native memcpy
                 algorithms use a constant threshold that is typically around 256KB and we match that here for simplicity. This
                 threshold accounts for most processors in the last 10-15 years that had approx. 1MB L3 per core and support
                 hyperthreading, giving a per core last level cache of approx. 512KB.
             </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.ConvertToHalf(System.ReadOnlySpan{System.Single},System.Span{System.Half})">
            <summary>
            Copies <paramref name="source"/> to <paramref name="destination"/>, converting each <see cref="T:System.Single" />
            value to its nearest representable half-precision floating-point value.
            </summary>
            <param name="source">The source span from which to copy values.</param>
            <param name="destination">The destination span into which the converted values should be written.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = (Half)<paramref name="source" />[i]</c>.
            </para>
            <para>
            <paramref name="source"/> and <paramref name="destination"/> must not overlap. If they do, behavior is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.ConvertToSingle(System.ReadOnlySpan{System.Half},System.Span{System.Single})">
            <summary>
            Copies <paramref name="source"/> to <paramref name="destination"/>, converting each half-precision
            floating-point value to its nearest representable <see cref="T:System.Single"/> value.
            </summary>
            <param name="source">The source span from which to copy values.</param>
            <param name="destination">The destination span into which the converted values should be written.</param>
            <exception cref="T:System.ArgumentException">Destination is too short.</exception>
            <remarks>
            <para>
            This method effectively computes <c><paramref name="destination" />[i] = (float)<paramref name="source" />[i]</c>.
            </para>
            <para>
            <paramref name="source"/> and <paramref name="destination"/> must not overlap. If they do, behavior is undefined.
            </para>
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.CosineSimilarityCore(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>Computes the cosine similarity between the two specified non-empty, equal-length tensors of single-precision floating-point numbers.</summary>
            <remarks>Assumes arguments have already been validated to be non-empty and equal length.</remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Aggregate``2(System.ReadOnlySpan{System.Single})">
            <summary>Performs an aggregation over all elements in <paramref name="x"/> to produce a single-precision floating-point value.</summary>
            <typeparam name="TTransformOperator">Specifies the transform operation that should be applied to each element loaded from <paramref name="x"/>.</typeparam>
            <typeparam name="TAggregationOperator">
            Specifies the aggregation binary operation that should be applied to multiple values to aggregate them into a single value.
            The aggregation is applied after the transform is applied to each element.
            </typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Aggregate``2(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>Performs an aggregation over all pair-wise elements in <paramref name="x"/> and <paramref name="y"/> to produce a single-precision floating-point value.</summary>
            <typeparam name="TBinaryOperator">Specifies the binary operation that should be applied to the pair-wise elements loaded from <paramref name="x"/> and <paramref name="y"/>.</typeparam>
            <typeparam name="TAggregationOperator">
            Specifies the aggregation binary operation that should be applied to multiple values to aggregate them into a single value.
            The aggregation is applied to the results of the binary operations on the pair-wise values.
            </typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.MinMaxCore``1(System.ReadOnlySpan{System.Single})">
            <remarks>
            This is the same as <see cref="M:System.Numerics.Tensors.TensorPrimitives.Aggregate``2(System.ReadOnlySpan{System.Single})"/>
            with an identity transform, except it early exits on NaN.
            </remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.InvokeSpanIntoSpan``1(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>Performs an element-wise operation on <paramref name="x"/> and writes the results to <paramref name="destination"/>.</summary>
            <typeparam name="TUnaryOperator">Specifies the operation to perform on each element loaded from <paramref name="x"/>.</typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.InvokeSpanSpanIntoSpan``1(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>
            Performs an element-wise operation on <paramref name="x"/> and <paramref name="y"/>,
            and writes the results to <paramref name="destination"/>.
            </summary>
            <typeparam name="TBinaryOperator">
            Specifies the operation to perform on the pair-wise elements loaded from <paramref name="x"/> and <paramref name="y"/>.
            </typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.InvokeSpanScalarIntoSpan``1(System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
            <summary>
            Performs an element-wise operation on <paramref name="x"/> and <paramref name="y"/>,
            and writes the results to <paramref name="destination"/>.
            </summary>
            <typeparam name="TBinaryOperator">
            Specifies the operation to perform on each element loaded from <paramref name="x"/> with <paramref name="y"/>.
            </typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.InvokeSpanScalarIntoSpan``2(System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
            <summary>
            Performs an element-wise operation on <paramref name="x"/> and <paramref name="y"/>,
            and writes the results to <paramref name="destination"/>.
            </summary>
            <typeparam name="TTransformOperator">
            Specifies the operation to perform on each element loaded from <paramref name="x"/>.
            It is not used with <paramref name="y"/>.
            </typeparam>
            <typeparam name="TBinaryOperator">
            Specifies the operation to perform on the transformed value from <paramref name="x"/> with <paramref name="y"/>.
            </typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.InvokeSpanSpanSpanIntoSpan``1(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>
            Performs an element-wise operation on <paramref name="x"/>, <paramref name="y"/>, and <paramref name="z"/>,
            and writes the results to <paramref name="destination"/>.
            </summary>
            <typeparam name="TTernaryOperator">
            Specifies the operation to perform on the pair-wise elements loaded from <paramref name="x"/>, <paramref name="y"/>,
            and <paramref name="z"/>.
            </typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.InvokeSpanSpanScalarIntoSpan``1(System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single},System.Single,System.Span{System.Single})">
            <summary>
            Performs an element-wise operation on <paramref name="x"/>, <paramref name="y"/>, and <paramref name="z"/>,
            and writes the results to <paramref name="destination"/>.
            </summary>
            <typeparam name="TTernaryOperator">
            Specifies the operation to perform on the pair-wise elements loaded from <paramref name="x"/> and <paramref name="y"/>
            with <paramref name="z"/>.
            </typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.InvokeSpanScalarSpanIntoSpan``1(System.ReadOnlySpan{System.Single},System.Single,System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>
            Performs an element-wise operation on <paramref name="x"/>, <paramref name="y"/>, and <paramref name="z"/>,
            and writes the results to <paramref name="destination"/>.
            </summary>
            <typeparam name="TTernaryOperator">
            Specifies the operation to perform on the pair-wise element loaded from <paramref name="x"/>, with <paramref name="y"/>,
            and the element loaded from <paramref name="z"/>.
            </typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>Performs (x * y) + z. It will be rounded as one ternary operation if such an operation is accelerated on the current hardware.</summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.FusedMultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>Performs (x * y) + z. It will be rounded as one ternary operation if such an operation is accelerated on the current hardware.</summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.HorizontalAggregate``1(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>Aggregates all of the elements in the <paramref name="x"/> into a single value.</summary>
            <typeparam name="TAggregate">Specifies the operation to be performed on each pair of values.</typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.HorizontalAggregate``1(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>Aggregates all of the elements in the <paramref name="x"/> into a single value.</summary>
            <typeparam name="TAggregate">Specifies the operation to be performed on each pair of values.</typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.IsNegative(System.Single)">
            <summary>Gets whether the specified <see cref="T:System.Single"/> is negative.</summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.IsNegative(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>Gets whether each specified <see cref="T:System.Single"/> is negative.</summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.IsNegative(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>Gets whether each specified <see cref="T:System.Single"/> is negative.</summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.IsPositive(System.Single)">
            <summary>Gets whether the specified <see cref="T:System.Single"/> is positive.</summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.IsPositive(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>Gets whether each specified <see cref="T:System.Single"/> is positive.</summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.IsPositive(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>Gets whether each specified <see cref="T:System.Single"/> is positive.</summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.GetFirstNaN(System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>Finds and returns the first NaN value in <paramref name="vector"/>.</summary>
            <remarks>The vector must have already been validated to contain a NaN.</remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.GetFirstNaNIndex(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Int32})">
            <summary>Finds and returns the first NaN index value in <paramref name="vector"/>.</summary>
            <remarks>The vector must have already been validated to contain a NaN.</remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.GetFirstNaN(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>Finds and returns the first NaN value in <paramref name="vector"/>.</summary>
            <remarks>The vector must have already been validated to contain a NaN.</remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.GetFirstNaNIndex(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Int32})">
            <summary>Finds and returns the first NaN index value in <paramref name="vector"/>.</summary>
            <remarks>The vector must have already been validated to contain a NaN.</remarks>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.Log2(System.Single)">
            <summary>Gets the base 2 logarithm of <paramref name="x"/>.</summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.CreateAlignmentMaskSingleVector128(System.Int32)">
            <summary>
            Gets a vector mask that will be all-ones-set for the last <paramref name="count"/> elements
            and zero for all other elements.
            </summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.CreateAlignmentMaskSingleVector256(System.Int32)">
            <summary>
            Gets a vector mask that will be all-ones-set for the last <paramref name="count"/> elements
            and zero for all other elements.
            </summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.CreateRemainderMaskSingleVector128(System.Int32)">
            <summary>
            Gets a vector mask that will be all-ones-set for the last <paramref name="count"/> elements
            and zero for all other elements.
            </summary>
        </member>
        <member name="M:System.Numerics.Tensors.TensorPrimitives.CreateRemainderMaskSingleVector256(System.Int32)">
            <summary>
            Gets a vector mask that will be all-ones-set for the last <paramref name="count"/> elements
            and zero for all other elements.
            </summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.AddOperator">
            <summary>x + y</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.SubtractOperator">
            <summary>x - y</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.SubtractSquaredOperator">
            <summary>(x - y) * (x - y)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.MultiplyOperator">
            <summary>x * y</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.DivideOperator">
            <summary>x / y</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.MaxOperator">
            <summary>MathF.Max(x, y) (but NaNs may not be propagated)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.IndexOfMaxOperator">
            <summary>Returns the index of MathF.Max(x, y)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.IndexOfMinOperator">
            <summary>Returns the index of MathF.Min(x, y)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.MaxPropagateNaNOperator">
            <summary>MathF.Max(x, y)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.MaxMagnitudeOperator">
            <summary>Operator to get x or y based on which has the larger MathF.Abs (but NaNs may not be propagated)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.MaxMagnitudePropagateNaNOperator">
            <summary>Operator to get x or y based on which has the larger MathF.Abs</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.MinOperator">
            <summary>MathF.Min(x, y) (but NaNs may not be propagated)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.MinPropagateNaNOperator">
            <summary>MathF.Min(x, y)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.MinMagnitudeOperator">
            <summary>Operator to get x or y based on which has the smaller MathF.Abs (but NaNs may not be propagated)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.MinMagnitudePropagateNaNOperator">
            <summary>Operator to get x or y based on which has the smaller MathF.Abs</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.NegateOperator">
            <summary>-x</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.AddMultiplyOperator">
            <summary>(x + y) * z</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.MultiplyAddOperator">
            <summary>(x * y) + z</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.IdentityOperator">
            <summary>x</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.SquaredOperator">
            <summary>x * x</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.AbsoluteOperator">
            <summary>MathF.Abs(x)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.ExpOperator">
            <summary>MathF.Exp(x)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.CoshOperator">
            <summary>MathF.Cosh(x)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.SinhOperator">
            <summary>MathF.Sinh(x)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.TanhOperator">
            <summary>MathF.Tanh(x)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.LogOperator">
            <summary>MathF.Log(x)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.Log2Operator">
            <summary>MathF.Log2(x)</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.SigmoidOperator">
            <summary>1f / (1f + MathF.Exp(-x))</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.IUnaryOperator">
            <summary>Operator that takes one input value and returns a single value.</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.IBinaryOperator">
            <summary>Operator that takes two input values and returns a single value.</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.IAggregationOperator">
            <summary><see cref="T:System.Numerics.Tensors.TensorPrimitives.IBinaryOperator"/> that specializes horizontal aggregation of all elements in a vector.</summary>
        </member>
        <member name="T:System.Numerics.Tensors.TensorPrimitives.ITernaryOperator">
            <summary>Operator that takes three input values and returns a single value.</summary>
        </member>
        <member name="P:System.SR.Argument_DestinationTooShort">
            <summary>Destination is too short.</summary>
        </member>
        <member name="P:System.SR.Argument_SpansMustBeNonEmpty">
            <summary>Input span arguments must not be empty.</summary>
        </member>
        <member name="P:System.SR.Argument_SpansMustHaveSameLength">
            <summary>Input span arguments must all have the same length.</summary>
        </member>
        <member name="P:System.SR.Argument_InputAndDestinationSpanMustNotOverlap">
            <summary>The destination span may only overlap with an input span if the two spans start at the same memory location.</summary>
        </member>
    </members>
</doc>
