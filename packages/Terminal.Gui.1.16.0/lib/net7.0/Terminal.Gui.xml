<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Terminal.Gui</name>
    </assembly>
    <members>
        <member name="T:Unix.Terminal.UnmanagedLibrary">
            <summary>
            Represents a dynamically loaded unmanaged library in a (partially) platform independent manner.
            First, the native library is loaded using dlopen (on Unix systems) or using LoadLibrary (on Windows).
            dlsym or GetProcAddress are then used to obtain symbol addresses. <c>Marshal.GetDelegateForFunctionPointer</c>
            transforms the addresses into delegates to native methods.
            See http://stackoverflow.com/questions/13461989/p-invoke-to-dynamically-loaded-library-on-mono.
            </summary>
        </member>
        <member name="M:Unix.Terminal.UnmanagedLibrary.LoadSymbol(System.String)">
            <summary>
            Loads symbol in a platform specific way.
            </summary>
            <param name="symbolName"></param>
            <returns></returns>
        </member>
        <member name="M:Unix.Terminal.UnmanagedLibrary.PlatformSpecificLoadLibrary(System.String)">
            <summary>
            Loads library in a platform specific way.
            </summary>
        </member>
        <member name="T:Unix.Terminal.UnmanagedLibrary.Mono">
            <summary>
            On Linux systems, using using dlopen and dlsym results in
            DllNotFoundException("libdl.so not found") if libc6-dev
            is not installed. As a workaround, we load symbols for
            dlopen and dlsym from the current process as on Linux
            Mono sure is linked against these symbols.
            </summary>
        </member>
        <member name="T:Unix.Terminal.UnmanagedLibrary.CoreCLR">
            <summary>
            Similarly as for Mono on Linux, we load symbols for
            dlopen and dlsym from the "libcoreclr.so",
            to avoid the dependency on libc-dev Linux.
            </summary>
        </member>
        <member name="T:Terminal.Gui.CursesDriver">
            <summary>
            This is the Curses driver for the gui.cs/Terminal framework.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CursesDriver.MakeColor(System.Int16,System.Int16)">
            <summary>
            Creates a curses color from the provided foreground and background colors
            </summary>
            <param name="foreground">Contains the curses attributes for the foreground (color, plus any attributes)</param>
            <param name="background">Contains the curses attributes for the background (color, plus any attributes)</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.CursesDriver.GetCursorVisibility(Terminal.Gui.CursorVisibility@)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CursesDriver.SetCursorVisibility(Terminal.Gui.CursorVisibility)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CursesDriver.EnsureCursorVisibility">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Platform.Suspend">
            <summary>
            Suspends the process by sending SIGTSTP to itself
            </summary>
            <returns>The suspend.</returns>
        </member>
        <member name="T:Terminal.Gui.CursesClipboard">
            <summary>
             A clipboard implementation for Linux.
             This implementation uses the xclip command to access the clipboard.
            </summary>	
            <remarks>
            If xclip is not installed, this implementation will not work.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.MacOSXClipboard">
            <summary>
             A clipboard implementation for MacOSX. 
             This implementation uses the Mac clipboard API (via P/Invoke) to copy/paste.
             The existance of the Mac pbcopy and pbpaste commands 
             is used to determine if copy/paste is supported.
            </summary>	
        </member>
        <member name="T:Terminal.Gui.WSLClipboard">
            <summary>
             A clipboard implementation for Linux, when running under WSL. 
             This implementation uses the Windows clipboard to store the data, and uses Windows'
             powershell.exe (launched via WSL interop services) to set/get the Windows
             clipboard. 
            </summary>
        </member>
        <member name="T:Terminal.Gui.UnixMainLoop">
            <summary>
            Unix main loop, suitable for using on Posix systems
            </summary>
            <remarks>
            In addition to the general functions of the mainloop, the Unix version
            can watch file descriptors using the AddWatch methods.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.UnixMainLoop.Condition">
            <summary>
            Condition on which to wake up from file descriptor activity.  These match the Linux/BSD poll definitions.
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollIn">
            <summary>
            There is data to read
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollOut">
            <summary>
            Writing to the specified descriptor will not block
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollPri">
            <summary>
            There is urgent data to read
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollErr">
            <summary>
             Error condition on output
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollHup">
            <summary>
            Hang-up on output
            </summary>
        </member>
        <member name="F:Terminal.Gui.UnixMainLoop.Condition.PollNval">
            <summary>
            File descriptor is not open.
            </summary>
        </member>
        <member name="M:Terminal.Gui.UnixMainLoop.RemoveWatch(System.Object)">
            <summary>
            Removes an active watch from the mainloop.
            </summary>
            <remarks>
            The token parameter is the value returned from AddWatch
            </remarks>
        </member>
        <member name="M:Terminal.Gui.UnixMainLoop.AddWatch(System.Int32,Terminal.Gui.UnixMainLoop.Condition,System.Func{Terminal.Gui.MainLoop,System.Boolean})">
             <summary>
              Watches a file descriptor for activity.
             </summary>
             <remarks>
              When the condition is met, the provided callback
              is invoked.  If the callback returns false, the
              watch is automatically removed.
            
              The return value is a token that represents this watch, you can
              use this token to remove the watch by calling RemoveWatch.
             </remarks>
        </member>
        <member name="T:Terminal.Gui.FakeConsole">
            <summary>
            
            </summary>
        </member>
        <member name="F:Terminal.Gui.FakeConsole.WIDTH">
            <summary>
            Specifies the initial console width.
            </summary>
        </member>
        <member name="F:Terminal.Gui.FakeConsole.HEIGHT">
            <summary>
            Specifies the initial console height.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.IsOutputRedirected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.IsErrorRedirected">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.In">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.Error">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.InputEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.OutputEncoding">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.BackgroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.ForegroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.BufferHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.BufferWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.TreatControlCAsInput">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.LargestWindowWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.LargestWindowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.WindowTop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorTop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CursorVisible">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.KeyAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.NumberLock">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.CapsLock">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeConsole.IsInputRedirected">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Beep">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Beep(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardError">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardError(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardInput(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardInput">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardOutput(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.OpenStandardOutput">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Read">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.ReadKey(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="F:Terminal.Gui.FakeConsole.MockKeyPresses">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.ReadKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.ReadLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.ResetColor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetBufferSize(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetError(System.IO.TextWriter)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetIn(System.IO.TextReader)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetOut(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="newOut"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetWindowPosition(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="top"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.SetWindowSize(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Char[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.Write(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Char[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Char)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Terminal.Gui.FakeConsole.WriteLine(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Terminal.Gui.FakeDriver">
            <summary>
            Implements a mock ConsoleDriver for unit testing
            </summary>
        </member>
        <member name="P:Terminal.Gui.FakeDriver.Contents">
            <summary>
            Assists with testing, the format is rows, columns and 3 values on the last column: Rune, Attribute and Dirty Flag
            </summary>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.GetCursorVisibility(Terminal.Gui.CursorVisibility@)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.SetCursorVisibility(Terminal.Gui.CursorVisibility)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.FakeDriver.EnsureCursorVisibility">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.NetDriver.GetCursorVisibility(Terminal.Gui.CursorVisibility@)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.NetDriver.SetCursorVisibility(Terminal.Gui.CursorVisibility)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.NetDriver.EnsureCursorVisibility">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.NetMainLoop">
            <summary>
            Mainloop intended to be used with the .NET System.Console API, and can
            be used on Windows and Unix, it is cross platform but lacks things like
            file descriptor monitoring.
            </summary>
            <remarks>
            This implementation is used for NetDriver.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.NetMainLoop.ProcessInput">
            <summary>
            Invoked when a Key is pressed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.NetMainLoop.#ctor(Terminal.Gui.ConsoleDriver)">
            <summary>
            Initializes the class with the console driver.
            </summary>
            <remarks>
              Passing a consoleDriver is provided to capture windows resizing.
            </remarks>
            <param name="consoleDriver">The console driver used by this Net main loop.</param>
        </member>
        <member name="M:Terminal.Gui.WindowsDriver.GetCursorVisibility(Terminal.Gui.CursorVisibility@)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.WindowsDriver.SetCursorVisibility(Terminal.Gui.CursorVisibility)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.WindowsDriver.EnsureCursorVisibility">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.WindowsMainLoop">
            <summary>
            Mainloop intended to be used with the <see cref="T:Terminal.Gui.WindowsDriver"/>, and can
            only be used on Windows.
            </summary>
            <remarks>
            This implementation is used for WindowsDriver.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.WindowsMainLoop.ProcessInput">
            <summary>
            Invoked when a Key is pressed or released.
            </summary>
        </member>
        <member name="F:Terminal.Gui.WindowsMainLoop.WinChanged">
            <summary>
            Invoked when the window is changed.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Application">
            <summary>
            A static, singleton class providing the main application driver for Terminal.Gui apps. 
            </summary>
            <example>
            <code>
            // A simple Terminal.Gui app that creates a window with a frame and title with 
            // 5 rows/columns of padding.
            Application.Init();
            var win = new Window ("Hello World - CTRL-Q to quit") {
                X = 5,
                Y = 5,
                Width = Dim.Fill (5),
                Height = Dim.Fill (5)
            };
            Application.Top.Add(win);
            Application.Run();
            Application.Shutdown();
            </code>
            </example>
            <remarks>
              <para>
                Creates a instance of <see cref="T:Terminal.Gui.MainLoop"/> to process input events, handle timers and
                other sources of data. It is accessible via the <see cref="P:Terminal.Gui.Application.MainLoop"/> property.
              </para>
              <para>
                You can hook up to the <see cref="F:Terminal.Gui.Application.Iteration"/> event to have your method
                invoked on each iteration of the <see cref="T:Terminal.Gui.MainLoop"/>.
              </para>
              <para>
                When invoked sets the SynchronizationContext to one that is tied
                to the mainloop, allowing user code to use async/await.
              </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.Application.Driver">
            <summary>
            The current <see cref="T:Terminal.Gui.ConsoleDriver"/> in use.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.MdiChildes">
            <summary>
            Gets all the Mdi childes which represent all the not modal <see cref="T:Terminal.Gui.Toplevel"/> from the <see cref="P:Terminal.Gui.Application.MdiTop"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.MdiTop">
            <summary>
            The <see cref="T:Terminal.Gui.Toplevel"/> object used for the application on startup which <see cref="P:Terminal.Gui.Toplevel.IsMdiContainer"/> is true.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.Top">
            <summary>
            The <see cref="T:Terminal.Gui.Toplevel"/> object used for the application on startup (<seealso cref="P:Terminal.Gui.Application.Top"/>)
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Terminal.Gui.Application.Current">
            <summary>
            The current <see cref="T:Terminal.Gui.Toplevel"/> object. This is updated when <see cref="M:Terminal.Gui.Application.Run(System.Func{System.Exception,System.Boolean})"/> enters and leaves to point to the current <see cref="T:Terminal.Gui.Toplevel"/> .
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Terminal.Gui.Application.WantContinuousButtonPressedView">
            <summary>
            The current <see cref="T:Terminal.Gui.View"/> object that wants continuous mouse button pressed events.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.EnableConsoleScrolling">
            <summary>
            The current <see cref="P:Terminal.Gui.ConsoleDriver.EnableConsoleScrolling"/> used in the terminal.
            </summary>
            <remarks>
            <para>
            If <see langword="false"/> (the default) the height of the Terminal.Gui application (<see cref="P:Terminal.Gui.ConsoleDriver.Rows"/>) 
            tracks to the height of the visible console view when the console is resized. In this case 
            scrolling in the console will be disabled and all <see cref="P:Terminal.Gui.ConsoleDriver.Rows"/> will remain visible.
            </para>
            <para>
            If <see langword="true"/> then height of the Terminal.Gui application <see cref="P:Terminal.Gui.ConsoleDriver.Rows"/> only tracks 
            the height of the visible console view when the console is made larger (the application will only grow in height, never shrink). 
            In this case console scrolling is enabled and the contents (<see cref="P:Terminal.Gui.ConsoleDriver.Rows"/> high) will scroll
            as the console scrolls. 
            </para>
            <para>This API is deprecated and has no impact when enabled.</para>
            <para>This API was previously named 'HeightAsBuffer` but was renamed to make its purpose more clear.</para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Application.HeightAsBuffer">
            <summary>
            This API is deprecated; use <see cref="P:Terminal.Gui.Application.EnableConsoleScrolling"/> instead.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.AlternateForwardKey">
            <summary>
            Alternative key to navigate forwards through views. Ctrl+Tab is the primary key.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.AlternateBackwardKey">
            <summary>
            Alternative key to navigate backwards through views. Shift+Ctrl+Tab is the primary key.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.QuitKey">
            <summary>
            Gets or sets the key to quit the application.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.SupportedCultures">
            <summary>
            Gets all supported cultures by the application without the invariant language.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.MainLoop">
            <summary>
            The <see cref="P:Terminal.Gui.Application.MainLoop"/>  driver for the application
            </summary>
            <value>The main loop.</value>
        </member>
        <member name="P:Terminal.Gui.Application.IsMouseDisabled">
            <summary>
            Disable or enable the mouse. The mouse is enabled by default.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.ExitRunLoopAfterFirstIteration">
            <summary>
            Set to true to cause the RunLoop method to exit after the first iterations.
            Set to false (the default) to cause the RunLoop to continue running until Application.RequestStop() is called.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Application.NotifyNewRunState">
            <summary>
            Notify that a new <see cref="T:Terminal.Gui.Application.RunState"/> was created (<see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> was called). The token is created in 
            <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> and this event will be fired before that function exits.
            </summary>
            <remarks>
            If <see cref="P:Terminal.Gui.Application.ExitRunLoopAfterFirstIteration"/> is <see langword="true"/> callers to
            <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> must also subscribe to <see cref="E:Terminal.Gui.Application.NotifyStopRunState"/>
            and manually dispose of the <see cref="T:Terminal.Gui.Application.RunState"/> token when the application is done.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.Application.NotifyStopRunState">
            <summary>
            Notify that a existent <see cref="T:Terminal.Gui.Application.RunState"/> is stopping (<see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/> was called).
            </summary>
            <remarks>
            If <see cref="P:Terminal.Gui.Application.ExitRunLoopAfterFirstIteration"/> is <see langword="true"/> callers to
            <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> must also subscribe to <see cref="E:Terminal.Gui.Application.NotifyStopRunState"/>
            and manually dispose of the <see cref="T:Terminal.Gui.Application.RunState"/> token when the application is done.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.Application.Iteration">
            <summary>
              This event is raised on each iteration of the <see cref="P:Terminal.Gui.Application.MainLoop"/>. 
            </summary>
            <remarks>
              See also <see cref="T:System.Threading.Timeout"/>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.MakeCenteredRect(Terminal.Gui.Size)">
            <summary>
            Returns a rectangle that is centered in the screen for the provided size.
            </summary>
            <returns>The centered rect.</returns>
            <param name="size">Size for the rectangle.</param>
        </member>
        <member name="P:Terminal.Gui.Application.UseSystemConsole">
            <summary>
            If <see langword="true"/>, forces the use of the System.Console-based (see <see cref="T:Terminal.Gui.NetDriver"/>) driver. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)">
            <summary>
            Initializes a new instance of <see cref="N:Terminal.Gui"/> Application. 
            </summary>
            <para>
            Call this method once per instance (or after <see cref="M:Terminal.Gui.Application.Shutdown"/> has been called).
            </para>
            <para>
            This function loads the right <see cref="T:Terminal.Gui.ConsoleDriver"/> for the platform, 
            Creates a <see cref="T:Terminal.Gui.Toplevel"/>. and assigns it to <see cref="P:Terminal.Gui.Application.Top"/>
            </para>
            <para>
            <see cref="M:Terminal.Gui.Application.Shutdown"/> must be called when the application is closing (typically after <see cref="M:Terminal.Gui.Application.Run(System.Func{System.Exception,System.Boolean})"/> has 
            returned) to ensure resources are cleaned up and terminal settings restored.
            </para>
            <para>
            The <see cref="M:Terminal.Gui.Application.Run``1(System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)"/> function 
            combines <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)"/> and <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})"/>
            into a single call. An applciation cam use <see cref="M:Terminal.Gui.Application.Run``1(System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)"/> 
            without explicitly calling <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)"/>.
            </para>
            <param name="driver">
            The <see cref="T:Terminal.Gui.ConsoleDriver"/> to use. If not specified the default driver for the
            platform will be used (see <see cref="T:Terminal.Gui.WindowsDriver"/>, <see cref="T:Terminal.Gui.CursesDriver"/>, and <see cref="T:Terminal.Gui.NetDriver"/>).</param>
            <param name="mainLoopDriver">
            Specifies the <see cref="P:Terminal.Gui.Application.MainLoop"/> to use. 
            Must not be <see langword="null"/> if <paramref name="driver"/> is not <see langword="null"/>.
            </param>
        </member>
        <member name="T:Terminal.Gui.Application.RunState">
            <summary>
            Captures the execution state for the provided <see cref="P:Terminal.Gui.Application.RunState.Toplevel"/> view.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.RunState.#ctor(Terminal.Gui.Toplevel)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.Application.RunState"/> class.
            </summary>
            <param name="view"></param>
        </member>
        <member name="P:Terminal.Gui.Application.RunState.Toplevel">
            <summary>
            The <see cref="P:Terminal.Gui.Application.RunState.Toplevel"/> belong to this <see cref="T:Terminal.Gui.Application.RunState"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.RunState.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Terminal.Gui.Application.RunState"/> object.
            </summary>
            <remarks>
            Call <see cref="M:Terminal.Gui.Application.RunState.Dispose"/> when you are finished using the <see cref="T:Terminal.Gui.Application.RunState"/>. 
            </remarks>
            <remarks>
            <see cref="M:Terminal.Gui.Application.RunState.Dispose"/> method leaves the <see cref="T:Terminal.Gui.Application.RunState"/> in an unusable state. After
            calling <see cref="M:Terminal.Gui.Application.RunState.Dispose"/>, you must release all references to the
            <see cref="T:Terminal.Gui.Application.RunState"/> so the garbage collector can reclaim the memory that the
            <see cref="T:Terminal.Gui.Application.RunState"/> was occupying.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.RunState.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the <see cref="T:Terminal.Gui.Application.RunState"/> object.
            </summary>
            <param name="disposing">If set to <see langword="true"/> we are disposing and should dispose held objects.</param>
        </member>
        <member name="P:Terminal.Gui.Application.MouseGrabView">
            <summary>
            The view that grabbed the mouse, to where will be routed all the mouse events.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Application.GrabbingMouse">
            <summary>
            Invoked when a view wants to grab the mouse; can be canceled.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Application.UnGrabbingMouse">
            <summary>
            Invoked when a view wants ungrab the mouse; can be canceled.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Application.GrabbedMouse">
            <summary>
            Event to be invoked when a view grab the mouse.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Application.UnGrabbedMouse">
            <summary>
            Event to be invoked when a view ungrab the mouse.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.GrabMouse(Terminal.Gui.View)">
            <summary>
            Grabs the mouse, forcing all mouse events to be routed to the specified view until UngrabMouse is called.
            </summary>
            <returns>The grab.</returns>
            <param name="view">View that will receive all mouse events until UngrabMouse is invoked.</param>
        </member>
        <member name="M:Terminal.Gui.Application.UngrabMouse">
            <summary>
            Releases the mouse grab, so mouse events will be routed to the view on which the mouse is.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Application.RootMouseEvent">
            <summary>
            Merely a debugging aid to see the raw mouse events
            </summary>
        </member>
        <member name="F:Terminal.Gui.Application.RootKeyEvent">
            <summary>
            <para>
            Called for new KeyPress events before any processing is performed or
            views evaluate.  Use for global key handling and/or debugging.
            </para>
            <para>Return true to suppress the KeyPress event</para>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)">
            <summary>
            Building block API: Prepares the provided <see cref="T:Terminal.Gui.Toplevel"/>  for execution.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Application.RunState"/> handle that needs to be passed to the <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/> method upon completion.</returns>
            <param name="toplevel">The <see cref="T:Terminal.Gui.Toplevel"/> to prepare execution for.</param>
            <remarks>
             This method prepares the provided toplevel for running with the focus,
             it adds this to the list of toplevels, sets up the mainloop to process the
             event, lays out the subviews, focuses the first element, and draws the
             toplevel in the screen. This is usually followed by executing
             the <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/> method, and then the <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/> method upon termination which will
              undo these changes.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)">
            <summary>
            Building block API: completes the execution of a <see cref="T:Terminal.Gui.Toplevel"/> that was started with <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> .
            </summary>
            <param name="runState">The <see cref="T:Terminal.Gui.Application.RunState"/> returned by the <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> method.</param>
        </member>
        <member name="M:Terminal.Gui.Application.Shutdown">
            <summary>
            Shutdown an application initialized with <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)"/>.
            </summary>
            <remarks>
            Shutdown must be called for every call to <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)"/> or <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})"/>
            to ensure all resources are cleaned up (Disposed) and terminal settings are restored.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.Refresh">
            <summary>
            Triggers a refresh of the entire display.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)">
            <summary>
              Building block API: Runs the <see cref="P:Terminal.Gui.Application.MainLoop"/> for the created <see cref="T:Terminal.Gui.Toplevel"/>.
            </summary>
            <remarks>
              Use the <paramref name="wait"/> parameter to control whether this is a blocking or non-blocking call.
            </remarks>
            <param name="state">The state returned by the <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> method.</param>
            <param name="wait">By default this is <see langword="true"/> which will execute the runloop waiting for events, 
            if set to <see langword="false"/>, a single iteration will execute.</param>
        </member>
        <member name="M:Terminal.Gui.Application.RunMainLoopIteration(Terminal.Gui.Application.RunState@,System.Boolean,System.Boolean@)">
            <summary>
            Run one iteration of the <see cref="P:Terminal.Gui.Application.MainLoop"/>.
            </summary>
            <param name="state">The state returned by <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/>.</param>
            <param name="wait">If <see langword="true"/> will execute the runloop waiting for events. If <see langword="true"/>
            will return after a single iteration.</param>
            <param name="firstIteration">Set to <see langword="true"/> if this is the first run loop iteration. Upon return,
            it will be set to <see langword="false"/> if at least one iteration happened.</param>
        </member>
        <member name="M:Terminal.Gui.Application.Run(System.Func{System.Exception,System.Boolean})">
            <summary>
            Runs the application by calling <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})"/> with the value of <see cref="P:Terminal.Gui.Application.Top"/>.
            </summary>
            <remarks>
            See <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})"/> for more details.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Application.Run``1(System.Func{System.Exception,System.Boolean},Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)">
            <summary>
            Runs the application by calling <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})"/> 
            with a new instance of the specified <see cref="T:Terminal.Gui.Toplevel"/>-derived class.
            <para>
            Calling <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)"/> first is not needed as this function will initialze the application.
            </para>
            <para>
            <see cref="M:Terminal.Gui.Application.Shutdown"/> must be called when the application is closing (typically after Run> has 
            returned) to ensure resources are cleaned up and terminal settings restored.
            </para>
            </summary>
            <remarks>
            See <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})"/> for more details.
            </remarks>
            <param name="errorHandler"></param>
            <param name="driver">The <see cref="T:Terminal.Gui.ConsoleDriver"/> to use. If not specified the default driver for the
            platform will be used (<see cref="T:Terminal.Gui.WindowsDriver"/>, <see cref="T:Terminal.Gui.CursesDriver"/>, or <see cref="T:Terminal.Gui.NetDriver"/>).
            This parameteter must be <see langword="null"/> if <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)"/> has already been called. 
            </param>
            <param name="mainLoopDriver">Specifies the <see cref="P:Terminal.Gui.Application.MainLoop"/> to use.</param>
        </member>
        <member name="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})">
            <summary>
              Runs the main loop on the given <see cref="T:Terminal.Gui.Toplevel"/> container.
            </summary>
            <remarks>
              <para>
                This method is used to start processing events
                for the main application, but it is also used to
                run other modal <see cref="T:Terminal.Gui.View"/>s such as <see cref="T:Terminal.Gui.Dialog"/> boxes.
              </para>
              <para>
                To make a <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})"/> stop execution, call <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/>.
              </para>
              <para>
                Calling <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})"/> is equivalent to calling <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/>, followed by <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/>,
                and then calling <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/>.
              </para>
              <para>
                Alternatively, to have a program control the main loop and 
                process events manually, call <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> to set things up manually and then
                repeatedly call <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/> with the wait parameter set to false. By doing this
                the <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/> method will only process any pending events, timers, idle handlers and
                then return control immediately.
              </para>
              <para>
                RELEASE builds only: When <paramref name="errorHandler"/> is <see langword="null"/> any exeptions will be rethrown.  
                Otheriwse, if <paramref name="errorHandler"/> will be called. If <paramref name="errorHandler"/> 
                returns <see langword="true"/> the <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/> will resume; otherwise 
                this method will exit.
              </para>
            </remarks>
            <param name="view">The <see cref="T:Terminal.Gui.Toplevel"/> to run modally.</param>
            <param name="errorHandler">RELEASE builds only: Handler for any unhandled exceptions (resumes when returns true, rethrows when null).</param>
        </member>
        <member name="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)">
            <summary>
            Stops running the most recent <see cref="T:Terminal.Gui.Toplevel"/> or the <paramref name="top"/> if provided.
            </summary>
            <param name="top">The toplevel to request stop.</param>
            <remarks>
              <para>
              This will cause <see cref="M:Terminal.Gui.Application.Run(System.Func{System.Exception,System.Boolean})"/> to return.
              </para>
              <para>
                Calling <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/> is equivalent to setting the <see cref="P:Terminal.Gui.Toplevel.Running"/> property on the currently running <see cref="T:Terminal.Gui.Toplevel"/> to false.
              </para>
            </remarks>
        </member>
        <member name="T:Terminal.Gui.Application.ResizedEventArgs">
            <summary>
            Event arguments for the <see cref="F:Terminal.Gui.Application.Resized"/> event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.ResizedEventArgs.Rows">
            <summary>
            The number of rows in the resized terminal.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Application.ResizedEventArgs.Cols">
            <summary>
            The number of columns in the resized terminal.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Application.Resized">
            <summary>
            Invoked when the terminal was resized. The new size of the terminal is provided.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.MoveNext">
            <summary>
            Move to the next Mdi child from the <see cref="P:Terminal.Gui.Application.MdiTop"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.MovePrevious">
            <summary>
            Move to the previous Mdi child from the <see cref="P:Terminal.Gui.Application.MdiTop"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.DoEvents">
            <summary>
            Wakes up the mainloop that might be waiting on input, must be thread safe.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Application.EnsuresTopOnFront">
            <summary>
            Ensures that the superview of the most focused view is on front.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Autocomplete">
            <summary>
            Renders an overlay on another view at a given point that allows selecting
            from a range of 'autocomplete' options.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.HostControl">
            <summary>
            The host control to handle.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.PopupInsideContainer">
            <summary>
            Gets or sets If the popup is displayed inside or outside the host limits.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.MaxWidth">
            <summary>
            The maximum width of the autocomplete dropdown
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.MaxHeight">
            <summary>
            The maximum number of visible rows in the autocomplete dropdown to render
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.Visible">
            <summary>
            True if the autocomplete should be considered open and visible
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.Suggestions">
            <summary>
            The strings that form the current list of suggestions to render
            based on what the user has typed so far.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.AllSuggestions">
            <summary>
            The full set of all strings that can be suggested.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.SelectedIdx">
            <summary>
            The currently selected index into <see cref="P:Terminal.Gui.Autocomplete.Suggestions"/> that the user has highlighted
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.ScrollOffset">
            <summary>
            When more suggestions are available than can be rendered the user
            can scroll down the dropdown list.  This indicates how far down they
            have gone
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.ColorScheme">
            <summary>
            The colors to use to render the overlay.  Accessing this property before
            the Application has been initialized will cause an error
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.SelectionKey">
            <summary>
            The key that the user must press to accept the currently selected autocomplete suggestion
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.CloseKey">
            <summary>
            The key that the user can press to close the currently popped autocomplete menu
            </summary>
        </member>
        <member name="P:Terminal.Gui.Autocomplete.Reopen">
            <summary>
            The key that the user can press to reopen the currently popped autocomplete menu
            </summary>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.RenderOverlay(Terminal.Gui.Point)">
            <summary>
            Renders the autocomplete dialog inside or outside the given <see cref="P:Terminal.Gui.Autocomplete.HostControl"/> at the
            given point.
            </summary>
            <param name="renderAt"></param>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.EnsureSelectedIdxIsValid">
            <summary>
            Updates <see cref="P:Terminal.Gui.Autocomplete.SelectedIdx"/> to be a valid index within <see cref="P:Terminal.Gui.Autocomplete.Suggestions"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.ProcessKey(Terminal.Gui.KeyEvent)">
            <summary>
            Handle key events before <see cref="P:Terminal.Gui.Autocomplete.HostControl"/> e.g. to make key events like
            up/down apply to the autocomplete control instead of changing the cursor position in
            the underlying text view.
            </summary>
            <param name="kb">The key event.</param>
            <returns><c>true</c>if the key can be handled <c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.MouseEvent(Terminal.Gui.MouseEvent,System.Boolean)">
            <summary>
            Handle mouse events before <see cref="P:Terminal.Gui.Autocomplete.HostControl"/> e.g. to make mouse events like
            report/click apply to the autocomplete control instead of changing the cursor position in
            the underlying text view.
            </summary>
            <param name="me">The mouse event.</param>
            <param name="fromHost">If was called from the popup or from the host.</param>
            <returns><c>true</c>if the mouse can be handled <c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.RenderSelectedIdxByMouse(Terminal.Gui.MouseEvent)">
            <summary>
            Render the current selection in the Autocomplete context menu by the mouse reporting.
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.ClearSuggestions">
            <summary>
            Clears <see cref="P:Terminal.Gui.Autocomplete.Suggestions"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.GenerateSuggestions(System.Int32)">
            <summary>
            Populates <see cref="P:Terminal.Gui.Autocomplete.Suggestions"/> with all strings in <see cref="P:Terminal.Gui.Autocomplete.AllSuggestions"/> that
            match with the current cursor position/text in the <see cref="P:Terminal.Gui.Autocomplete.HostControl"/>
            </summary>
            <param name="columnOffset">The column offset.</param>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.IsWordChar(System.Rune)">
            <summary>
            Return true if the given symbol should be considered part of a word
            and can be contained in matches.  Base behavior is to use <see cref="M:System.Char.IsLetterOrDigit(System.Char)"/>
            </summary>
            <param name="rune"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.Select">
            <summary>
            Completes the autocomplete selection process.  Called when user hits the <see cref="P:Terminal.Gui.Autocomplete.SelectionKey"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.InsertSelection(System.String)">
            <summary>
            Called when the user confirms a selection at the current cursor location in
            the <see cref="P:Terminal.Gui.Autocomplete.HostControl"/>.  The <paramref name="accepted"/> string
            is the full autocomplete word to be inserted.  Typically a host will have to
            remove some characters such that the <paramref name="accepted"/> string 
            completes the word instead of simply being appended.
            </summary>
            <param name="accepted"></param>
            <returns>True if the insertion was possible otherwise false</returns>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.GetCurrentWord(System.Int32)">
            <summary>
            Returns the currently selected word from the <see cref="P:Terminal.Gui.Autocomplete.HostControl"/>.
            <para>
            When overriding this method views can make use of <see cref="M:Terminal.Gui.Autocomplete.IdxToWord(System.Collections.Generic.List{System.Rune},System.Int32,System.Int32)"/>
            </para>
            </summary>
            <param name="columnOffset">The column offset.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.IdxToWord(System.Collections.Generic.List{System.Rune},System.Int32,System.Int32)">
            <summary>
            <para>
            Given a <paramref name="line"/> of characters, returns the word which ends at <paramref name="idx"/> 
            or null.  Also returns null if the <paramref name="idx"/> is positioned in the middle of a word.
            </para>
            
            <para>
            Use this method to determine whether autocomplete should be shown when the cursor is at
            a given point in a line and to get the word from which suggestions should be generated.
            Use the <paramref name="columnOffset"/> to indicate if search the word at left (negative),
            at right (positive) or at the current column (zero) which is the default.
            </para>
            </summary>
            <param name="line"></param>
            <param name="idx"></param>
            <param name="columnOffset"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.DeleteTextBackwards">
            <summary>
            Deletes the text backwards before insert the selected text in the <see cref="P:Terminal.Gui.Autocomplete.HostControl"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.InsertText(System.String)">
            <summary>
            Inser the selected text in the <see cref="P:Terminal.Gui.Autocomplete.HostControl"/>.
            </summary>
            <param name="accepted"></param>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.Close">
            <summary>
            Closes the Autocomplete context menu if it is showing and <see cref="M:Terminal.Gui.Autocomplete.ClearSuggestions"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.MoveUp">
            <summary>
            Moves the selection in the Autocomplete context menu up one
            </summary>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.MoveDown">
            <summary>
            Moves the selection in the Autocomplete context menu down one
            </summary>
        </member>
        <member name="M:Terminal.Gui.Autocomplete.ReopenSuggestions">
            <summary>
            Reopen the popup after it has been closed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.IAutocomplete">
            <summary>
            Renders an overlay on another view at a given point that allows selecting
            from a range of 'autocomplete' options.
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.HostControl">
            <summary>
            The host control that will use autocomplete.
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.PopupInsideContainer">
            <summary>
            Gets or sets where the popup will be displayed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.MaxWidth">
            <summary>
            The maximum width of the autocomplete dropdown
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.MaxHeight">
            <summary>
            The maximum number of visible rows in the autocomplete dropdown to render
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.Visible">
            <summary>
            True if the autocomplete should be considered open and visible
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.Suggestions">
            <summary>
            The strings that form the current list of suggestions to render
            based on what the user has typed so far.
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.AllSuggestions">
            <summary>
            The full set of all strings that can be suggested.
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.SelectedIdx">
            <summary>
            The currently selected index into <see cref="P:Terminal.Gui.IAutocomplete.Suggestions"/> that the user has highlighted
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.ColorScheme">
            <summary>
            The colors to use to render the overlay.  Accessing this property before
            the Application has been initialized will cause an error
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.SelectionKey">
            <summary>
            The key that the user must press to accept the currently selected autocomplete suggestion
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.CloseKey">
            <summary>
            The key that the user can press to close the currently popped autocomplete menu
            </summary>
        </member>
        <member name="P:Terminal.Gui.IAutocomplete.Reopen">
            <summary>
            The key that the user can press to reopen the currently popped autocomplete menu
            </summary>
        </member>
        <member name="M:Terminal.Gui.IAutocomplete.RenderOverlay(Terminal.Gui.Point)">
            <summary>
            Renders the autocomplete dialog inside the given <see cref="P:Terminal.Gui.IAutocomplete.HostControl"/> at the
            given point.
            </summary>
            <param name="renderAt"></param>
        </member>
        <member name="M:Terminal.Gui.IAutocomplete.ProcessKey(Terminal.Gui.KeyEvent)">
            <summary>
            Handle key events before <see cref="P:Terminal.Gui.IAutocomplete.HostControl"/> e.g. to make key events like
            up/down apply to the autocomplete control instead of changing the cursor position in
            the underlying text view.
            </summary>
            <param name="kb">The key event.</param>
            <returns><c>true</c>if the key can be handled <c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.IAutocomplete.MouseEvent(Terminal.Gui.MouseEvent,System.Boolean)">
            <summary>
            Handle mouse events before <see cref="P:Terminal.Gui.IAutocomplete.HostControl"/> e.g. to make mouse events like
            report/click apply to the autocomplete control instead of changing the cursor position in
            the underlying text view.
            </summary>
            <param name="me">The mouse event.</param>
            <param name="fromHost">If was called from the popup or from the host.</param>
            <returns><c>true</c>if the mouse can be handled <c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.IAutocomplete.ClearSuggestions">
            <summary>
            Clears <see cref="P:Terminal.Gui.IAutocomplete.Suggestions"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.IAutocomplete.GenerateSuggestions(System.Int32)">
            <summary>
            Populates <see cref="P:Terminal.Gui.IAutocomplete.Suggestions"/> with all strings in <see cref="P:Terminal.Gui.IAutocomplete.AllSuggestions"/> that
            match with the current cursor position/text in the <see cref="P:Terminal.Gui.IAutocomplete.HostControl"/>.
            </summary>
            <param name="columnOffset">The column offset. Current (zero - default), left (negative), right (positive).</param>
        </member>
        <member name="T:Terminal.Gui.BorderStyle">
            <summary>
            Specifies the border style for a <see cref="T:Terminal.Gui.View"/> and to be used by the <see cref="T:Terminal.Gui.Border"/> class.
            </summary>
        </member>
        <member name="F:Terminal.Gui.BorderStyle.None">
            <summary>
            No border is drawn.
            </summary>
        </member>
        <member name="F:Terminal.Gui.BorderStyle.Single">
            <summary>
            The border is drawn with a single line limits.
            </summary>
        </member>
        <member name="F:Terminal.Gui.BorderStyle.Double">
            <summary>
            The border is drawn with a double line limits.
            </summary>
        </member>
        <member name="F:Terminal.Gui.BorderStyle.Rounded">
            <summary>
            The border is drawn with a single line and rounded corners limits.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Thickness">
            <summary>
            Describes the thickness of a frame around a rectangle. Four <see cref="T:System.Int32"/> values describe
             the <see cref="F:Terminal.Gui.Thickness.Left"/>, <see cref="F:Terminal.Gui.Thickness.Top"/>, <see cref="F:Terminal.Gui.Thickness.Right"/>, and <see cref="F:Terminal.Gui.Thickness.Bottom"/> sides
             of the rectangle, respectively.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Thickness.Left">
            <summary>
            Gets or sets the width, in integers, of the left side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Thickness.Top">
            <summary>
            Gets or sets the width, in integers, of the upper side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Thickness.Right">
            <summary>
            Gets or sets the width, in integers, of the right side of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Thickness.Bottom">
            <summary>
            Gets or sets the width, in integers, of the lower side of the bounding rectangle.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Thickness.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Thickness"/> structure that has the
             specified uniform length on each side.
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Terminal.Gui.Thickness.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Thickness"/> structure that has specific
             lengths (supplied as a <see cref="T:System.Int32"/>) applied to each side of the rectangle.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Terminal.Gui.Thickness.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Terminal.Gui.Border">
            <summary>
            Draws a border, background, or both around another element.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Border.ToplevelContainer">
            <summary>
            A sealed <see cref="T:Terminal.Gui.Toplevel"/> derived class to implement <see cref="P:Terminal.Gui.Border.ToplevelContainer.Border"/> feature.
            This is only a wrapper to get borders on a toplevel and is recommended using another
            derived, like <see cref="T:Terminal.Gui.Window"/> where is possible to have borders with or without
            border line or spacing around.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.ToplevelContainer.Border">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Border.ToplevelContainer.#ctor">
            <summary>
            Initializes with default null values.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Border.ToplevelContainer.#ctor(Terminal.Gui.Border,System.String)">
            <summary>
            Initializes a <see cref="T:Terminal.Gui.Border.ToplevelContainer"/> with a <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
            </summary>
            <param name="border">The border.</param>
            <param name="title">The title.</param>
        </member>
        <member name="M:Terminal.Gui.Border.ToplevelContainer.#ctor(Terminal.Gui.Rect,Terminal.Gui.Border,System.String)">
            <summary>
            Initializes a <see cref="T:Terminal.Gui.Border.ToplevelContainer"/> with a <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>
            </summary>
            <param name="frame">The frame.</param>
            <param name="border">The border.</param>
            <param name="title">The title.</param>
        </member>
        <member name="M:Terminal.Gui.Border.ToplevelContainer.Add(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Border.ToplevelContainer.Remove(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Border.ToplevelContainer.RemoveAll">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Border.ToplevelContainer.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Border.ToplevelContainer.OnCanFocusChanged">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.Border.BorderChanged">
            <summary>
            Invoked when any property of Border changes (except <see cref="P:Terminal.Gui.Border.Child"/>).
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.BorderStyle">
            <summary>
            Specifies the <see cref="T:Terminal.Gui.BorderStyle"/> for a view.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.DrawMarginFrame">
            <summary>
            Gets or sets if a margin frame is drawn around the <see cref="P:Terminal.Gui.Border.Child"/> regardless the <see cref="P:Terminal.Gui.Border.BorderStyle"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.BorderThickness">
            <summary>
            Gets or sets the relative <see cref="T:Terminal.Gui.Thickness"/> of a <see cref="T:Terminal.Gui.Border"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.BorderBrush">
            <summary>
            Gets or sets the <see cref="T:Terminal.Gui.Color"/> that draws the outer border color.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.Background">
            <summary>
            Gets or sets the <see cref="T:Terminal.Gui.Color"/> that fills the area between the bounds of a <see cref="T:Terminal.Gui.Border"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.Padding">
            <summary>
            Gets or sets a <see cref="T:Terminal.Gui.Thickness"/> value that describes the amount of space between a
             <see cref="T:Terminal.Gui.Border"/> and its child element.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.ActualWidth">
            <summary>
            Gets the rendered width of this element.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.ActualHeight">
            <summary>
            Gets the rendered height of this element.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.Child">
            <summary>
            Gets or sets the single child element of a <see cref="T:Terminal.Gui.View"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.Parent">
            <summary>
            Gets the parent <see cref="P:Terminal.Gui.Border.Child"/> parent if any.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.ChildContainer">
            <summary>
            Gets or private sets by the <see cref="T:Terminal.Gui.Border.ToplevelContainer"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.Effect3D">
            <summary>
            Gets or sets the 3D effect around the <see cref="T:Terminal.Gui.Border"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.Effect3DOffset">
            <summary>
            Get or sets the offset start position for the <see cref="P:Terminal.Gui.Border.Effect3D"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.Effect3DBrush">
            <summary>
            Gets or sets the color for the <see cref="T:Terminal.Gui.Border"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Border.Title">
            <summary>
            The title to be displayed for this view.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Border.GetSumThickness">
            <summary>
            Calculate the sum of the <see cref="P:Terminal.Gui.Border.Padding"/> and the <see cref="P:Terminal.Gui.Border.BorderThickness"/>
            </summary>
            <returns>The total of the <see cref="T:Terminal.Gui.Border"/> <see cref="T:Terminal.Gui.Thickness"/></returns>
        </member>
        <member name="M:Terminal.Gui.Border.DrawContent(Terminal.Gui.View,System.Boolean)">
            <summary>
            Drawn the <see cref="P:Terminal.Gui.Border.BorderThickness"/> more the <see cref="P:Terminal.Gui.Border.Padding"/>
             more the <see cref="P:Terminal.Gui.Border.BorderStyle"/> and the <see cref="P:Terminal.Gui.Border.Effect3D"/>.
            </summary>
            <param name="view">The view to draw.</param>
            <param name="fill">If it will clear or not the content area.</param>
        </member>
        <member name="M:Terminal.Gui.Border.DrawFullContent">
            <summary>
            Same as <see cref="M:Terminal.Gui.Border.DrawContent(Terminal.Gui.View,System.Boolean)"/> but drawing full frames for all borders.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Border.DrawTitle(Terminal.Gui.View)">
            <summary>
            Draws the view <see cref="P:Terminal.Gui.Border.Title"/> to the screen.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Terminal.Gui.Border.DrawTitle(Terminal.Gui.View,Terminal.Gui.Rect)">
            <summary>
            Draws the <see cref="P:Terminal.Gui.View.Text"/> to the screen.
            </summary>
            <param name="view">The view.</param>
            <param name="rect">The frame.</param>
        </member>
        <member name="M:Terminal.Gui.Border.OnBorderChanged">
            <summary>
            Invoke the <see cref="E:Terminal.Gui.Border.BorderChanged"/> event.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Clipboard">
            <summary>
            Provides cut, copy, and paste support for the OS clipboard.
            </summary>
            <remarks>
            <para>
            On Windows, the <see cref="T:Terminal.Gui.Clipboard"/> class uses the Windows Clipboard APIs via P/Invoke.
            </para>
            <para>
            On Linux, when not running under Windows Subsystem for Linux (WSL),
            the <see cref="T:Terminal.Gui.Clipboard"/> class uses the xclip command line tool. If xclip is not installed,
            the clipboard will not work.
            </para>
            <para>
            On Linux, when running under Windows Subsystem for Linux (WSL),
            the <see cref="T:Terminal.Gui.Clipboard"/> class launches Windows' powershell.exe via WSL interop and uses the
            "Set-Clipboard" and "Get-Clipboard" Powershell CmdLets. 
            </para>
            <para>
            On the Mac, the <see cref="T:Terminal.Gui.Clipboard"/> class uses the MacO OS X pbcopy and pbpaste command line tools
            and the Mac clipboard APIs vai P/Invoke.
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Clipboard.Contents">
            <summary>
            Gets (copies from) or sets (pastes to) the contents of the OS clipboard.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Clipboard.IsSupported">
            <summary>
            Returns true if the environmental dependencies are in place to interact with the OS clipboard.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Clipboard.TryGetClipboardData(System.String@)">
            <summary>
            Copies the contents of the OS clipboard to <paramref name="result"/> if possible.
            </summary>
            <param name="result">The contents of the OS clipboard if successful, <see cref="F:System.String.Empty"/> if not.</param>
            <returns><see langword="true"/> the OS clipboard was retrieved, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Clipboard.TrySetClipboardData(System.String)">
            <summary>
            Pastes the <paramref name="text"/> to the OS clipboard if possible.
            </summary>
            <param name="text">The text to paste to the OS clipboard.</param>
            <returns><see langword="true"/> the OS clipboard was set, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Terminal.Gui.ClipboardBase">
            <summary>
            Shared abstract class to enforce rules from the implementation of the <see cref="T:Terminal.Gui.IClipboard"/> interface.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ClipboardBase.IsSupported">
            <summary>
            Returns true if the environmental dependencies are in place to interact with the OS clipboard
            </summary>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.GetClipboardData">
            <summary>
            Returns the contents of the OS clipboard if possible.
            </summary>
            <returns>The contents of the OS clipboard if successful.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to copy from the OS clipboard.</exception>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.GetClipboardDataImpl">
            <summary>
            Returns the contents of the OS clipboard if possible. Implemented by <see cref="T:Terminal.Gui.ConsoleDriver"/>-specific subclasses.
            </summary>
            <returns>The contents of the OS clipboard if successful.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to copy from the OS clipboard.</exception>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.SetClipboardData(System.String)">
            <summary>
            Pastes the <paramref name="text"/> to the OS clipboard if possible.
            </summary>
            <param name="text">The text to paste to the OS clipboard.</param>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to paste to the OS clipboard.</exception>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.SetClipboardDataImpl(System.String)">
            <summary>
            Pastes the <paramref name="text"/> to the OS clipboard if possible. Implemented by <see cref="T:Terminal.Gui.ConsoleDriver"/>-specific subclasses.
            </summary>
            <param name="text">The text to paste to the OS clipboard.</param>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to paste to the OS clipboard.</exception>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.TryGetClipboardData(System.String@)">
            <summary>
            Copies the contents of the OS clipboard to <paramref name="result"/> if possible.
            </summary>
            <param name="result">The contents of the OS clipboard if successful, <see cref="F:System.String.Empty"/> if not.</param>
            <returns><see langword="true"/> the OS clipboard was retrieved, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.ClipboardBase.TrySetClipboardData(System.String)">
            <summary>
            Pastes the <paramref name="text"/> to the OS clipboard if possible.
            </summary>
            <param name="text">The text to paste to the OS clipboard.</param>
            <returns><see langword="true"/> the OS clipboard was set, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Terminal.Gui.IClipboard">
            <summary>
            Definition to interact with the OS clipboard.
            </summary>
        </member>
        <member name="P:Terminal.Gui.IClipboard.IsSupported">
            <summary>
            Returns true if the environmental dependencies are in place to interact with the OS clipboard.
            </summary>
        </member>
        <member name="M:Terminal.Gui.IClipboard.GetClipboardData">
            <summary>
            Get the operation system clipboard.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to read the clipboard contents.</exception>
        </member>
        <member name="M:Terminal.Gui.IClipboard.TryGetClipboardData(System.String@)">
            <summary>
            Gets the operation system clipboard if possible.
            </summary>
            <param name="result">Clipboard contents read</param>
            <returns>true if it was possible to read the OS clipboard.</returns>
        </member>
        <member name="M:Terminal.Gui.IClipboard.SetClipboardData(System.String)">
            <summary>
            Sets the operation system clipboard.
            </summary>
            <param name="text"></param>
            <exception cref="T:System.NotSupportedException">Thrown if it was not possible to set the clipboard contents.</exception>
        </member>
        <member name="M:Terminal.Gui.IClipboard.TrySetClipboardData(System.String)">
            <summary>
            Sets the operation system clipboard if possible.
            </summary>
            <param name="text"></param>
            <returns>True if the clipboard content was set successfully.</returns>
        </member>
        <member name="T:Terminal.Gui.CollectionNavigator">
            <summary>
            Navigates a collection of items using keystrokes. The keystrokes are used to build a search string. 
            The <see cref="P:Terminal.Gui.CollectionNavigator.SearchString"/> is used to find the next item in the collection that matches the search string
            when <see cref="M:Terminal.Gui.CollectionNavigator.GetNextMatchingItem(System.Int32,System.Char)"/> is called.
            <para>
            If the user types keystrokes that can't be found in the collection, 
            the search string is cleared and the next item is found that starts with the last keystroke.
            </para>
            <para>
            If the user pauses keystrokes for a short time (see <see cref="P:Terminal.Gui.CollectionNavigator.TypingDelay"/>), the search string is cleared.
            </para>
            </summary>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigator.#ctor">
            <summary>
            Constructs a new CollectionNavigator.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigator.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Constructs a new CollectionNavigator for the given collection.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="P:Terminal.Gui.CollectionNavigator.TypingDelay">
            <summary>
            Gets or sets the number of milliseconds to delay before clearing the search string. The delay is
            reset on each call to <see cref="M:Terminal.Gui.CollectionNavigator.GetNextMatchingItem(System.Int32,System.Char)"/>. The default is 500ms.
            </summary>
        </member>
        <member name="P:Terminal.Gui.CollectionNavigator.Comparer">
            <summary>
            The compararer function to use when searching the collection.
            </summary>
        </member>
        <member name="P:Terminal.Gui.CollectionNavigator.Collection">
            <summary>
            The collection of objects to search. <see cref="M:System.Object.ToString"/> is used to search the collection.
            </summary>
        </member>
        <member name="T:Terminal.Gui.CollectionNavigator.KeystrokeNavigatorEventArgs">
            <summary>
            Event arguments for the <see cref="E:Terminal.Gui.CollectionNavigator.SearchStringChanged"/> event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.CollectionNavigator.KeystrokeNavigatorEventArgs.SearchString">
            <summary>
            he current <see cref="P:Terminal.Gui.CollectionNavigator.KeystrokeNavigatorEventArgs.SearchString"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigator.KeystrokeNavigatorEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.CollectionNavigator.KeystrokeNavigatorEventArgs"/>
            </summary>
            <param name="searchString">The current <see cref="P:Terminal.Gui.CollectionNavigator.KeystrokeNavigatorEventArgs.SearchString"/>.</param>
        </member>
        <member name="E:Terminal.Gui.CollectionNavigator.SearchStringChanged">
            <summary>
            This event is invoked when <see cref="P:Terminal.Gui.CollectionNavigator.SearchString"/>  changes. Useful for debugging.
            </summary>
        </member>
        <member name="P:Terminal.Gui.CollectionNavigator.SearchString">
            <summary>
            Gets the current search string. This includes the set of keystrokes that have been pressed
            since the last unsuccessful match or after <see cref="P:Terminal.Gui.CollectionNavigator.TypingDelay"/>) milliseconds. Useful for debugging.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigator.OnSearchStringChanged(Terminal.Gui.CollectionNavigator.KeystrokeNavigatorEventArgs)">
            <summary>
            Invoked when the <see cref="P:Terminal.Gui.CollectionNavigator.SearchString"/> changes. Useful for debugging. Invokes the <see cref="E:Terminal.Gui.CollectionNavigator.SearchStringChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigator.GetNextMatchingItem(System.Int32,System.Char)">
            <summary>
            Gets the index of the next item in the collection that matches the current <see cref="P:Terminal.Gui.CollectionNavigator.SearchString"/> plus the provided character (typically
            from a key press).
            </summary>
            <param name="currentIndex">The index in the collection to start the search from.</param>
            <param name="keyStruck">The character of the key the user pressed.</param>
            <returns>The index of the item that matches what the user has typed. 
            Returns <see langword="-1"/> if no item in the collection matched.</returns>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigator.GetNextMatchingItem(System.Int32,System.String,System.Boolean)">
            <summary>
            Gets the index of the next item in the collection that matches <paramref name="search"/>. 
            </summary>
            <param name="currentIndex">The index in the collection to start the search from.</param>
            <param name="search">The search string to use.</param>
            <param name="minimizeMovement">Set to <see langword="true"/> to stop the search on the first match
            if there are multiple matches for <paramref name="search"/>.
            e.g. "ca" + 'r' should stay on "car" and not jump to "cart". If <see langword="false"/> (the default), 
            the next matching item will be returned, even if it is above in the collection.
            </param>
            <returns>The index of the next matching item or <see langword="-1"/> if no match was found.</returns>
        </member>
        <member name="M:Terminal.Gui.CollectionNavigator.IsCompatibleKey(Terminal.Gui.KeyEvent)">
            <summary>
            Returns true if <paramref name="kb"/> is a searchable key
            (e.g. letters, numbers etc) that is valid to pass to to this
            class for search filtering.
            </summary>
            <param name="kb"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Command">
            <summary>
            Actions which can be performed by the application or bound to keys in a <see cref="T:Terminal.Gui.View"/> control.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineDown">
            <summary>
            Moves down one item (cell, line, etc...).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineDownExtend">
            <summary>
            Extends the selection down one (cell, line, etc...).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineDownToLastBranch">
            <summary>
            Moves down to the last child node of the branch that holds the current selection.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.ScrollDown">
            <summary>
            Scrolls down one (cell, line, etc...) (without changing the selection).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineUp">
            <summary>
            Moves up one (cell, line, etc...).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineUpExtend">
            <summary>
            Extends the selection up one item (cell, line, etc...).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.LineUpToFirstBranch">
            <summary>
            Moves up to the first child node of the branch that holds the current selection.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.ScrollUp">
            <summary>
            Scrolls up one item (cell, line, etc...) (without changing the selection).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Left">
            <summary>
            Moves the selection left one by the minimum increment supported by the <see cref="T:Terminal.Gui.View"/> e.g. single character, cell, item etc.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.ScrollLeft">
            <summary>
            Scrolls one item (cell, character, etc...) to the left
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.LeftExtend">
            <summary>
            Extends the selection left one by the minimum increment supported by the view e.g. single character, cell, item etc.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Right">
            <summary>
            Moves the selection right one by the minimum increment supported by the view e.g. single character, cell, item etc.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.ScrollRight">
            <summary>
            Scrolls one item (cell, character, etc...) to the right.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.RightExtend">
            <summary>
            Extends the selection right one by the minimum increment supported by the view e.g. single character, cell, item etc.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.WordLeft">
            <summary>
            Moves the caret to the start of the previous word.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.WordLeftExtend">
            <summary>
            Extends the selection to the start of the previous word.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.WordRight">
            <summary>
            Moves the caret to the start of the next word.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.WordRightExtend">
            <summary>
            Extends the selection to the start of the next word.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.CutToEndLine">
            <summary>
            Cuts to the clipboard the characters from the current position to the end of the line.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.CutToStartLine">
            <summary>
            Cuts to the clipboard the characters from the current position to the start of the line.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.KillWordForwards">
            <summary>
            Deletes the characters forwards.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.KillWordBackwards">
            <summary>
            Deletes the characters backwards.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.ToggleOverwrite">
            <summary>
            Toggles overwrite mode such that newly typed text overwrites the text that is
            already there (typically associated with the Insert key).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.EnableOverwrite">
            <summary>
            Enables overwrite mode such that newly typed text overwrites the text that is
            already there (typically associated with the Insert key).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.DisableOverwrite">
            <summary>
            Disables overwrite mode (<see cref="F:Terminal.Gui.Command.EnableOverwrite"/>)
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageDown">
            <summary>
            Move one page down.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageDownExtend">
            <summary>
            Move one page page extending the selection to cover revealed objects/characters.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageUp">
            <summary>
            Move one page up.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageUpExtend">
            <summary>
            Move one page up extending the selection to cover revealed objects/characters.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.TopHome">
            <summary>
            Moves to the top/home.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.TopHomeExtend">
            <summary>
            Extends the selection to the top/home.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.BottomEnd">
            <summary>
            Moves to the bottom/end.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.BottomEndExtend">
            <summary>
            Extends the selection to the bottom/end.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.OpenSelectedItem">
            <summary>
            Open the selected item.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.ToggleChecked">
            <summary>
            Toggle the checked state.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Accept">
            <summary>
            Accepts the current state (e.g. selection, button press etc).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.ToggleExpandCollapse">
            <summary>
            Toggles the Expanded or collapsed state of a a list or item (with subitems).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Expand">
            <summary>
            Expands a list or item (with subitems).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.ExpandAll">
            <summary>
            Recursively Expands all child items and their child items (if any).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Collapse">
            <summary>
            Collapses a list or item (with subitems).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.CollapseAll">
            <summary>
            Recursively collapses a list items of their children (if any).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Cancel">
            <summary>
            Cancels an action or any temporary states on the control e.g. expanding
            a combo list.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.UnixEmulation">
            <summary>
            Unix emulation.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.DeleteCharRight">
            <summary>
            Deletes the character on the right.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.DeleteCharLeft">
            <summary>
            Deletes the character on the left.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.SelectAll">
            <summary>
            Selects all objects.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.DeleteAll">
            <summary>
            Deletes all objects.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.StartOfLine">
            <summary>
            Moves the cursor to the start of line.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.StartOfLineExtend">
            <summary>
            Extends the selection to the start of line.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.EndOfLine">
            <summary>
            Moves the cursor to the end of line.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.EndOfLineExtend">
            <summary>
            Extends the selection to the end of line.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.StartOfPage">
            <summary>
            Moves the cursor to the top of page.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.EndOfPage">
            <summary>
            Moves the cursor to the bottom of page.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageLeft">
            <summary>
            Moves to the left page.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.PageRight">
            <summary>
            Moves to the right page.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.LeftHome">
            <summary>
            Moves to the left begin.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.LeftHomeExtend">
            <summary>
            Extends the selection to the left begin.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.RightEnd">
            <summary>
            Moves to the right end.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.RightEndExtend">
            <summary>
            Extends the selection to the right end.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Undo">
            <summary>
            Undo changes.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Redo">
            <summary>
            Redo changes.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Copy">
            <summary>
            Copies the current selection.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Cut">
            <summary>
            Cuts the current selection.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Paste">
            <summary>
            Pastes the current selection.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.QuitToplevel">
            <summary>
            Quit a <see cref="T:Terminal.Gui.Toplevel"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Suspend">
            <summary>
            Suspend a application (used on Linux).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.NextView">
            <summary>
            Moves focus to the next view.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.PreviousView">
            <summary>
            Moves focuss to the previous view.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.NextViewOrTop">
            <summary>
            Moves focus to the next view or toplevel (case of MDI).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.PreviousViewOrTop">
            <summary>
            Moves focus to the next previous or toplevel (case of MDI).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Refresh">
            <summary>
            Refresh.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.ToggleExtend">
            <summary>
            Toggles the selection.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.NewLine">
            <summary>
            Inserts a new item.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.Tab">
            <summary>
            Tabs to the next item.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Command.BackTab">
            <summary>
            Tabs back to the previous item.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Color">
            <summary>
            Colors that can be used to set the foreground and background colors in console applications.
            </summary>
            <remarks>
            The <see cref="P:Terminal.Gui.Attribute.HasValidColors"/> value indicates either no-color has been set or the color is invalid.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.Color.Black">
            <summary>
            The black color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Blue">
            <summary>
            The blue color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Green">
            <summary>
            The green color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Cyan">
            <summary>
            The cyan color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Red">
            <summary>
            The red color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Magenta">
            <summary>
            The magenta color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Brown">
            <summary>
            The brown color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.Gray">
            <summary>
            The gray color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.DarkGray">
            <summary>
            The dark gray color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightBlue">
            <summary>
            The bright bBlue color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightGreen">
            <summary>
            The bright green color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightCyan">
            <summary>
            The bright cyan color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightRed">
            <summary>
            The bright red color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightMagenta">
            <summary>
            The bright magenta color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.BrightYellow">
            <summary>
            The bright yellow color.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Color.White">
            <summary>
            The White color.
            </summary>
        </member>
        <member name="T:Terminal.Gui.TrueColor">
            <summary>
            Indicates the RGB for true colors.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TrueColor.Red">
            <summary>
            Red color component.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TrueColor.Green">
            <summary>
            Green color component.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TrueColor.Blue">
            <summary>
            Blue color component.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TrueColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.TrueColor"/> struct.
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
        </member>
        <member name="M:Terminal.Gui.TrueColor.ToConsoleColor">
            <summary>
            Converts true color to console color.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Attribute">
            <summary>
            Attributes are used as elements that contain both a foreground and a background or platform specific features.
            </summary>
            <remarks>
              <see cref="T:Terminal.Gui.Attribute"/>s are needed to map colors to terminal capabilities that might lack colors. 
              They encode both the foreground and the background color and are used in the <see cref="T:Terminal.Gui.ColorScheme"/>
              class to define color schemes that can be used in an application.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Attribute.Value">
            <summary>
            The <see cref="T:Terminal.Gui.ConsoleDriver"/>-specific color attribute value. If <see cref="P:Terminal.Gui.Attribute.Initialized"/> is <see langword="false"/> 
            the value of this property is invalid (typically because the Attribute was created before a driver was loaded)
            and the attribute should be re-made (see <see cref="M:Terminal.Gui.Attribute.Make(Terminal.Gui.Color,Terminal.Gui.Color)"/>) before it is used.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Attribute.Foreground">
            <summary>
            The foreground color.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Attribute.Background">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct with only the value passed to
              and trying to get the colors if defined.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(System.Int32,Terminal.Gui.Color,Terminal.Gui.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct.
            </summary>
            <param name="value">Value.</param>
            <param name="foreground">Foreground</param>
            <param name="background">Background</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(Terminal.Gui.Color,Terminal.Gui.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct.
            </summary>
            <param name="foreground">Foreground</param>
            <param name="background">Background</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.#ctor(Terminal.Gui.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Attribute"/> struct
             with the same colors for the foreground and background.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.op_Implicit(Terminal.Gui.Attribute)~System.Int32">
            <summary>
            Implicit conversion from an <see cref="T:Terminal.Gui.Attribute"/> to the underlying, driver-specific, Int32 representation
            of the color.
            </summary>
            <returns>The driver-specific color value stored in the attribute.</returns>
            <param name="c">The attribute to convert</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.op_Implicit(System.Int32)~Terminal.Gui.Attribute">
            <summary>
            Implicitly convert an driver-specific color value into an <see cref="T:Terminal.Gui.Attribute"/>
            </summary>
            <returns>An attribute with the specified driver-specific color value.</returns>
            <param name="v">value</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.Make(Terminal.Gui.Color,Terminal.Gui.Color)">
            <summary>
            Creates an <see cref="T:Terminal.Gui.Attribute"/> from the specified foreground and background colors.
            </summary>
            <remarks>
            If a <see cref="T:Terminal.Gui.ConsoleDriver"/> has not been loaded (<c>Application.Driver == null</c>) this
            method will return an attribute with <see cref="P:Terminal.Gui.Attribute.Initialized"/> set to  <see langword="false"/>.
            </remarks>
            <returns>The new attribute.</returns>
            <param name="foreground">Foreground color to use.</param>
            <param name="background">Background color to use.</param>
        </member>
        <member name="M:Terminal.Gui.Attribute.Get">
            <summary>
            Gets the current <see cref="T:Terminal.Gui.Attribute"/> from the driver.
            </summary>
            <returns>The current attribute.</returns>
        </member>
        <member name="P:Terminal.Gui.Attribute.Initialized">
            <summary>
            If <see langword="true"/> the attribute has been initialized by a <see cref="T:Terminal.Gui.ConsoleDriver"/> and 
            thus has <see cref="P:Terminal.Gui.Attribute.Value"/> that is valid for that driver. If <see langword="false"/> the <see cref="P:Terminal.Gui.Attribute.Foreground"/>
            and <see cref="P:Terminal.Gui.Attribute.Background"/> colors may have been set '-1' but
            the attribute has not been mapped to a <see cref="T:Terminal.Gui.ConsoleDriver"/> specific color value.
            </summary>
            <remarks>
            Attributes that have not been initialized must eventually be initialized before being passed to a driver.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Attribute.HasValidColors">
            <summary>
            Returns <see langword="true"/> if the Attribute is valid (both foreground and background have valid color values).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.ColorScheme">
            <summary>
            Defines the color <see cref="T:Terminal.Gui.Attribute"/>s for common visible elements in a <see cref="T:Terminal.Gui.View"/>. 
            Containers such as <see cref="T:Terminal.Gui.Window"/> and <see cref="T:Terminal.Gui.FrameView"/> use <see cref="T:Terminal.Gui.ColorScheme"/> to determine
            the colors used by sub-views.
            </summary>
            <remarks>
            See also: <see cref="P:Terminal.Gui.Colors.ColorSchemes"/>.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.ColorScheme.schemeBeingSet">
            <summary>
            Used by <see cref="M:Terminal.Gui.Colors.SetColorScheme(Terminal.Gui.ColorScheme,System.String)"/> and <see cref="M:Terminal.Gui.Colors.GetColorScheme(System.String)"/> to track which ColorScheme 
            is being accessed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.Normal">
            <summary>
            The foreground and background color for text when the view is not focused, hot, or disabled.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.Focus">
            <summary>
            The foreground and background color for text when the view has the focus.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.HotNormal">
            <summary>
            The foreground and background color for text when the view is highlighted (hot).
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.HotFocus">
            <summary>
            The foreground and background color for text when the view is highlighted (hot) and has focus.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorScheme.Disabled">
            <summary>
            The default foreground and background color for text, when the view is disabled.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:Terminal.Gui.ColorScheme"/> objects for equality.
            </summary>
            <param name="obj"></param>
            <returns>true if the two objects are equal</returns>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.Equals(Terminal.Gui.ColorScheme)">
            <summary>
            Compares two <see cref="T:Terminal.Gui.ColorScheme"/> objects for equality.
            </summary>
            <param name="other"></param>
            <returns>true if the two objects are equal</returns>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.GetHashCode">
            <summary>
            Returns a hashcode for this instance.
            </summary>
            <returns>hashcode for this instance</returns>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.op_Equality(Terminal.Gui.ColorScheme,Terminal.Gui.ColorScheme)">
            <summary>
            Compares two <see cref="T:Terminal.Gui.ColorScheme"/> objects for equality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns><c>true</c> if the two objects are equivalent</returns>
        </member>
        <member name="M:Terminal.Gui.ColorScheme.op_Inequality(Terminal.Gui.ColorScheme,Terminal.Gui.ColorScheme)">
            <summary>
            Compares two <see cref="T:Terminal.Gui.ColorScheme"/> objects for inequality.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns><c>true</c> if the two objects are not equivalent</returns>
        </member>
        <member name="T:Terminal.Gui.Colors">
            <summary>
            The default <see cref="T:Terminal.Gui.ColorScheme"/>s for the application.
            </summary>
            <remarks>
            This property can be set in a Theme to change the default <see cref="T:Terminal.Gui.Colors"/> for the application.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Colors.Create">
            <summary>
            Creates a new dictionary of new <see cref="T:Terminal.Gui.ColorScheme"/> objects.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Colors.TopLevel">
            <summary>
            The application toplevel color scheme, for the default toplevel views.
            </summary>
            <remarks>
            <para>
            This API will be deprecated in the future. Use <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> instead (e.g. <c>edit.ColorScheme = Colors.ColorSchemes["TopLevel"];</c>
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Colors.Base">
            <summary>
            The base color scheme, for the default toplevel views.
            </summary>
            <remarks>
            <para>
            This API will be deprecated in the future. Use <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> instead (e.g. <c>edit.ColorScheme = Colors.ColorSchemes["Base"];</c>
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Colors.Dialog">
            <summary>
            The dialog color scheme, for standard popup dialog boxes
            </summary>
            <remarks>
            <para>
            This API will be deprecated in the future. Use <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> instead (e.g. <c>edit.ColorScheme = Colors.ColorSchemes["Dialog"];</c>
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Colors.Menu">
            <summary>
            The menu bar color
            </summary>
            <remarks>
            <para>
            This API will be deprecated in the future. Use <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> instead (e.g. <c>edit.ColorScheme = Colors.ColorSchemes["Menu"];</c>
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Colors.Error">
            <summary>
            The color scheme for showing errors.
            </summary>
            <remarks>
            <para>
            This API will be deprecated in the future. Use <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> instead (e.g. <c>edit.ColorScheme = Colors.ColorSchemes["Error"];</c>
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Colors.ColorSchemes">
            <summary>
            Provides the defined <see cref="T:Terminal.Gui.ColorScheme"/>s.
            </summary>
        </member>
        <member name="T:Terminal.Gui.CursorVisibility">
            <summary>
            Cursors Visibility that are displayed
            </summary>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.Default">
            <summary>
            Cursor caret has default
            </summary>
            <remarks>Works under Xterm-like terminal otherwise this is equivalent to <see ref="Underscore"/>. This default directly depends of the XTerm user configuration settings so it could be Block, I-Beam, Underline with possible blinking.</remarks>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.Invisible">
            <summary>
            Cursor caret is hidden
            </summary>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.Underline">
            <summary>
            Cursor caret is normally shown as a blinking underline bar _
            </summary>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.UnderlineFix">
            <summary>
            Cursor caret is normally shown as a underline bar _
            </summary>
            <remarks>Under Windows, this is equivalent to <see ref="UnderscoreBlinking"/></remarks>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.Vertical">
            <summary>
            Cursor caret is displayed a blinking vertical bar |
            </summary>
            <remarks>Works under Xterm-like terminal otherwise this is equivalent to <see ref="Underscore"/></remarks>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.VerticalFix">
            <summary>
            Cursor caret is displayed a blinking vertical bar |
            </summary>
            <remarks>Works under Xterm-like terminal otherwise this is equivalent to <see ref="Underscore"/></remarks>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.Box">
            <summary>
            Cursor caret is displayed as a blinking block ▉
            </summary>
        </member>
        <member name="F:Terminal.Gui.CursorVisibility.BoxFix">
            <summary>
            Cursor caret is displayed a block ▉
            </summary>
            <remarks>Works under Xterm-like terminal otherwise this is equivalent to <see ref="Block"/></remarks>
        </member>
        <member name="T:Terminal.Gui.ConsoleDriver">
            <summary>
            ConsoleDriver is an abstract class that defines the requirements for a console driver.  
            There are currently three implementations: <see cref="T:Terminal.Gui.CursesDriver"/> (for Unix and Mac), <see cref="T:Terminal.Gui.WindowsDriver"/>, and <see cref="T:Terminal.Gui.NetDriver"/> that uses the .NET Console API.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.TerminalResized">
            <summary>
            The handler fired when the terminal is resized.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Cols">
            <summary>
            The current number of columns in the terminal.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Rows">
            <summary>
            The current number of rows in the terminal.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Left">
            <summary>
            The current left in the terminal.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Top">
            <summary>
            The current top in the terminal.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Clipboard">
            <summary>
            Get the operation system clipboard.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.EnableConsoleScrolling">
            <summary>
            <para>
            If <see langword="false"/> (the default) the height of the Terminal.Gui application (<see cref="P:Terminal.Gui.ConsoleDriver.Rows"/>) 
            tracks to the height of the visible console view when the console is resized. In this case 
            scrolling in the console will be disabled and all <see cref="P:Terminal.Gui.ConsoleDriver.Rows"/> will remain visible.
            </para>
            <para>
            If <see langword="true"/> then height of the Terminal.Gui application <see cref="P:Terminal.Gui.ConsoleDriver.Rows"/> only tracks 
            the height of the visible console view when the console is made larger (the application will only grow in height, never shrink). 
            In this case console scrolling is enabled and the contents (<see cref="P:Terminal.Gui.ConsoleDriver.Rows"/> high) will scroll
            as the console scrolls. 
            </para>
            </summary>
            <remarks>
            NOTE: Changes to Windows Terminal prevents this functionality from working. It only really worked on Windows 'conhost' previously.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.HeightAsBuffer">
            <summary>
            This API is deprecated and has no impact when enabled.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Contents">
            <summary>
            The format is rows, columns and 3 values on the last column: Rune, Attribute and Dirty Flag
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Init(System.Action)">
            <summary>
            Initializes the driver
            </summary>
            <param name="terminalResized">Method to invoke when the terminal is resized.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Move(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to the specified column and row.
            </summary>
            <param name="col">Column to move the cursor to.</param>
            <param name="row">Row to move the cursor to.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.AddRune(System.Rune)">
            <summary>
            Adds the specified rune to the display at the current cursor position.
            </summary>
            <param name="rune">Rune to add.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.MakePrintable(System.Rune)">
            <summary>
            Ensures a Rune is not a control character and can be displayed by translating characters below 0x20
            to equivalent, printable, Unicode chars.
            </summary>
            <param name="c">Rune to translate</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.IsValidContent(System.Int32,System.Int32,Terminal.Gui.Rect)">
            <summary>
            Ensures that the column and line are in a valid range from the size of the driver.
            </summary>
            <param name="col">The column.</param>
            <param name="row">The row.</param>
            <param name="clip">The clip.</param>
            <returns><c>true</c>if it's a valid range,<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.AddStr(NStack.ustring)">
            <summary>
            Adds the <paramref name="str"/> to the display at the cursor position.
            </summary>
            <param name="str">String.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.PrepareToRun(Terminal.Gui.MainLoop,System.Action{Terminal.Gui.KeyEvent},System.Action{Terminal.Gui.KeyEvent},System.Action{Terminal.Gui.KeyEvent},System.Action{Terminal.Gui.MouseEvent})">
            <summary>
            Prepare the driver and set the key and mouse events handlers.
            </summary>
            <param name="mainLoop">The main loop.</param>
            <param name="keyHandler">The handler for ProcessKey</param>
            <param name="keyDownHandler">The handler for key down events</param>
            <param name="keyUpHandler">The handler for key up events</param>
            <param name="mouseHandler">The handler for mouse events</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Refresh">
            <summary>
            Updates the screen to reflect all the changes that have been done to the display buffer
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.UpdateCursor">
            <summary>
            Updates the location of the cursor position
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.GetCursorVisibility(Terminal.Gui.CursorVisibility@)">
            <summary>
            Retreive the cursor caret visibility
            </summary>
            <param name="visibility">The current <see cref="T:Terminal.Gui.CursorVisibility"/></param>
            <returns>true upon success</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SetCursorVisibility(Terminal.Gui.CursorVisibility)">
            <summary>
            Change the cursor caret visibility
            </summary>
            <param name="visibility">The wished <see cref="T:Terminal.Gui.CursorVisibility"/></param>
            <returns>true upon success</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.EnsureCursorVisibility">
            <summary>
            Ensure the cursor visibility
            </summary>
            <returns>true upon success</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.End">
            <summary>
            Ends the execution of the console driver.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.ResizeScreen">
            <summary>
            Resizes the clip area when the screen is resized.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.UpdateOffScreen">
            <summary>
            Reset and recreate the contents and the driver buffer.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.UpdateScreen">
            <summary>
            Redraws the physical screen with the contents that have been queued up via any of the printing commands.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.CurrentAttribute">
            <summary>
            The current attribute the driver is using. 
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SetAttribute(Terminal.Gui.Attribute)">
            <summary>
            Selects the specified attribute as the attribute to use for future calls to AddRune and AddString.
            </summary>
            <remarks>
            Implementations should call <c>base.SetAttribute(c)</c>.
            </remarks>
            <param name="c">C.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SetColors(System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Set Colors from limit sets of colors. Not implemented by any driver: See Issue #2300.
            </summary>
            <param name="foreground">Foreground.</param>
            <param name="background">Background.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SetColors(System.Int16,System.Int16)">
            <summary>
            Advanced uses - set colors to any pre-set pairs, you would need to init_color
            that independently with the R, G, B values. Not implemented by any driver: See Issue #2300.
            </summary>
            <param name="foregroundColorId">Foreground color identifier.</param>
            <param name="backgroundColorId">Background color identifier.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.GetColors(System.Int32,Terminal.Gui.Color@,Terminal.Gui.Color@)">
            <summary>
            Gets the foreground and background colors based on the value.
            </summary>
            <param name="value">The value.</param>
            <param name="foreground">The foreground.</param>
            <param name="background">The background.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SendKeys(System.Char,System.ConsoleKey,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Allows sending keys without typing on a keyboard.
            </summary>
            <param name="keyChar">The character key.</param>
            <param name="key">The key.</param>
            <param name="shift">If shift key is sending.</param>
            <param name="alt">If alt key is sending.</param>
            <param name="control">If control key is sending.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.SetTerminalResized(System.Action)">
            <summary>
            Set the handler when the terminal is resized.
            </summary>
            <param name="terminalResized"></param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.DrawWindowTitle(Terminal.Gui.Rect,NStack.ustring,System.Int32,System.Int32,System.Int32,System.Int32,Terminal.Gui.TextAlignment)">
            <summary>
            Draws the title for a Window-style view incorporating padding. 
            </summary>
            <param name="region">Screen relative region where the frame will be drawn.</param>
            <param name="title">The title for the window. The title will only be drawn if <c>title</c> is not null or empty and paddingTop is greater than 0.</param>
            <param name="paddingLeft">Number of columns to pad on the left (if 0 the border will not appear on the left).</param>
            <param name="paddingTop">Number of rows to pad on the top (if 0 the border and title will not appear on the top).</param>
            <param name="paddingRight">Number of columns to pad on the right (if 0 the border will not appear on the right).</param>
            <param name="paddingBottom">Number of rows to pad on the bottom (if 0 the border will not appear on the bottom).</param>
            <param name="textAlignment">Not yet implemented.</param>
            <remarks></remarks>
        </member>
        <member name="T:Terminal.Gui.ConsoleDriver.DiagnosticFlags">
            <summary>
            Enables diagnostic functions
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.DiagnosticFlags.Off">
            <summary>
            All diagnostics off
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.DiagnosticFlags.FrameRuler">
            <summary>
            When enabled, <see cref="M:Terminal.Gui.ConsoleDriver.DrawWindowFrame(Terminal.Gui.Rect,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,Terminal.Gui.Border)"/> will draw a 
            ruler in the frame for any side with a padding value greater than 0.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.DiagnosticFlags.FramePadding">
            <summary>
            When Enabled, <see cref="M:Terminal.Gui.ConsoleDriver.DrawWindowFrame(Terminal.Gui.Rect,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,Terminal.Gui.Border)"/> will use
            'L', 'R', 'T', and 'B' for padding instead of ' '.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Diagnostics">
            <summary>
            Set flags to enable/disable <see cref="T:Terminal.Gui.ConsoleDriver"/> diagnostics.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.DrawWindowFrame(Terminal.Gui.Rect,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,Terminal.Gui.Border)">
            <summary>
            Draws a frame for a window with padding and an optional visible border inside the padding. 
            </summary>
            <param name="region">Screen relative region where the frame will be drawn.</param>
            <param name="paddingLeft">Number of columns to pad on the left (if 0 the border will not appear on the left).</param>
            <param name="paddingTop">Number of rows to pad on the top (if 0 the border and title will not appear on the top).</param>
            <param name="paddingRight">Number of columns to pad on the right (if 0 the border will not appear on the right).</param>
            <param name="paddingBottom">Number of rows to pad on the bottom (if 0 the border will not appear on the bottom).</param>
            <param name="border">If set to <c>true</c> and any padding dimension is > 0 the border will be drawn.</param>
            <param name="fill">If set to <c>true</c> it will clear the content area (the area inside the padding) with the current color, otherwise the content area will be left untouched.</param>
            <param name="borderContent">The <see cref="T:Terminal.Gui.Border"/> to be used if defined.</param>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.DrawFrame(Terminal.Gui.Rect,System.Int32,System.Boolean)">
            <summary>
            Draws a frame on the specified region with the specified padding around the frame.
            </summary>
            <param name="region">Screen relative region where the frame will be drawn.</param>
            <param name="padding">Padding to add on the sides.</param>
            <param name="fill">If set to <c>true</c> it will clear the contents with the current color, otherwise the contents will be left untouched.</param>
            <remarks>This API has been superseded by <see cref="M:Terminal.Gui.ConsoleDriver.DrawWindowFrame(Terminal.Gui.Rect,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,Terminal.Gui.Border)"/>.</remarks>
            <remarks>This API is equivalent to calling <c>DrawWindowFrame(Rect, p - 1, p - 1, p - 1, p - 1)</c>. In other words,
            A padding value of 0 means there is actually a one cell border.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.Suspend">
            <summary>
            Suspend the application, typically needs to save the state, suspend the app and upon return, reset the console driver.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ConsoleDriver.Clip">
            <summary>
            Controls the current clipping region that AddRune/AddStr is subject to.
            </summary>
            <value>The clip.</value>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.StartReportingMouseMoves">
            <summary>
            Start of mouse moves.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.StopReportingMouseMoves">
            <summary>
            Stop reporting mouses moves.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.UncookMouse">
            <summary>
            Disables the cooked event processing from the mouse driver. 
            At startup, it is assumed mouse events are cooked. Not implemented by any driver: See Issue #2300.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.CookMouse">
            <summary>
            Enables the cooked event processing from the mouse driver. Not implemented by any driver: See Issue #2300.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.HLine">
            <summary>
            Horizontal line character.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.VLine">
            <summary>
            Vertical line character.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.Stipple">
            <summary>
            Stipple pattern
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.Diamond">
            <summary>
            Diamond character
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.ULCorner">
            <summary>
            Upper left corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LLCorner">
            <summary>
            Lower left corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.URCorner">
            <summary>
            Upper right corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LRCorner">
            <summary>
            Lower right corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LeftTee">
            <summary>
            Left tee
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.RightTee">
            <summary>
            Right tee
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.TopTee">
            <summary>
            Top tee
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.BottomTee">
            <summary>
            The bottom tee.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.Checked">
            <summary>
            Checkmark.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.UnChecked">
            <summary>
            Un-checked checkmark.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.Selected">
            <summary>
            Selected mark.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.UnSelected">
            <summary>
            Un-selected selected mark.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.RightArrow">
            <summary>
            Right Arrow.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LeftArrow">
            <summary>
            Left Arrow.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.DownArrow">
            <summary>
            Down Arrow.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.UpArrow">
            <summary>
            Up Arrow.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LeftDefaultIndicator">
            <summary>
            Left indicator for default action (e.g. for <see cref="T:Terminal.Gui.Button"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.RightDefaultIndicator">
            <summary>
            Right indicator for default action (e.g. for <see cref="T:Terminal.Gui.Button"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LeftBracket">
            <summary>
            Left frame/bracket (e.g. '[' for <see cref="T:Terminal.Gui.Button"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.RightBracket">
            <summary>
            Right frame/bracket (e.g. ']' for <see cref="T:Terminal.Gui.Button"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.BlocksMeterSegment">
            <summary>
            Blocks Segment indicator for meter views (e.g. <see cref="T:Terminal.Gui.ProgressBar"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.ContinuousMeterSegment">
            <summary>
            Continuous Segment indicator for meter views (e.g. <see cref="T:Terminal.Gui.ProgressBar"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.HDLine">
            <summary>
            Horizontal double line character.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.VDLine">
            <summary>
            Vertical double line character.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.ULDCorner">
            <summary>
            Upper left double corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LLDCorner">
            <summary>
            Lower left double corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.URDCorner">
            <summary>
            Upper right double corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LRDCorner">
            <summary>
            Lower right double corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.HRLine">
            <summary>
            Horizontal line character for rounded corners.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.VRLine">
            <summary>
            Vertical line character for rounded corners.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.ULRCorner">
            <summary>
            Upper left rounded corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LLRCorner">
            <summary>
            Lower left rounded corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.URRCorner">
            <summary>
            Upper right rounded corner
            </summary>
        </member>
        <member name="F:Terminal.Gui.ConsoleDriver.LRRCorner">
            <summary>
            Lower right rounded corner
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.MakeAttribute(Terminal.Gui.Color,Terminal.Gui.Color)">
            <summary>
            Make the attribute for the foreground and background colors.
            </summary>
            <param name="fore">Foreground.</param>
            <param name="back">Background.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.GetAttribute">
            <summary>
            Gets the current <see cref="T:Terminal.Gui.Attribute"/>.
            </summary>
            <returns>The current attribute.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.MakeColor(Terminal.Gui.Color,Terminal.Gui.Color)">
            <summary>
            Make the <see cref="T:Terminal.Gui.Colors"/> for the <see cref="T:Terminal.Gui.ColorScheme"/>.
            </summary>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
            <returns>The attribute for the foreground and background colors.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleDriver.InitalizeColorSchemes(System.Boolean)">
            <summary>
            Ensures all <see cref="T:Terminal.Gui.Attribute"/>s in <see cref="P:Terminal.Gui.Colors.ColorSchemes"/> are correctly 
            initialized by the driver.
            </summary>
            <param name="supportsColors">Flag indicating if colors are supported (not used).</param>
        </member>
        <member name="T:Terminal.Gui.ClipboardProcessRunner">
            <summary>
            Helper class for console drivers to invoke shell commands to interact with the clipboard.
            Used primarily by CursesDriver, but also used in Unit tests which is why it is in
            ConsoleDriver.cs.
            </summary>
        </member>
        <member name="T:Terminal.Gui.ConsoleKeyMapping">
            <summary>
            Helper class to handle the scan code and virtual key from a <see cref="T:System.ConsoleKey"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ConsoleKeyMapping.GetConsoleKeyFromKey(System.UInt32,System.ConsoleModifiers,System.UInt32@,System.UInt32@)">
            <summary>
            Get the <see cref="T:System.ConsoleKey"/> from a <see cref="T:Terminal.Gui.Key"/>.
            </summary>
            <param name="keyValue">The key value.</param>
            <param name="modifiers">The modifiers keys.</param>
            <param name="scanCode">The resulting scan code.</param>
            <param name="outputChar">The resulting output character.</param>
            <returns>The <see cref="T:System.ConsoleKey"/> or the <paramref name="outputChar"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleKeyMapping.GetKeyCharFromConsoleKey(System.UInt32,System.ConsoleModifiers,System.UInt32@,System.UInt32@)">
            <summary>
            Get the output character from the <see cref="T:System.ConsoleKey"/>.
            </summary>
            <param name="unicodeChar">The unicode character.</param>
            <param name="modifiers">The modifiers keys.</param>
            <param name="consoleKey">The resulting console key.</param>
            <param name="scanCode">The resulting scan code.</param>
            <returns>The output character or the <paramref name="consoleKey"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleKeyMapping.MapKeyToConsoleKey(System.UInt32,System.Boolean@)">
            <summary>
            Maps a <see cref="T:Terminal.Gui.Key"/> to a <see cref="T:System.ConsoleKey"/>.
            </summary>
            <param name="keyValue">The key value.</param>
            <param name="isMappable">If <see langword="true"/> is mapped to a valid character, otherwise <see langword="false"/>.</param>
            <returns>The <see cref="T:System.ConsoleKey"/> or the <paramref name="keyValue"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleKeyMapping.MapConsoleKeyToKey(System.ConsoleKey,System.Boolean@)">
            <summary>
            Maps a <see cref="T:System.ConsoleKey"/> to a <see cref="T:Terminal.Gui.Key"/>.
            </summary>
            <param name="consoleKey">The console key.</param>
            <param name="isMappable">If <see langword="true"/> is mapped to a valid character, otherwise <see langword="false"/>.</param>
            <returns>The <see cref="T:Terminal.Gui.Key"/> or the <paramref name="consoleKey"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.ConsoleKeyMapping.MapKeyModifiers(System.ConsoleKeyInfo,Terminal.Gui.Key)">
            <summary>
            Maps a <see cref="T:System.ConsoleKeyInfo"/> to a <see cref="T:Terminal.Gui.Key"/>.
            </summary>
            <param name="keyInfo">The console key info.</param>
            <param name="key">The key.</param>
            <returns>The <see cref="T:Terminal.Gui.Key"/> with <see cref="T:System.ConsoleModifiers"/> or the <paramref name="key"/></returns>
        </member>
        <member name="T:Terminal.Gui.EscSeqReqStatus">
            <summary>
            Represents the state of an ANSI escape sequence request.
            </summary>
            <remarks>
            This is needed because there are some escape sequence requests responses that are equal
            with some normal escape sequences and thus, will be only considered the responses to the
            requests that were registered with this object.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.EscSeqReqStatus.Terminating">
            <summary>
            Gets the terminating.
            </summary>
        </member>
        <member name="P:Terminal.Gui.EscSeqReqStatus.NumRequests">
            <summary>
            Gets the number of requests.
            </summary>
        </member>
        <member name="P:Terminal.Gui.EscSeqReqStatus.NumOutstanding">
            <summary>
            Gets information about unfinished requests.
            </summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqReqStatus.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new state of escape sequence request.
            </summary>
            <param name="terminating">The terminating.</param>
            <param name="numOfReq">The number of requests.</param>
        </member>
        <member name="T:Terminal.Gui.EscSeqReqProc">
            <summary>
            Manages a list of <see cref="T:Terminal.Gui.EscSeqReqStatus"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.EscSeqReqProc.EscSeqReqStats">
            <summary>
            Gets the <see cref="T:Terminal.Gui.EscSeqReqStatus"/> list.
            </summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqReqProc.Add(System.String,System.Int32)">
            <summary>
            Adds a new <see cref="T:Terminal.Gui.EscSeqReqStatus"/> instance to the <see cref="P:Terminal.Gui.EscSeqReqProc.EscSeqReqStats"/> list.
            </summary>
            <param name="terminating">The terminating.</param>
            <param name="numOfReq">The number of requests.</param>
        </member>
        <member name="M:Terminal.Gui.EscSeqReqProc.Remove(System.String)">
            <summary>
            Removes a <see cref="T:Terminal.Gui.EscSeqReqStatus"/> instance from the <see cref="P:Terminal.Gui.EscSeqReqProc.EscSeqReqStats"/> list.
            </summary>
            <param name="terminating">The terminating string.</param>
        </member>
        <member name="M:Terminal.Gui.EscSeqReqProc.Requested(System.String)">
            <summary>
            Indicates if a <see cref="T:Terminal.Gui.EscSeqReqStatus"/> with the <paramref name="terminating"/> exist
            in the <see cref="P:Terminal.Gui.EscSeqReqProc.EscSeqReqStats"/> list.
            </summary>
            <param name="terminating"></param>
            <returns><see langword="true"/> if exist, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Terminal.Gui.EscSeqUtils">
            <summary>
            Provides a platform-independent API for managing ANSI escape sequence codes.
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.KeyEsc">
            <summary>
            Represents the escape key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.KeyCSI">
            <summary>
            Represents the CSI (Control Sequence Introducer).
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_EnableAnyEventMouse">
            <summary>
            Represents the CSI for enable any mouse event tracking.
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_EnableSgrExtModeMouse">
            <summary>
            Represents the CSI for enable SGR (Select Graphic Rendition).
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_EnableUrxvtExtModeMouse">
            <summary>
            Represents the CSI for enable URXVT (Unicode Extended Virtual Terminal).
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_DisableAnyEventMouse">
            <summary>
            Represents the CSI for disable any mouse event tracking.
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_DisableSgrExtModeMouse">
            <summary>
            Represents the CSI for disable SGR (Select Graphic Rendition).
            </summary>
        </member>
        <member name="F:Terminal.Gui.EscSeqUtils.CSI_DisableUrxvtExtModeMouse">
            <summary>
            Represents the CSI for disable URXVT (Unicode Extended Virtual Terminal).
            </summary>
        </member>
        <member name="P:Terminal.Gui.EscSeqUtils.EnableMouseEvents">
            <summary>
            Control sequence for enable mouse events.
            </summary>
        </member>
        <member name="P:Terminal.Gui.EscSeqUtils.DisableMouseEvents">
            <summary>
            Control sequence for disable mouse events.
            </summary>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetConsoleInputKey(System.ConsoleKeyInfo)">
            <summary>
            Ensures a console key is mapped to one that works correctly with ANSI escape sequences.
            </summary>
            <param name="consoleKeyInfo">The <see cref="T:System.ConsoleKeyInfo"/>.</param>
            <returns>The <see cref="T:System.ConsoleKeyInfo"/> modified.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.ResizeArray(System.ConsoleKeyInfo,System.ConsoleKeyInfo[])">
            <summary>
            A helper to resize the <see cref="T:System.ConsoleKeyInfo"/> as needed.
            </summary>
            <param name="consoleKeyInfo">The <see cref="T:System.ConsoleKeyInfo"/>.</param>
            <param name="cki">The <see cref="T:System.ConsoleKeyInfo"/> array to resize.</param>
            <returns>The <see cref="T:System.ConsoleKeyInfo"/> resized.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.DecodeEscSeq(Terminal.Gui.EscSeqReqProc,System.ConsoleKeyInfo@,System.ConsoleKey@,System.ConsoleKeyInfo[],System.ConsoleModifiers@,System.String@,System.String@,System.String[]@,System.String@,System.Boolean@,System.Collections.Generic.List{Terminal.Gui.MouseFlags}@,Terminal.Gui.Point@,System.Boolean@,System.Action{Terminal.Gui.MouseFlags,Terminal.Gui.Point})">
            <summary>
            Decodes a escape sequence to been processed in the appropriate manner.
            </summary>
            <param name="escSeqReqProc">The <see cref="T:Terminal.Gui.EscSeqReqProc"/> which may contain a request.</param>
            <param name="newConsoleKeyInfo">The <see cref="T:System.ConsoleKeyInfo"/> which may changes.</param>
            <param name="key">The <see cref="T:System.ConsoleKey"/> which may changes.</param>
            <param name="cki">The <see cref="T:System.ConsoleKeyInfo"/> array.</param>
            <param name="mod">The <see cref="T:System.ConsoleModifiers"/> which may changes.</param>
            <param name="c1Control">The control returned by the <see cref="M:Terminal.Gui.EscSeqUtils.GetC1ControlChar(System.Char)"/> method.</param>
            <param name="code">The code returned by the <see cref="M:Terminal.Gui.EscSeqUtils.GetEscapeResult(System.Char[])"/> method.</param>
            <param name="values">The values returned by the <see cref="M:Terminal.Gui.EscSeqUtils.GetEscapeResult(System.Char[])"/> method.</param>
            <param name="terminating">The terminating returned by the <see cref="M:Terminal.Gui.EscSeqUtils.GetEscapeResult(System.Char[])"/> method.</param>
            <param name="isKeyMouse">Indicates if the escape sequence is a mouse key.</param>
            <param name="buttonState">The <see cref="T:Terminal.Gui.MouseFlags"/> button state.</param>
            <param name="pos">The <see cref="T:Terminal.Gui.MouseFlags"/> position.</param>
            <param name="isReq">Indicates if the escape sequence is a response to a request.</param>
            <param name="continuousButtonPressedHandler">The handler that will process the event.</param>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetEscapeResult(System.Char[])">
            <summary>
            Gets all the needed information about a escape sequence.
            </summary>
            <param name="kChar">The array with all chars.</param>
            <returns>
            The c1Control returned by <see cref="M:Terminal.Gui.EscSeqUtils.GetC1ControlChar(System.Char)"/>, code, values and terminating.
            </returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetC1ControlChar(System.Char)">
            <summary>
            Gets the c1Control used in the called escape sequence.
            </summary>
            <param name="c">The char used.</param>
            <returns>The c1Control.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetConsoleModifiers(System.String)">
            <summary>
            Gets the <see cref="T:System.ConsoleModifiers"/> from the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The <see cref="T:System.ConsoleModifiers"/> or zero.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetConsoleKey(System.Char,System.String,System.ConsoleModifiers@)">
            <summary>
            Gets the <see cref="T:System.ConsoleKey"/> depending on terminating and value.
            </summary>
            <param name="terminating">The terminating.</param>
            <param name="value">The value.</param>
            <param name="mod">The <see cref="T:System.ConsoleModifiers"/> which may changes.</param>
            <returns>The <see cref="T:System.ConsoleKey"/> and probably the <see cref="T:System.ConsoleModifiers"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetKeyCharArray(System.ConsoleKeyInfo[])">
            <summary>
            A helper to get only the <see cref="P:System.ConsoleKeyInfo.KeyChar"/> from the <see cref="T:System.ConsoleKeyInfo"/> array.
            </summary>
            <param name="cki"></param>
            <returns>The char array of the escape sequence.</returns>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetMouse(System.ConsoleKeyInfo[],System.Collections.Generic.List{Terminal.Gui.MouseFlags}@,Terminal.Gui.Point@,System.Action{Terminal.Gui.MouseFlags,Terminal.Gui.Point})">
            <summary>
            Gets the <see cref="T:Terminal.Gui.MouseFlags"/> mouse button flags and the position.
            </summary>
            <param name="cki">The <see cref="T:System.ConsoleKeyInfo"/> array.</param>
            <param name="mouseFlags">The mouse button flags.</param>
            <param name="pos">The mouse position.</param>
            <param name="continuousButtonPressedHandler">The handler that will process the event.</param>
        </member>
        <member name="M:Terminal.Gui.EscSeqUtils.GetParentProcess(System.Diagnostics.Process)">
            <summary>
            Get the terminal that holds the console driver.
            </summary>
            <param name="process">The process.</param>
            <returns>If supported the executable console process, null otherwise.</returns>
        </member>
        <member name="T:Terminal.Gui.KeyModifiers">
            <summary>
            Identifies the state of the "shift"-keys within a event.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Shift">
            <summary>
            Check if the Shift key was pressed or not.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Alt">
            <summary>
            Check if the Alt key was pressed or not.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Ctrl">
            <summary>
            Check if the Ctrl key was pressed or not.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Capslock">
            <summary>
            Check if the Caps lock key was pressed or not.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Numlock">
            <summary>
            Check if the Num lock key was pressed or not.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyModifiers.Scrolllock">
            <summary>
            Check if the Scroll lock key was pressed or not.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Key">
            <summary>
            The <see cref="T:Terminal.Gui.Key"/> enumeration contains special encoding for some keys, but can also
            encode all the unicode values that can be passed.   
            </summary>
            <remarks>
            <para>
              If the <see cref="F:Terminal.Gui.Key.SpecialMask"/> is set, then the value is that of the special mask,
              otherwise, the value is the one of the lower bits (as extracted by <see cref="F:Terminal.Gui.Key.CharMask"/>)
            <para>
              Numerics keys are the values between 48 and 57 corresponding to 0 to 9
            </para>
            </para>
            <para>
              Upper alpha keys are the values between 65 and 90 corresponding to A to Z
            </para>
            <para>
              Unicode runes are also stored here, the letter 'A" for example is encoded as a value 65 (not surfaced in the enum).
            </para>
            </remarks>
        </member>
        <member name="F:Terminal.Gui.Key.CharMask">
            <summary>
            Mask that indicates that this is a character value, values outside this range
            indicate special characters like Alt-key combinations or special keys on the
            keyboard like function keys, arrows keys and so on.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.SpecialMask">
            <summary>
            If the <see cref="F:Terminal.Gui.Key.SpecialMask"/> is set, then the value is that of the special mask,
            otherwise, the value is the one of the lower bits (as extracted by <see cref="F:Terminal.Gui.Key.CharMask"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Null">
            <summary>
            The key code representing null or empty
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Backspace">
            <summary>
            Backspace key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Tab">
            <summary>
            The key code for the user pressing the tab key (forwards tab key).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Enter">
            <summary>
            The key code for the user pressing the return key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Clear">
            <summary>
            The key code for the user pressing the clear key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Esc">
            <summary>
            The key code for the user pressing the escape key
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Space">
            <summary>
            The key code for the user pressing the space bar
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D0">
            <summary>
            Digit 0.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D1">
            <summary>
            Digit 1.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D2">
            <summary>
            Digit 2.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D3">
            <summary>
            Digit 3.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D4">
            <summary>
            Digit 4.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D5">
            <summary>
            Digit 5.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D6">
            <summary>
            Digit 6.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D7">
            <summary>
            Digit 7.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D8">
            <summary>
            Digit 8.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D9">
            <summary>
            Digit 9.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.A">
            <summary>
            The key code for the user pressing Shift-A
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.B">
            <summary>
            The key code for the user pressing Shift-B
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.C">
            <summary>
            The key code for the user pressing Shift-C
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.D">
            <summary>
            The key code for the user pressing Shift-D
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.E">
            <summary>
            The key code for the user pressing Shift-E
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F">
            <summary>
            The key code for the user pressing Shift-F
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.G">
            <summary>
            The key code for the user pressing Shift-G
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.H">
            <summary>
            The key code for the user pressing Shift-H
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.I">
            <summary>
            The key code for the user pressing Shift-I
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.J">
            <summary>
            The key code for the user pressing Shift-J
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.K">
            <summary>
            The key code for the user pressing Shift-K
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.L">
            <summary>
            The key code for the user pressing Shift-L
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.M">
            <summary>
            The key code for the user pressing Shift-M
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.N">
            <summary>
            The key code for the user pressing Shift-N
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.O">
            <summary>
            The key code for the user pressing Shift-O
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.P">
            <summary>
            The key code for the user pressing Shift-P
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Q">
            <summary>
            The key code for the user pressing Shift-Q
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.R">
            <summary>
            The key code for the user pressing Shift-R
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.S">
            <summary>
            The key code for the user pressing Shift-S
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.T">
            <summary>
            The key code for the user pressing Shift-T
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.U">
            <summary>
            The key code for the user pressing Shift-U
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.V">
            <summary>
            The key code for the user pressing Shift-V
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.W">
            <summary>
            The key code for the user pressing Shift-W
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.X">
            <summary>
            The key code for the user pressing Shift-X
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Y">
            <summary>
            The key code for the user pressing Shift-Y
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Z">
            <summary>
            The key code for the user pressing Shift-Z
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.a">
            <summary>
            The key code for the user pressing A
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.b">
            <summary>
            The key code for the user pressing B
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.c">
            <summary>
            The key code for the user pressing C
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.d">
            <summary>
            The key code for the user pressing D
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.e">
            <summary>
            The key code for the user pressing E
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.f">
            <summary>
            The key code for the user pressing F
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.g">
            <summary>
            The key code for the user pressing G
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.h">
            <summary>
            The key code for the user pressing H
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.i">
            <summary>
            The key code for the user pressing I
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.j">
            <summary>
            The key code for the user pressing J
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.k">
            <summary>
            The key code for the user pressing K
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.l">
            <summary>
            The key code for the user pressing L
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.m">
            <summary>
            The key code for the user pressing M
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.n">
            <summary>
            The key code for the user pressing N
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.o">
            <summary>
            The key code for the user pressing O
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.p">
            <summary>
            The key code for the user pressing P
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.q">
            <summary>
            The key code for the user pressing Q
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.r">
            <summary>
            The key code for the user pressing R
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.s">
            <summary>
            The key code for the user pressing S
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.t">
            <summary>
            The key code for the user pressing T
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.u">
            <summary>
            The key code for the user pressing U
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.v">
            <summary>
            The key code for the user pressing V
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.w">
            <summary>
            The key code for the user pressing W
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.x">
            <summary>
            The key code for the user pressing X
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.y">
            <summary>
            The key code for the user pressing Y
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.z">
            <summary>
            The key code for the user pressing Z
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Delete">
            <summary>
            The key code for the user pressing the delete key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.ShiftMask">
            <summary>
            When this value is set, the Key encodes the sequence Shift-KeyValue.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.AltMask">
            <summary>
              When this value is set, the Key encodes the sequence Alt-KeyValue.
              And the actual value must be extracted by removing the AltMask.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.CtrlMask">
            <summary>
              When this value is set, the Key encodes the sequence Ctrl-KeyValue.
              And the actual value must be extracted by removing the CtrlMask.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.CursorUp">
            <summary>
            Cursor up key
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.CursorDown">
            <summary>
            Cursor down key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.CursorLeft">
            <summary>
            Cursor left key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.CursorRight">
            <summary>
            Cursor right key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.PageUp">
            <summary>
            Page Up key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.PageDown">
            <summary>
            Page Down key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Home">
            <summary>
            Home key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.End">
            <summary>
            End key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.InsertChar">
            <summary>
            Insert character key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.DeleteChar">
            <summary>
            Delete character key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.BackTab">
            <summary>
            Shift-tab key (backwards tab key).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.PrintScreen">
            <summary>
            Print screen character key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F1">
            <summary>
            F1 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F2">
            <summary>
            F2 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F3">
            <summary>
            F3 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F4">
            <summary>
            F4 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F5">
            <summary>
            F5 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F6">
            <summary>
            F6 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F7">
            <summary>
            F7 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F8">
            <summary>
            F8 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F9">
            <summary>
            F9 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F10">
            <summary>
            F10 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F11">
            <summary>
            F11 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F12">
            <summary>
            F12 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F13">
            <summary>
            F13 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F14">
            <summary>
            F14 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F15">
            <summary>
            F15 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F16">
            <summary>
            F16 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F17">
            <summary>
            F17 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F18">
            <summary>
            F18 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F19">
            <summary>
            F19 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F20">
            <summary>
            F20 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F21">
            <summary>
            F21 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F22">
            <summary>
            F22 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F23">
            <summary>
            F23 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.F24">
            <summary>
            F24 key.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Key.Unknown">
            <summary>
            A key with an unknown mapping was raised.
            </summary>
        </member>
        <member name="T:Terminal.Gui.KeyEvent">
            <summary>
            Describes a keyboard event.
            </summary>
        </member>
        <member name="F:Terminal.Gui.KeyEvent.Key">
            <summary>
            Symbolic definition for the key.
            </summary>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.KeyValue">
            <summary>
              The key value cast to an integer, you will typical use this for
              extracting the Unicode rune value out of a key, when none of the
              symbolic options are in use.
            </summary>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsShift">
            <summary>
            Gets a value indicating whether the Shift key was pressed.
            </summary>
            <value><c>true</c> if is shift; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsAlt">
            <summary>
            Gets a value indicating whether the Alt key was pressed (real or synthesized)
            </summary>
            <value><c>true</c> if is alternate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsCtrl">
            <summary>
            Determines whether the value is a control key (and NOT just the ctrl key)
            </summary>
            <value><c>true</c> if is ctrl; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsCapslock">
            <summary>
            Gets a value indicating whether the Caps lock key was pressed (real or synthesized)
            </summary>
            <value><c>true</c> if is alternate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsNumlock">
            <summary>
            Gets a value indicating whether the Num lock key was pressed (real or synthesized)
            </summary>
            <value><c>true</c> if is alternate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.KeyEvent.IsScrolllock">
            <summary>
            Gets a value indicating whether the Scroll lock key was pressed (real or synthesized)
            </summary>
            <value><c>true</c> if is alternate; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Terminal.Gui.KeyEvent.#ctor">
            <summary>
            Constructs a new <see cref="T:Terminal.Gui.KeyEvent"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.KeyEvent.#ctor(Terminal.Gui.Key,Terminal.Gui.KeyModifiers)">
            <summary>
              Constructs a new <see cref="T:Terminal.Gui.KeyEvent"/> from the provided Key value - can be a rune cast into a Key value
            </summary>
        </member>
        <member name="M:Terminal.Gui.KeyEvent.ToString">
            <summary>
            Pretty prints the KeyEvent
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.MouseFlags">
            <summary>
            Mouse flags reported in <see cref="T:Terminal.Gui.MouseEvent"/>.
            </summary>
            <remarks>
            They just happen to map to the ncurses ones.
            </remarks>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1Pressed">
            <summary>
            The first mouse button was pressed.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1Released">
            <summary>
            The first mouse button was released.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1Clicked">
            <summary>
            The first mouse button was clicked (press+release).
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1DoubleClicked">
            <summary>
            The first mouse button was double-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button1TripleClicked">
            <summary>
            The first mouse button was triple-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2Pressed">
            <summary>
            The second mouse button was pressed.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2Released">
            <summary>
            The second mouse button was released.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2Clicked">
            <summary>
            The second mouse button was clicked (press+release).
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2DoubleClicked">
            <summary>
            The second mouse button was double-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button2TripleClicked">
            <summary>
            The second mouse button was triple-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3Pressed">
            <summary>
            The third mouse button was pressed.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3Released">
            <summary>
            The third mouse button was released.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3Clicked">
            <summary>
            The third mouse button was clicked (press+release).
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3DoubleClicked">
            <summary>
            The third mouse button was double-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button3TripleClicked">
            <summary>
            The third mouse button was triple-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4Pressed">
            <summary>
            The fourth mouse button was pressed.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4Released">
            <summary>
            The fourth mouse button was released.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4Clicked">
            <summary>
            The fourth button was clicked (press+release).
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4DoubleClicked">
            <summary>
            The fourth button was double-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.Button4TripleClicked">
            <summary>
            The fourth button was triple-clicked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ButtonShift">
            <summary>
            Flag: the shift key was pressed when the mouse button took place.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ButtonCtrl">
            <summary>
            Flag: the ctrl key was pressed when the mouse button took place.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ButtonAlt">
            <summary>
            Flag: the alt key was pressed when the mouse button took place.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.ReportMousePosition">
            <summary>
            The mouse position is being reported in this event.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledUp">
            <summary>
            Vertical button wheeled up.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledDown">
            <summary>
            Vertical button wheeled down.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledLeft">
            <summary>
            Vertical button wheeled up while pressing ButtonShift.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.WheeledRight">
            <summary>
            Vertical button wheeled down while pressing ButtonShift.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MouseFlags.AllEvents">
            <summary>
            Mask that captures all the events.
            </summary>
        </member>
        <member name="T:Terminal.Gui.MouseEvent">
            <summary>
            Low-level construct that conveys the details of mouse events, such
            as coordinates and button state, from ConsoleDrivers up to <see cref="T:Terminal.Gui.Application"/> and
            Views.
            </summary>
            <remarks>The <see cref="T:Terminal.Gui.Application"/> class includes the <see cref="F:Terminal.Gui.Application.RootMouseEvent"/>
            Action which takes a MouseEvent argument.</remarks>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.X">
            <summary>
            The X (column) location for the mouse event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.Y">
            <summary>
            The Y (column) location for the mouse event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.Flags">
            <summary>
            Flags indicating the kind of mouse event that is being posted.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.OfX">
            <summary>
            The offset X (column) location for the mouse event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.OfY">
            <summary>
            The offset Y (column) location for the mouse event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.View">
            <summary>
            The current view at the location for the mouse event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MouseEvent.Handled">
            <summary>
            Indicates if the current mouse event has already been processed and the driver should stop notifying any other event subscriber.
            Its important to set this value to true specially when updating any View's layout from inside the subscriber method.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MouseEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Terminal.Gui.MouseEvent"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Terminal.Gui.MouseEvent"/>.</returns>
        </member>
        <member name="T:Terminal.Gui.Graphs.IAnnotation">
            <summary>
            <para>Describes an overlay element that is rendered either before or
            after a series.</para>
            
            <para>Annotations can be positioned either in screen space (e.g.
            a legend) or in graph space (e.g. a line showing high point)
            </para>
            <para>Unlike <see cref="T:Terminal.Gui.Graphs.ISeries"/>, annotations are allowed to
            draw into graph margins
            </para>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.IAnnotation.BeforeSeries">
            <summary>
            True if annotation should be drawn before <see cref="T:Terminal.Gui.Graphs.ISeries"/>.  This
            allowes Series and later annotations to potentially draw over the top
            of this annotation.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.IAnnotation.Render(Terminal.Gui.GraphView)">
            <summary>
            Called once after series have been rendered (or before if <see cref="P:Terminal.Gui.Graphs.IAnnotation.BeforeSeries"/> is true).
            Use <see cref="P:Terminal.Gui.View.Driver"/> to draw and <see cref="P:Terminal.Gui.View.Bounds"/> to avoid drawing outside of
            graph
            </summary>
            <param name="graph"></param>
        </member>
        <member name="T:Terminal.Gui.Graphs.TextAnnotation">
            <summary>
            Displays text at a given position (in screen space or graph space)
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.TextAnnotation.ScreenPosition">
            <summary>
            The location on screen to draw the <see cref="P:Terminal.Gui.Graphs.TextAnnotation.Text"/> regardless
            of scroll/zoom settings.  This overrides <see cref="P:Terminal.Gui.Graphs.TextAnnotation.GraphPosition"/>
            if specified.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.TextAnnotation.GraphPosition">
            <summary>
            The location in graph space to draw the <see cref="P:Terminal.Gui.Graphs.TextAnnotation.Text"/>.  This
            annotation will only show if the point is in the current viewable
            area of the graph presented in the <see cref="T:Terminal.Gui.GraphView"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.TextAnnotation.Text">
            <summary>
            Text to display on the graph
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.TextAnnotation.BeforeSeries">
            <summary>
            True to add text before plotting series.  Defaults to false
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.TextAnnotation.Render(Terminal.Gui.GraphView)">
            <summary>
            Draws the annotation
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.TextAnnotation.DrawText(Terminal.Gui.GraphView,System.Int32,System.Int32)">
            <summary>
            Draws the <see cref="P:Terminal.Gui.Graphs.TextAnnotation.Text"/> at the given coordinates with truncation to avoid
            spilling over <see name="View.Bounds"/> of the <paramref name="graph"/>
            </summary>
            <param name="graph"></param>
            <param name="x">Screen x position to start drawing string</param>
            <param name="y">Screen y position to start drawing string</param>
        </member>
        <member name="T:Terminal.Gui.Graphs.LegendAnnotation">
            <summary>
            A box containing symbol definitions e.g. meanings for colors in a graph.
            The 'Key' to the graph
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.LegendAnnotation.Border">
            <summary>
            True to draw a solid border around the legend.
            Defaults to true.  This border will be within the
            <see cref="P:Terminal.Gui.Graphs.LegendAnnotation.Bounds"/> and so reduces the width/height
            available for text by 2
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.LegendAnnotation.Bounds">
            <summary>
            Defines the screen area available for the legend to render in
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.LegendAnnotation.BeforeSeries">
            <summary>
            Returns false i.e. Lengends render after series
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.LegendAnnotation.entries">
            <summary>
            Ordered collection of entries that are rendered in the legend.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.LegendAnnotation.#ctor(Terminal.Gui.Rect)">
            <summary>
            Creates a new empty legend at the given screen coordinates
            </summary>
            <param name="legendBounds">Defines the area available for the legend to render in
            (within the graph).  This is in screen units (i.e. not graph space)</param>
        </member>
        <member name="M:Terminal.Gui.Graphs.LegendAnnotation.Render(Terminal.Gui.GraphView)">
            <summary>
            Draws the Legend and all entries into the area within <see cref="P:Terminal.Gui.Graphs.LegendAnnotation.Bounds"/>
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.LegendAnnotation.AddEntry(Terminal.Gui.Graphs.GraphCellToRender,System.String)">
            <summary>
            Adds an entry into the legend.  Duplicate entries are permissable
            </summary>
            <param name="graphCellToRender">The symbol appearing on the graph that should appear in the legend</param>
            <param name="text">Text to render on this line of the legend.  Will be truncated
            if outside of Legend <see cref="P:Terminal.Gui.Graphs.LegendAnnotation.Bounds"/></param>
        </member>
        <member name="T:Terminal.Gui.Graphs.PathAnnotation">
            <summary>
            Sequence of lines to connect points e.g. of a <see cref="T:Terminal.Gui.Graphs.ScatterSeries"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.PathAnnotation.Points">
            <summary>
            Points that should be connected.  Lines will be drawn between points in the order
            they appear in the list
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.PathAnnotation.LineColor">
            <summary>
            Color for the line that connects points
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.PathAnnotation.LineRune">
            <summary>
            The symbol that gets drawn along the line, defaults to '.'
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.PathAnnotation.BeforeSeries">
            <summary>
            True to add line before plotting series.  Defaults to false
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.PathAnnotation.Render(Terminal.Gui.GraphView)">
            <summary>
            Draws lines connecting each of the <see cref="P:Terminal.Gui.Graphs.PathAnnotation.Points"/>
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.PathAnnotation.PointsToLines">
            <summary>
            Generates lines joining <see cref="P:Terminal.Gui.Graphs.PathAnnotation.Points"/> 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Graphs.PathAnnotation.LineF">
            <summary>
            Describes two points in graph space and a line between them
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.PathAnnotation.LineF.Start">
            <summary>
            The start of the line
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.PathAnnotation.LineF.End">
            <summary>
            The end point of the line
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.PathAnnotation.LineF.#ctor(Terminal.Gui.PointF,Terminal.Gui.PointF)">
            <summary>
            Creates a new line between the points
            </summary>
        </member>
        <member name="T:Terminal.Gui.Graphs.Axis">
            <summary>
            Renders a continuous line with grid line ticks and labels
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.Axis.DefaultShowLabelsEvery">
            <summary>
            Default value for <see cref="P:Terminal.Gui.Graphs.Axis.ShowLabelsEvery"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.Axis.Orientation">
            <summary>
            Direction of the axis
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.Graphs.Axis.Increment">
            <summary>
            Number of units of graph space between ticks on axis. 0 for no ticks
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.Graphs.Axis.ShowLabelsEvery">
            <summary>
            The number of <see cref="P:Terminal.Gui.Graphs.Axis.Increment"/> before an label is added.
            0 = never show labels
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.Axis.Visible">
            <summary>
            True to render axis.  Defaults to true
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.Axis.LabelGetter">
            <summary>
            Allows you to control what label text is rendered for a given <see cref="P:Terminal.Gui.Graphs.Axis.Increment"/>
            when <see cref="P:Terminal.Gui.Graphs.Axis.ShowLabelsEvery"/> is above 0
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.Axis.Text">
            <summary>
            Displayed below/to left of labels (see <see cref="P:Terminal.Gui.Graphs.Axis.Orientation"/>).
            If text is not visible, check <see cref="P:Terminal.Gui.GraphView.MarginBottom"/> / <see cref="P:Terminal.Gui.GraphView.MarginLeft"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.Axis.Minimum">
            <summary>
            The minimum axis point to show.  Defaults to null (no minimum)
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.Axis.#ctor(Terminal.Gui.Graphs.Orientation)">
            <summary>
            Populates base properties and sets the read only <see cref="P:Terminal.Gui.Graphs.Axis.Orientation"/>
            </summary>
            <param name="orientation"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.Axis.DrawAxisLine(Terminal.Gui.GraphView)">
            <summary>
            Draws the solid line of the axis
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.Axis.DrawAxisLine(Terminal.Gui.GraphView,System.Int32,System.Int32)">
            <summary>
            Draws a single cell of the solid line of the axis
            </summary>
            <param name="graph"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.Axis.DrawAxisLabels(Terminal.Gui.GraphView)">
            <summary>
            Draws labels and axis <see cref="P:Terminal.Gui.Graphs.Axis.Increment"/> ticks
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.Axis.DrawAxisLabel(Terminal.Gui.GraphView,System.Int32,System.String)">
            <summary>
            Draws a custom label <paramref name="text"/> at <paramref name="screenPosition"/> units
            along the axis (X or Y depending on <see cref="P:Terminal.Gui.Graphs.Axis.Orientation"/>)
            </summary>
            <param name="graph"></param>
            <param name="screenPosition"></param>
            <param name="text"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.Axis.Reset">
            <summary>
            Resets all configurable properties of the axis to default values
            </summary>
        </member>
        <member name="T:Terminal.Gui.Graphs.HorizontalAxis">
            <summary>
            The horizontal (x axis) of a <see cref="T:Terminal.Gui.GraphView"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.HorizontalAxis.#ctor">
            <summary>
            Creates a new instance of axis with an <see cref="T:Terminal.Gui.Graphs.Orientation"/> of <see cref="F:Terminal.Gui.Graphs.Orientation.Horizontal"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.HorizontalAxis.DrawAxisLine(Terminal.Gui.GraphView)">
            <summary>
            Draws the horizontal axis line
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.HorizontalAxis.DrawAxisLine(Terminal.Gui.GraphView,System.Int32,System.Int32)">
            <summary>
            Draws a horizontal axis line at the given <paramref name="x"/>, <paramref name="y"/> 
            screen coordinates
            </summary>
            <param name="graph"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.HorizontalAxis.DrawAxisLabels(Terminal.Gui.GraphView)">
            <summary>
            Draws the horizontal x axis labels and <see cref="P:Terminal.Gui.Graphs.Axis.Increment"/> ticks
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.HorizontalAxis.DrawAxisLabel(Terminal.Gui.GraphView,System.Int32,System.String)">
            <summary>
            Draws the given <paramref name="text"/> on the axis at x <paramref name="screenPosition"/>.
            For the screen y position use <see cref="M:Terminal.Gui.Graphs.HorizontalAxis.GetAxisYPosition(Terminal.Gui.GraphView)"/>
            </summary>
            <param name="graph">Graph being drawn onto</param>
            <param name="screenPosition">Number of screen columns along the axis to take before rendering</param>
            <param name="text">Text to render under the axis tick</param>
        </member>
        <member name="M:Terminal.Gui.Graphs.HorizontalAxis.GetAxisYPosition(Terminal.Gui.GraphView)">
            <summary>
            Returns the Y screen position of the origin (typically 0,0) of graph space.
            Return value is bounded by the screen i.e. the axis is always rendered even
            if the origin is offscreen.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="T:Terminal.Gui.Graphs.VerticalAxis">
            <summary>
            The vertical (i.e. Y axis) of a <see cref="T:Terminal.Gui.GraphView"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.VerticalAxis.#ctor">
            <summary>
            Creates a new <see cref="F:Terminal.Gui.Graphs.Orientation.Vertical"/> axis
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.VerticalAxis.DrawAxisLine(Terminal.Gui.GraphView)">
            <summary>
            Draws the vertical axis line
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.VerticalAxis.DrawAxisLine(Terminal.Gui.GraphView,System.Int32,System.Int32)">
            <summary>
            Draws a vertical axis line at the given <paramref name="x"/>, <paramref name="y"/> 
            screen coordinates
            </summary>
            <param name="graph"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.VerticalAxis.DrawAxisLabels(Terminal.Gui.GraphView)">
            <summary>
            Draws axis <see cref="P:Terminal.Gui.Graphs.Axis.Increment"/> markers and labels
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.VerticalAxis.DrawAxisLabel(Terminal.Gui.GraphView,System.Int32,System.String)">
            <summary>
            Draws the given <paramref name="text"/> on the axis at y <paramref name="screenPosition"/>.
            For the screen x position use <see cref="M:Terminal.Gui.Graphs.VerticalAxis.GetAxisXPosition(Terminal.Gui.GraphView)"/>
            </summary>
            <param name="graph">Graph being drawn onto</param>
            <param name="screenPosition">Number of rows from the top of the screen (i.e. down the axis) before rendering</param>
            <param name="text">Text to render to the left of the axis tick.  Ensure to 
            set <see cref="P:Terminal.Gui.GraphView.MarginLeft"/> or <see cref="P:Terminal.Gui.GraphView.ScrollOffset"/> sufficient that it is visible</param>
        </member>
        <member name="M:Terminal.Gui.Graphs.VerticalAxis.GetAxisXPosition(Terminal.Gui.GraphView)">
            <summary>
            Returns the X screen position of the origin (typically 0,0) of graph space.
            Return value is bounded by the screen i.e. the axis is always rendered even
            if the origin is offscreen.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="T:Terminal.Gui.Graphs.AxisIncrementToRender">
            <summary>
            A location on an axis of a <see cref="T:Terminal.Gui.GraphView"/> that may
            or may not have a label associated with it
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.AxisIncrementToRender.Orientation">
            <summary>
            Direction of the parent axis
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.AxisIncrementToRender.ScreenLocation">
            <summary>
            The screen location (X or Y depending on <see cref="P:Terminal.Gui.Graphs.AxisIncrementToRender.Orientation"/>) that the
            increment will be rendered at
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.AxisIncrementToRender.Value">
            <summary>
            The value at this position on the axis in graph space
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.AxisIncrementToRender.Text">
            <summary>
            The text (if any) that should be displayed at this axis increment
            </summary>
            <value></value>
        </member>
        <member name="M:Terminal.Gui.Graphs.AxisIncrementToRender.#ctor(Terminal.Gui.Graphs.Orientation,System.Int32,System.Single)">
            <summary>
            Describe a new section of an axis that requires an axis increment
            symbol and/or label
            </summary>
            <param name="orientation"></param>
            <param name="screen"></param>
            <param name="value"></param>
        </member>
        <member name="T:Terminal.Gui.Graphs.LabelGetterDelegate">
            <summary>
            Delegate for custom formatting of axis labels.  Determines what should be displayed at a given label
            </summary>
            <param name="toRender">The axis increment to which the label is attached</param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Graphs.GraphCellToRender">
            <summary>
            Describes how to render a single row/column of a <see cref="T:Terminal.Gui.GraphView"/> based
            on the value(s) in <see cref="T:Terminal.Gui.Graphs.ISeries"/> at that location
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.GraphCellToRender.Rune">
            <summary>
            The character to render in the console
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.GraphCellToRender.Color">
            <summary>
            Optional color to render the <see cref="P:Terminal.Gui.Graphs.GraphCellToRender.Rune"/> with
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.GraphCellToRender.#ctor(System.Rune)">
            <summary>
            Creates instance and sets <see cref="P:Terminal.Gui.Graphs.GraphCellToRender.Rune"/> with default graph coloring
            </summary>
            <param name="rune"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.GraphCellToRender.#ctor(System.Rune,Terminal.Gui.Attribute)">
            <summary>
            Creates instance and sets <see cref="P:Terminal.Gui.Graphs.GraphCellToRender.Rune"/> with custom graph coloring
            </summary>
            <param name="rune"></param>
            <param name="color"></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.GraphCellToRender.#ctor(System.Rune,System.Nullable{Terminal.Gui.Attribute})">
            <summary>
            Creates instance and sets <see cref="P:Terminal.Gui.Graphs.GraphCellToRender.Rune"/> and <see cref="P:Terminal.Gui.Graphs.GraphCellToRender.Color"/> (or default if null)
            </summary>
        </member>
        <member name="T:Terminal.Gui.Graphs.LineCanvas">
            <summary>
            Facilitates box drawing and line intersection detection
            and rendering.  Does not support diagonal lines.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.LineCanvas.AddLine(Terminal.Gui.Point,System.Int32,Terminal.Gui.Graphs.Orientation,Terminal.Gui.BorderStyle)">
            <summary>
            Add a new line to the canvas starting at <paramref name="from"/>.
            Use positive <paramref name="length"/> for Right and negative for Left
            when <see cref="T:Terminal.Gui.Graphs.Orientation"/> is <see cref="F:Terminal.Gui.Graphs.Orientation.Horizontal"/>.
            Use positive <paramref name="length"/> for Down and negative for Up
            when <see cref="T:Terminal.Gui.Graphs.Orientation"/> is <see cref="F:Terminal.Gui.Graphs.Orientation.Vertical"/>.
            </summary>
            <param name="from">Starting point.</param>
            <param name="length">Length of line.  0 for a dot.  
            Positive for Down/Right.  Negative for Up/Left.</param>
            <param name="orientation">Direction of the line.</param>
            <param name="style">The style of line to use</param>
        </member>
        <member name="M:Terminal.Gui.Graphs.LineCanvas.GenerateImage(Terminal.Gui.Rect)">
            <summary>
            Evaluate all currently defined lines that lie within 
            <paramref name="inArea"/> and map that
            shows what characters (if any) should be rendered at each
            point so that all lines connect up correctly with appropriate
            intersection symbols.
            <returns></returns>
            </summary>
            <param name="inArea"></param>
            <returns>Mapping of all the points within <paramref name="inArea"/> to
            line or intersection runes which should be drawn there.</returns>
        </member>
        <member name="M:Terminal.Gui.Graphs.LineCanvas.Has(System.Collections.Generic.HashSet{Terminal.Gui.Graphs.LineCanvas.IntersectionType},Terminal.Gui.Graphs.LineCanvas.IntersectionType[])">
            <summary>
            Returns true if the <paramref name="intersects"/> collection has all the <paramref name="types"/>
            specified (i.e. AND).
            </summary>
            <param name="intersects"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Graphs.LineCanvas.Exactly(System.Collections.Generic.HashSet{Terminal.Gui.Graphs.LineCanvas.IntersectionType},Terminal.Gui.Graphs.LineCanvas.IntersectionType[])">
            <summary>
            Returns true if all requested <paramref name="types"/> appear in <paramref name="intersects"/>
            and there are no additional <see cref="T:Terminal.Gui.Graphs.LineCanvas.IntersectionRuneType"/>
            </summary>
            <param name="intersects"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.Graphs.LineCanvas.IntersectionDefinition.Point">
            <summary>
            The point at which the intersection happens
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.LineCanvas.IntersectionDefinition.Type">
            <summary>
            Defines how <see cref="P:Terminal.Gui.Graphs.LineCanvas.IntersectionDefinition.Line"/> position relates
            to <see cref="P:Terminal.Gui.Graphs.LineCanvas.IntersectionDefinition.Point"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.LineCanvas.IntersectionDefinition.Line">
            <summary>
            The line that intersects <see cref="P:Terminal.Gui.Graphs.LineCanvas.IntersectionDefinition.Point"/>
            </summary>
        </member>
        <member name="T:Terminal.Gui.Graphs.LineCanvas.IntersectionRuneType">
            <summary>
            The type of Rune that we will use before considering
            double width, curved borders etc
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.LineCanvas.IntersectionType.None">
            <summary>
            There is no intersection
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.LineCanvas.IntersectionType.PassOverHorizontal">
            <summary>
             A line passes directly over this point traveling along
             the horizontal axis
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.LineCanvas.IntersectionType.PassOverVertical">
            <summary>
             A line passes directly over this point traveling along
             the vertical axis
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.LineCanvas.IntersectionType.StartUp">
            <summary>
            A line starts at this point and is traveling up
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.LineCanvas.IntersectionType.StartRight">
            <summary>
            A line starts at this point and is traveling right
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.LineCanvas.IntersectionType.StartDown">
            <summary>
            A line starts at this point and is traveling down
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.LineCanvas.IntersectionType.StartLeft">
            <summary>
            A line starts at this point and is traveling left
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.LineCanvas.IntersectionType.Dot">
            <summary>
            A line exists at this point who has 0 length
            </summary>
        </member>
        <member name="T:Terminal.Gui.Graphs.Orientation">
            <summary>
            Direction of an element (horizontal or vertical)
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.Orientation.Horizontal">
            <summary>
            Left to right 
            </summary>
        </member>
        <member name="F:Terminal.Gui.Graphs.Orientation.Vertical">
            <summary>
            Bottom to top
            </summary>
        </member>
        <member name="T:Terminal.Gui.Graphs.ISeries">
            <summary>
            Describes a series of data that can be rendered into a <see cref="T:Terminal.Gui.GraphView"/>>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.ISeries.DrawSeries(Terminal.Gui.GraphView,Terminal.Gui.Rect,Terminal.Gui.RectangleF)">
            <summary>
            Draws the <paramref name="graphBounds"/> section of a series into the
            <paramref name="graph"/> view <paramref name="drawBounds"/>
            </summary>
            <param name="graph">Graph series is to be drawn onto</param>
            <param name="drawBounds">Visible area of the graph in Console Screen units (excluding margins)</param>
            <param name="graphBounds">Visible area of the graph in Graph space units</param>
        </member>
        <member name="T:Terminal.Gui.Graphs.ScatterSeries">
            <summary>
            Series composed of any number of discrete data points 
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.ScatterSeries.Points">
            <summary>
            Collection of each discrete point in the series
            </summary>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.Graphs.ScatterSeries.Fill">
            <summary>
            The color and character that will be rendered in the console
            when there are point(s) in the corresponding graph space.
            Defaults to uncolored 'x'
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.ScatterSeries.DrawSeries(Terminal.Gui.GraphView,Terminal.Gui.Rect,Terminal.Gui.RectangleF)">
            <summary>
            Draws all points directly onto the graph
            </summary>
        </member>
        <member name="T:Terminal.Gui.Graphs.MultiBarSeries">
            <summary>
            Collection of <see cref="T:Terminal.Gui.Graphs.BarSeries"/> in which bars are clustered by category
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.MultiBarSeries.SubSeries">
            <summary>
            Sub collections.  Each series contains the bars for a different category.  Thus 
            SubSeries[0].Bars[0] is the first bar on the axis and SubSeries[1].Bars[0] is the
            second etc
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.MultiBarSeries.Spacing">
            <summary>
            The number of units of graph space between bars.  Should be 
            less than <see cref="P:Terminal.Gui.Graphs.BarSeries.BarEvery"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.MultiBarSeries.#ctor(System.Int32,System.Single,System.Single,Terminal.Gui.Attribute[])">
            <summary>
            Creates a new series of clustered bars.
            </summary>
            <param name="numberOfBarsPerCategory">Each category has this many bars</param>
            <param name="barsEvery">How far appart to put each category (in graph space)</param>
            <param name="spacing">How much spacing between bars in a category (should be less than <paramref name="barsEvery"/>/<paramref name="numberOfBarsPerCategory"/>)</param>
            <param name="colors">Array of colors that define bar color in each category.  Length must match <paramref name="numberOfBarsPerCategory"/></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.MultiBarSeries.AddBars(System.String,System.Rune,System.Single[])">
            <summary>
            Adds a new cluster of bars
            </summary>
            <param name="label"></param>
            <param name="fill"></param>
            <param name="values">Values for each bar in category, must match the number of bars per category</param>
        </member>
        <member name="M:Terminal.Gui.Graphs.MultiBarSeries.DrawSeries(Terminal.Gui.GraphView,Terminal.Gui.Rect,Terminal.Gui.RectangleF)">
            <summary>
            Draws all <see cref="P:Terminal.Gui.Graphs.MultiBarSeries.SubSeries"/>
            </summary>
            <param name="graph"></param>
            <param name="drawBounds"></param>
            <param name="graphBounds"></param>
        </member>
        <member name="T:Terminal.Gui.Graphs.BarSeries">
            <summary>
            Series of bars positioned at regular intervals
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.BarSeries.Bars">
            <summary>
            Ordered collection of graph bars to position along axis
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.BarSeries.BarEvery">
            <summary>
            Determines the spacing of bars along the axis. Defaults to 1 i.e. 
            every 1 unit of graph space a bar is rendered.  Note that you should
            also consider <see cref="P:Terminal.Gui.GraphView.CellSize"/> when changing this.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.BarSeries.Orientation">
            <summary>
            Direction bars protrude from the corresponding axis.
            Defaults to vertical
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.BarSeries.Offset">
            <summary>
            The number of units of graph space along the axis before rendering the first bar
            (and subsequent bars - see <see cref="P:Terminal.Gui.Graphs.BarSeries.BarEvery"/>).  Defaults to 0
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.BarSeries.OverrideBarColor">
            <summary>
            Overrides the <see cref="P:Terminal.Gui.Graphs.BarSeries.Bar.Fill"/> with a fixed color
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.BarSeries.DrawLabels">
            <summary>
            True to draw <see cref="P:Terminal.Gui.Graphs.BarSeries.Bar.Text"/> along the axis under the bar.  Defaults
            to true.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.BarSeries.AdjustColor(Terminal.Gui.Graphs.GraphCellToRender)">
            <summary>
            Applies any color overriding
            </summary>
            <param name="graphCellToRender"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Graphs.BarSeries.DrawSeries(Terminal.Gui.GraphView,Terminal.Gui.Rect,Terminal.Gui.RectangleF)">
            <summary>
            Draws bars that are currently in the <paramref name="drawBounds"/>
            </summary>
            <param name="graph"></param>
            <param name="drawBounds">Screen area of the graph excluding margins</param>
            <param name="graphBounds">Graph space area that should be drawn into <paramref name="drawBounds"/></param>
        </member>
        <member name="M:Terminal.Gui.Graphs.BarSeries.DrawBarLine(Terminal.Gui.GraphView,Terminal.Gui.Point,Terminal.Gui.Point,Terminal.Gui.Graphs.BarSeries.Bar)">
            <summary>
            Override to do custom drawing of the bar e.g. to apply varying color or changing the fill
            symbol mid bar.
            </summary>
            <param name="graph"></param>
            <param name="start">Screen position of the start of the bar</param>
            <param name="end">Screen position of the end of the bar</param>
            <param name="beingDrawn">The Bar that occupies this space and is being drawn</param>
        </member>
        <member name="T:Terminal.Gui.Graphs.BarSeries.Bar">
            <summary>
            A single bar in a <see cref="T:Terminal.Gui.Graphs.BarSeries"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.BarSeries.Bar.Text">
            <summary>
            Optional text that describes the bar.  This will be rendered on the corresponding
            <see cref="T:Terminal.Gui.Graphs.Axis"/> unless <see cref="P:Terminal.Gui.Graphs.BarSeries.DrawLabels"/> is false
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.BarSeries.Bar.Fill">
            <summary>
            The color and character that will be rendered in the console
            when the bar extends over it
            </summary>
        </member>
        <member name="P:Terminal.Gui.Graphs.BarSeries.Bar.Value">
            <summary>
            The value in graph space X/Y (depending on <see cref="P:Terminal.Gui.Graphs.BarSeries.Orientation"/>) to which the bar extends.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Graphs.BarSeries.Bar.#ctor(System.String,Terminal.Gui.Graphs.GraphCellToRender,System.Single)">
            <summary>
            Creates a new instance of a single bar rendered in the given <paramref name="fill"/> that extends
            out <paramref name="value"/> graph space units in the default <see cref="P:Terminal.Gui.Graphs.BarSeries.Orientation"/>
            </summary>
            <param name="text"></param>
            <param name="fill"></param>
            <param name="value"></param>
        </member>
        <member name="T:Terminal.Gui.IMainLoopDriver">
            <summary>
            Public interface to create your own platform specific main loop driver.
            </summary>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.Setup(Terminal.Gui.MainLoop)">
            <summary>
            Initializes the main loop driver, gets the calling main loop for the initialization.
            </summary>
            <param name="mainLoop">Main loop.</param>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.Wakeup">
            <summary>
            Wakes up the mainloop that might be waiting on input, must be thread safe.
            </summary>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.EventsPending(System.Boolean)">
            <summary>
            Must report whether there are any events pending, or even block waiting for events.
            </summary>
            <returns><c>true</c>, if there were pending events, <c>false</c> otherwise.</returns>
            <param name="wait">If set to <c>true</c> wait until an event is available, otherwise return immediately.</param>
        </member>
        <member name="M:Terminal.Gui.IMainLoopDriver.MainIteration">
            <summary>
            The iteration function.
            </summary>
        </member>
        <member name="T:Terminal.Gui.MainLoop">
            <summary>
              Simple main loop implementation that can be used to monitor
              file descriptor, run timers and idle handlers.
            </summary>
            <remarks>
              Monitoring of file descriptors is only available on Unix, there
              does not seem to be a way of supporting this on Windows.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.MainLoop.Timeout">
            <summary>
            Provides data for timers running manipulation.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MainLoop.Timeout.Span">
            <summary>
            Time to wait before invoke the callback.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MainLoop.Timeout.Callback">
            <summary>
            The function that will be invoked.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MainLoop.idleHandlersLock">
            <summary>
            The idle handlers and lock that must be held while manipulating them
            </summary>
        </member>
        <member name="P:Terminal.Gui.MainLoop.Timeouts">
            <summary>
            Gets the list of all timeouts sorted by the <see cref="T:System.TimeSpan"/> time ticks./>.
            A shorter limit time can be added at the end, but it will be called before an
             earlier addition that has a longer limit time.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MainLoop.IdleHandlers">
            <summary>
            Gets a copy of the list of all idle handlers.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MainLoop.Driver">
            <summary>
            The current IMainLoopDriver in use.
            </summary>
            <value>The driver.</value>
        </member>
        <member name="E:Terminal.Gui.MainLoop.TimeoutAdded">
            <summary>
            Invoked when a new timeout is added. To be used in the case
            when <see cref="P:Terminal.Gui.Application.ExitRunLoopAfterFirstIteration"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MainLoop.#ctor(Terminal.Gui.IMainLoopDriver)">
            <summary>
             Creates a new Mainloop. 
            </summary>
            <param name="driver">Should match the <see cref="T:Terminal.Gui.ConsoleDriver"/> 
            (one of the implementations FakeMainLoop, UnixMainLoop, NetMainLoop or WindowsMainLoop).</param>
        </member>
        <member name="M:Terminal.Gui.MainLoop.Invoke(System.Action)">
            <summary>
              Runs <c>action</c> on the thread that is processing events
            </summary>
            <param name="action">the action to be invoked on the main processing thread.</param>
        </member>
        <member name="M:Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})">
            <summary>
              Adds specified idle handler function to mainloop processing. The handler function will be called once per iteration of the main loop after other events have been handled.
            </summary>
            <remarks>
            <para>
              Remove an idle hander by calling <see cref="M:Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})"/> with the token this method returns.
            </para>
            <para>
              If the <c>idleHandler</c> returns <c>false</c> it will be removed and not called subsequently.
            </para>
            </remarks>
            <param name="idleHandler">Token that can be used to remove the idle handler with <see cref="M:Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})"/> .</param>
        </member>
        <member name="M:Terminal.Gui.MainLoop.RemoveIdle(System.Func{System.Boolean})">
            <summary>
              Removes an idle handler added with <see cref="M:Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})"/> from processing.
            </summary>
            <param name="token">A token returned by <see cref="M:Terminal.Gui.MainLoop.AddIdle(System.Func{System.Boolean})"/></param>
            Returns <c>true</c>if the idle handler is successfully removed; otherwise, <c>false</c>.
             This method also returns <c>false</c> if the idle handler is not found.
        </member>
        <member name="M:Terminal.Gui.MainLoop.AddTimeout(System.TimeSpan,System.Func{Terminal.Gui.MainLoop,System.Boolean})">
             <summary>
               Adds a timeout to the mainloop.
             </summary>
             <remarks>
               When time specified passes, the callback will be invoked.
               If the callback returns true, the timeout will be reset, repeating
               the invocation. If it returns false, the timeout will stop and be removed.
            
               The returned value is a token that can be used to stop the timeout
               by calling <see cref="M:Terminal.Gui.MainLoop.RemoveTimeout(System.Object)"/>.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.MainLoop.RemoveTimeout(System.Object)">
            <summary>
              Removes a previously scheduled timeout
            </summary>
            <remarks>
              The token parameter is the value returned by AddTimeout.
            </remarks>
            Returns <c>true</c>if the timeout is successfully removed; otherwise, <c>false</c>.
            This method also returns <c>false</c> if the timeout is not found.
        </member>
        <member name="M:Terminal.Gui.MainLoop.NudgeToUniqueKey(System.Int64)">
            <summary>
            Finds the closest number to <paramref name="k"/> that is not
            present in <see cref="F:Terminal.Gui.MainLoop.timeouts"/> (incrementally).
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.MainLoop.Stop">
            <summary>
              Stops the mainloop.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MainLoop.EventsPending(System.Boolean)">
            <summary>
              Determines whether there are pending events to be processed.
            </summary>
            <remarks>
              You can use this method if you want to probe if events are pending.
              Typically used if you need to flush the input queue while still
              running some of your own code in your main thread.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MainLoop.MainIteration">
             <summary>
               Runs one iteration of timers and file watches
             </summary>
             <remarks>
               You use this to process all pending events (timers, idle handlers and file watches).
            
               You can use it like this:
                 while (main.EvensPending ()) MainIteration ();
             </remarks>
        </member>
        <member name="M:Terminal.Gui.MainLoop.Run">
            <summary>
              Runs the mainloop.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Pos">
            <summary>
            Describes the position of a <see cref="T:Terminal.Gui.View"/> which can be an absolute value, a percentage, centered, or 
            relative to the ending dimension. Integer values are implicitly convertible to
            an absolute <see cref="T:Terminal.Gui.Pos"/>. These objects are created using the static methods Percent,
            AnchorEnd, and Center. The <see cref="T:Terminal.Gui.Pos"/> objects can be combined with the addition and 
            subtraction operators.
            </summary>
            <remarks>
              <para>
                Use the <see cref="T:Terminal.Gui.Pos"/> objects on the X or Y properties of a view to control the position.
              </para>
              <para>
                These can be used to set the absolute position, when merely assigning an
                integer value (via the implicit integer to <see cref="T:Terminal.Gui.Pos"/> conversion), and they can be combined
                to produce more useful layouts, like: Pos.Center - 3, which would shift the position
                of the <see cref="T:Terminal.Gui.View"/> 3 characters to the left after centering for example.
              </para>
              <para>
                It is possible to reference coordinates of another view by using the methods
                Left(View), Right(View), Bottom(View), Top(View). The X(View) and Y(View) are
                aliases to Left(View) and Top(View) respectively.
              </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Pos.Function(System.Func{System.Int32})">
            <summary>
            Creates a "PosFunc" from the specified function.
            </summary>
            <param name="function">The function to be executed.</param>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> returned from the function.</returns>
        </member>
        <member name="M:Terminal.Gui.Pos.Percent(System.Single)">
            <summary>
            Creates a percentage <see cref="T:Terminal.Gui.Pos"/> object
            </summary>
            <returns>The percent <see cref="T:Terminal.Gui.Pos"/> object.</returns>
            <param name="n">A value between 0 and 100 representing the percentage.</param>
            <example>
            This creates a <see cref="T:Terminal.Gui.TextField"/>that is centered horizontally, is 50% of the way down, 
            is 30% the height, and is 80% the width of the <see cref="T:Terminal.Gui.View"/> it added to.
            <code>
            var textView = new TextView () {
            X = Pos.Center (),
            Y = Pos.Percent (50),
            Width = Dim.Percent (80),
            	Height = Dim.Percent (30),
            };
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Pos.AnchorEnd(System.Int32)">
            <summary>
            Creates a <see cref="T:Terminal.Gui.Pos"/> object that is anchored to the end (right side or bottom) of the dimension, 
            useful to flush the layout from the right or bottom.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> object anchored to the end (the bottom or the right side).</returns>
            <param name="margin">Optional margin to place to the right or below.</param>
            <example>
            This sample shows how align a <see cref="T:Terminal.Gui.Button"/> to the bottom-right of a <see cref="T:Terminal.Gui.View"/>.
            <code>
            // See Issue #502 
            anchorButton.X = Pos.AnchorEnd () - (Pos.Right (anchorButton) - Pos.Left (anchorButton));
            anchorButton.Y = Pos.AnchorEnd (1);
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Pos.Center">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object that can be used to center the <see cref="T:Terminal.Gui.View"/>
            </summary>
            <returns>The center Pos.</returns>
            <example>
            This creates a <see cref="T:Terminal.Gui.TextField"/>that is centered horizontally, is 50% of the way down, 
            is 30% the height, and is 80% the width of the <see cref="T:Terminal.Gui.View"/> it added to.
            <code>
            var textView = new TextView () {
            X = Pos.Center (),
            Y = Pos.Percent (50),
            Width = Dim.Percent (80),
            	Height = Dim.Percent (30),
            };
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Pos.op_Implicit(System.Int32)~Terminal.Gui.Pos">
            <summary>
            Creates an Absolute <see cref="T:Terminal.Gui.Pos"/> from the specified integer value.
            </summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Pos"/>.</returns>
            <param name="n">The value to convert to the <see cref="T:Terminal.Gui.Pos"/> .</param>
        </member>
        <member name="M:Terminal.Gui.Pos.At(System.Int32)">
            <summary>
            Creates an Absolute <see cref="T:Terminal.Gui.Pos"/> from the specified integer value.
            </summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Pos"/>.</returns>
            <param name="n">The value to convert to the <see cref="T:Terminal.Gui.Pos"/>.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.op_Addition(Terminal.Gui.Pos,Terminal.Gui.Pos)">
            <summary>
            Adds a <see cref="T:Terminal.Gui.Pos"/> to a <see cref="T:Terminal.Gui.Pos"/>, yielding a new <see cref="T:Terminal.Gui.Pos"/>.
            </summary>
            <param name="left">The first <see cref="T:Terminal.Gui.Pos"/> to add.</param>
            <param name="right">The second <see cref="T:Terminal.Gui.Pos"/> to add.</param>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that is the sum of the values of <c>left</c> and <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Pos.op_Subtraction(Terminal.Gui.Pos,Terminal.Gui.Pos)">
            <summary>
            Subtracts a <see cref="T:Terminal.Gui.Pos"/> from a <see cref="T:Terminal.Gui.Pos"/>, yielding a new <see cref="T:Terminal.Gui.Pos"/>.
            </summary>
            <param name="left">The <see cref="T:Terminal.Gui.Pos"/> to subtract from (the minuend).</param>
            <param name="right">The <see cref="T:Terminal.Gui.Pos"/> to subtract (the subtrahend).</param>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that is the <c>left</c> minus <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Pos.Left(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Left (X) position of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.X(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Left (X) position of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Top(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Top (Y) position of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Y(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Top (Y) position of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Right(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Right (X+Width) coordinate of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.Bottom(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Pos"/> object tracks the Bottom (Y+Height) coordinate of the specified <see cref="T:Terminal.Gui.View"/> 
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Pos"/> that depends on the other view.</returns>
            <param name="view">The <see cref="T:Terminal.Gui.View"/>  that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Pos.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Terminal.Gui.Pos.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="other">The object to compare with the current object. </param>
            <returns>
                <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Terminal.Gui.Dim">
            <summary>
            Dim properties of a <see cref="T:Terminal.Gui.View"/> to control the position.
            </summary>
            <remarks>
              <para>
                Use the Dim objects on the Width or Height properties of a <see cref="T:Terminal.Gui.View"/> to control the position.
              </para>
              <para>
                These can be used to set the absolute position, when merely assigning an
                integer value (via the implicit integer to Pos conversion), and they can be combined
                to produce more useful layouts, like: Pos.Center - 3, which would shift the position
                of the <see cref="T:Terminal.Gui.View"/> 3 characters to the left after centering for example.
              </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Dim.Function(System.Func{System.Int32})">
            <summary>
            Creates a "DimFunc" from the specified function.
            </summary>
            <param name="function">The function to be executed.</param>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> returned from the function.</returns>
        </member>
        <member name="M:Terminal.Gui.Dim.Percent(System.Single,System.Boolean)">
            <summary>
            Creates a percentage <see cref="T:Terminal.Gui.Dim"/> object
            </summary>
            <returns>The percent <see cref="T:Terminal.Gui.Dim"/> object.</returns>
            <param name="n">A value between 0 and 100 representing the percentage.</param>
            <param name="r">If <c>true</c> the Percent is computed based on the remaining space after the X/Y anchor positions. If <c>false</c> is computed based on the whole original space.</param>
            <example>
            This initializes a <see cref="T:Terminal.Gui.TextField"/>that is centered horizontally, is 50% of the way down, 
            is 30% the height, and is 80% the width of the <see cref="T:Terminal.Gui.View"/> it added to.
            <code>
            var textView = new TextView () {
            X = Pos.Center (),
            Y = Pos.Percent (50),
            Width = Dim.Percent (80),
            	Height = Dim.Percent (30),
            };
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.Dim.Fill(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Dim"/> class that fills the dimension, but leaves the specified number of colums for a margin.
            </summary>
            <returns>The Fill dimension.</returns>
            <param name="margin">Margin to use.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.op_Implicit(System.Int32)~Terminal.Gui.Dim">
            <summary>
            Creates an Absolute <see cref="T:Terminal.Gui.Dim"/> from the specified integer value.
            </summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Dim"/>.</returns>
            <param name="n">The value to convert to the pos.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.Sized(System.Int32)">
            <summary>
            Creates an Absolute <see cref="T:Terminal.Gui.Dim"/> from the specified integer value.
            </summary>
            <returns>The Absolute <see cref="T:Terminal.Gui.Dim"/>.</returns>
            <param name="n">The value to convert to the <see cref="T:Terminal.Gui.Dim"/>.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.op_Addition(Terminal.Gui.Dim,Terminal.Gui.Dim)">
            <summary>
            Adds a <see cref="T:Terminal.Gui.Dim"/> to a <see cref="T:Terminal.Gui.Dim"/>, yielding a new <see cref="T:Terminal.Gui.Dim"/>.
            </summary>
            <param name="left">The first <see cref="T:Terminal.Gui.Dim"/> to add.</param>
            <param name="right">The second <see cref="T:Terminal.Gui.Dim"/> to add.</param>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> that is the sum of the values of <c>left</c> and <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Dim.op_Subtraction(Terminal.Gui.Dim,Terminal.Gui.Dim)">
            <summary>
            Subtracts a <see cref="T:Terminal.Gui.Dim"/> from a <see cref="T:Terminal.Gui.Dim"/>, yielding a new <see cref="T:Terminal.Gui.Dim"/>.
            </summary>
            <param name="left">The <see cref="T:Terminal.Gui.Dim"/> to subtract from (the minuend).</param>
            <param name="right">The <see cref="T:Terminal.Gui.Dim"/> to subtract (the subtrahend).</param>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> that is the <c>left</c> minus <c>right</c>.</returns>
        </member>
        <member name="M:Terminal.Gui.Dim.Width(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Dim"/> object tracks the Width of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> of the other <see cref="T:Terminal.Gui.View"/>.</returns>
            <param name="view">The view that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.Height(Terminal.Gui.View)">
            <summary>
            Returns a <see cref="T:Terminal.Gui.Dim"/> object tracks the Height of the specified <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Dim"/> of the other <see cref="T:Terminal.Gui.View"/>.</returns>
            <param name="view">The view that will be tracked.</param>
        </member>
        <member name="M:Terminal.Gui.Dim.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Terminal.Gui.Dim.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="other">The object to compare with the current object. </param>
            <returns>
                <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Terminal.Gui.Responder">
            <summary>
            Responder base class implemented by objects that want to participate on keyboard and mouse input.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Responder.CanFocus">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.Responder"/> can focus.
            </summary>
            <value><c>true</c> if can focus; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.Responder.HasFocus">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.Responder"/> has focus.
            </summary>
            <value><c>true</c> if has focus; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.Responder.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.Responder"/> can respond to user interaction.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Responder.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.Responder"/> and all its child controls are displayed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <summary>
              This method can be overwritten by view that
                want to provide accelerator functionality
                (Alt-key for example).
            </summary>
            <remarks>
              <para>
                Before keys are sent to the subview on the
                current view, all the views are
                processed and the key is passed to the widgets
                to allow some of them to process the keystroke
                as a hot-key. </para>
             <para>
                For example, if you implement a button that
                has a hotkey ok "o", you would catch the
                combination Alt-o here.  If the event is
                caught, you must return true to stop the
                keystroke from being dispatched to other
                views.
             </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)">
            <summary>
              If the view is focused, gives the view a
              chance to process the keystroke.
            </summary>
            <remarks>
              <para>
                Views can override this method if they are
                interested in processing the given keystroke.
                If they consume the keystroke, they must
                return true to stop the keystroke from being
                processed by other widgets or consumed by the
                widget engine.    If they return false, the
                keystroke will be passed using the ProcessColdKey
                method to other views to process.
              </para>
              <para>
                The View implementation does nothing but return false,
                so it is not necessary to call base.ProcessKey if you
                derive directly from View, but you should if you derive
                other View subclasses.
              </para>
            </remarks>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
        </member>
        <member name="M:Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <summary>
              This method can be overwritten by views that
                want to provide accelerator functionality
                (Alt-key for example), but without
                interefering with normal ProcessKey behavior.
            </summary>
            <remarks>
              <para>
                After keys are sent to the subviews on the
                current view, all the view are
                processed and the key is passed to the views
                to allow some of them to process the keystroke
                as a cold-key. </para>
             <para>
               This functionality is used, for example, by
               default buttons to act on the enter key.
               Processing this as a hot-key would prevent
               non-default buttons from consuming the enter
               keypress when they have the focus.
             </para>
            </remarks>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
        </member>
        <member name="M:Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)">
            <summary>
            Method invoked when a key is pressed.
            </summary>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
            <returns>true if the event was handled</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)">
            <summary>
            Method invoked when a key is released.
            </summary>
            <param name="keyEvent">Contains the details about the key that produced the event.</param>
            <returns>true if the event was handled</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)">
            <summary>
            Method invoked when a mouse event is generated
            </summary>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
            <param name="mouseEvent">Contains the details about the mouse event.</param>
        </member>
        <member name="M:Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)">
            <summary>
            Method invoked when a mouse event is generated for the first time.
            </summary>
            <param name="mouseEvent"></param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)">
            <summary>
            Method invoked when a mouse event is generated for the last time.
            </summary>
            <param name="mouseEvent"></param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.OnEnter(Terminal.Gui.View)">
            <summary>
            Method invoked when a view gets focus.
            </summary>
            <param name="view">The view that is losing focus.</param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.OnLeave(Terminal.Gui.View)">
            <summary>
            Method invoked when a view loses focus.
            </summary>
            <param name="view">The view that is getting focus.</param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.OnCanFocusChanged">
            <summary>
            Method invoked when the <see cref="P:Terminal.Gui.Responder.CanFocus"/> property from a view is changed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Responder.OnEnabledChanged">
            <summary>
            Method invoked when the <see cref="P:Terminal.Gui.Responder.Enabled"/> property from a view is changed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Responder.OnVisibleChanged">
            <summary>
            Method invoked when the <see cref="P:Terminal.Gui.Responder.Visible"/> property from a view is changed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Responder.IsOverridden(Terminal.Gui.Responder,System.String)">
            <summary>
            Utilty function to determine <paramref name="method"/> is overridden in the <paramref name="subclass"/>.
            </summary>
            <param name="subclass">The view.</param>
            <param name="method">The method name.</param>
            <returns><see langword="true"/> if it's overridden, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Responder.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.		
            </remarks>
            <param name="disposing"></param>
        </member>
        <member name="M:Terminal.Gui.Responder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resource.
            </summary>
        </member>
        <member name="T:Terminal.Gui.ShortcutHelper">
            <summary>
            Represents a helper to manipulate shortcut keys used on views.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ShortcutHelper.Shortcut">
            <summary>
            This is the global setting that can be used as a global shortcut to invoke the action on the view.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ShortcutHelper.ShortcutTag">
            <summary>
            The keystroke combination used in the <see cref="P:Terminal.Gui.ShortcutHelper.Shortcut"/> as string.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ShortcutHelper.ShortcutAction">
            <summary>
            The action to run if the <see cref="P:Terminal.Gui.ShortcutHelper.Shortcut"/> is defined.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.GetModifiersKey(Terminal.Gui.KeyEvent)">
            <summary>
            Gets the key with all the keys modifiers, especially the shift key that sometimes have to be injected later.
            </summary>
            <param name="kb">The <see cref="T:Terminal.Gui.KeyEvent"/> to check.</param>
            <returns>The <see cref="F:Terminal.Gui.KeyEvent.Key"/> with all the keys modifiers.</returns>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.GetShortcutTag(Terminal.Gui.Key,NStack.ustring)">
            <summary>
            Get the <see cref="P:Terminal.Gui.ShortcutHelper.Shortcut"/> key as string.
            </summary>
            <param name="shortcut">The shortcut key.</param>
            <param name="delimiter">The delimiter string.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.GetKeyToString(Terminal.Gui.Key,Terminal.Gui.Key@)">
            <summary>
            Return key as string.
            </summary>
            <param name="key">The key to extract.</param>
            <param name="knm">Correspond to the non modifier key.</param>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.GetShortcutFromTag(NStack.ustring,NStack.ustring)">
            <summary>
            Allows to retrieve a <see cref="T:Terminal.Gui.Key"/> from a <see cref="P:Terminal.Gui.ShortcutHelper.ShortcutTag"/>
            </summary>
            <param name="tag">The key as string.</param>
            <param name="delimiter">The delimiter string.</param>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.CheckKeysFlagRange(Terminal.Gui.Key,Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>
            Lookup for a <see cref="T:Terminal.Gui.Key"/> on range of keys.
            </summary>
            <param name="key">The source key.</param>
            <param name="first">First key in range.</param>
            <param name="last">Last key in range.</param>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.PreShortcutValidation(Terminal.Gui.Key)">
            <summary>
            Used at key down or key press validation.
            </summary>
            <param name="key">The key to validate.</param>
            <returns><c>true</c> if is valid.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.PostShortcutValidation(Terminal.Gui.Key)">
            <summary>
            Used at key up validation.
            </summary>
            <param name="key">The key to validate.</param>
            <returns><c>true</c> if is valid.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.ShortcutHelper.FindAndOpenByShortcut(Terminal.Gui.KeyEvent,Terminal.Gui.View)">
            <summary>
            Allows a view to run a <see cref="P:Terminal.Gui.View.ShortcutAction"/> if defined.
            </summary>
            <param name="kb">The <see cref="T:Terminal.Gui.KeyEvent"/></param>
            <param name="view">The <see cref="T:Terminal.Gui.View"/></param>
            <returns><c>true</c> if defined <c>false</c>otherwise.</returns>
        </member>
        <member name="T:Terminal.Gui.StackExtensions">
            <summary>
            Extension of <see cref="T:System.Collections.Generic.Stack`1"/> helper to work with specific <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.Replace``1(System.Collections.Generic.Stack{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Replaces an stack object values that match with the value to replace.
            </summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
            <param name="valueToReplace">Value to replace.</param>
            <param name="valueToReplaceWith">Value to replace with to what matches the value to replace.</param>
            <param name="comparer">The comparison object.</param>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.Swap``1(System.Collections.Generic.Stack{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Swap two stack objects values that matches with the both values.
            </summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
            <param name="valueToSwapFrom">Value to swap from.</param>
            <param name="valueToSwapTo">Value to swap to.</param>
            <param name="comparer">The comparison object.</param>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.MoveNext``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Move the first stack object value to the end.
            </summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.MovePrevious``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Move the last stack object value to the top.
            </summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.FindDuplicates``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Find all duplicates stack objects values.
            </summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
            <param name="comparer">The comparison object.</param>
            <returns>The duplicates stack object.</returns>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.Contains``1(System.Collections.Generic.Stack{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Check if the stack object contains the value to find.
            </summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
            <param name="valueToFind">Value to find.</param>
            <param name="comparer">The comparison object.</param>
            <returns><c>true</c> If the value was found.<c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.StackExtensions.MoveTo``1(System.Collections.Generic.Stack{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Move the stack object value to the index.
            </summary>
            <typeparam name="T">The stack object type.</typeparam>
            <param name="stack">The stack object.</param>
            <param name="valueToMove">Value to move.</param>
            <param name="index">The index where to move.</param>
            <param name="comparer">The comparison object.</param>
        </member>
        <member name="T:Terminal.Gui.TextAlignment">
            <summary>
            Text alignment enumeration, controls how text is displayed.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Left">
            <summary>
            Aligns the text to the left of the frame.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Right">
            <summary>
            Aligns the text to the right side of the frame.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Centered">
            <summary>
            Centers the text in the frame.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextAlignment.Justified">
            <summary>
            Shows the text as justified text in the frame.
            </summary>
        </member>
        <member name="T:Terminal.Gui.VerticalTextAlignment">
            <summary>
            Vertical text alignment enumeration, controls how text is displayed.
            </summary>
        </member>
        <member name="F:Terminal.Gui.VerticalTextAlignment.Top">
            <summary>
            Aligns the text to the top of the frame.
            </summary>
        </member>
        <member name="F:Terminal.Gui.VerticalTextAlignment.Bottom">
            <summary>
            Aligns the text to the bottom of the frame.
            </summary>
        </member>
        <member name="F:Terminal.Gui.VerticalTextAlignment.Middle">
            <summary>
            Centers the text verticaly in the frame.
            </summary>
        </member>
        <member name="F:Terminal.Gui.VerticalTextAlignment.Justified">
            <summary>
            Shows the text as justified text in the frame.
            </summary>
        </member>
        <member name="T:Terminal.Gui.TextDirection">
             TextDirection  [H] = Horizontal  [V] = Vertical
             =============
             LeftRight_TopBottom [H] Normal
             TopBottom_LeftRight [V] Normal
             
             RightLeft_TopBottom [H] Invert Text
             TopBottom_RightLeft [V] Invert Lines
             
             LeftRight_BottomTop [H] Invert Lines
             BottomTop_LeftRight [V] Invert Text
             
             RightLeft_BottomTop [H] Invert Text + Invert Lines
             BottomTop_RightLeft [V] Invert Text + Invert Lines
            
             <summary>
             Text direction enumeration, controls how text is displayed.
             </summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.LeftRight_TopBottom">
            <summary>
            Normal horizontal direction.
            <code>HELLO<br/>WORLD</code>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.TopBottom_LeftRight">
            <summary>
            Normal vertical direction.
            <code>H W<br/>E O<br/>L R<br/>L L<br/>O D</code>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.RightLeft_TopBottom">
            <summary>
            This is a horizontal direction. <br/> RTL
            <code>OLLEH<br/>DLROW</code>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.TopBottom_RightLeft">
            <summary>
            This is a vertical direction.
            <code>W H<br/>O E<br/>R L<br/>L L<br/>D O</code>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.LeftRight_BottomTop">
            <summary>
            This is a horizontal direction.
            <code>WORLD<br/>HELLO</code>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.BottomTop_LeftRight">
            <summary>
            This is a vertical direction.
            <code>O D<br/>L L<br/>L R<br/>E O<br/>H W</code>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.RightLeft_BottomTop">
            <summary>
            This is a horizontal direction.
            <code>DLROW<br/>OLLEH</code>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TextDirection.BottomTop_RightLeft">
            <summary>
            This is a vertical direction.
            <code>D O<br/>L L<br/>R L<br/>O E<br/>W H</code>
            </summary>
        </member>
        <member name="T:Terminal.Gui.TextFormatter">
            <summary>
            Provides text formatting capabilities for console apps. Supports, hotkeys, horizontal alignment, multiple lines, and word-based line wrap.
            </summary>
        </member>
        <member name="E:Terminal.Gui.TextFormatter.HotKeyChanged">
            <summary>
            Event invoked when the <see cref="P:Terminal.Gui.TextFormatter.HotKey"/> is changed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Text">
            <summary>
              The text to be displayed. This text is never modified.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.AutoSize">
            <summary>
            Used by <see cref="P:Terminal.Gui.TextFormatter.Text"/> to resize the view's <see cref="P:Terminal.Gui.View.Bounds"/> with the <see cref="P:Terminal.Gui.TextFormatter.Size"/>.
            Setting <see cref="P:Terminal.Gui.TextFormatter.AutoSize"/> to true only work if the <see cref="P:Terminal.Gui.View.Width"/> and <see cref="P:Terminal.Gui.View.Height"/> are null or
              <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> values and doesn't work with <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout,
              to avoid breaking the <see cref="T:Terminal.Gui.Pos"/> and <see cref="T:Terminal.Gui.Dim"/> settings.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.PreserveTrailingSpaces">
            <summary>
            Gets or sets a flag that determines whether <see cref="P:Terminal.Gui.TextFormatter.Text"/> will have trailing spaces preserved
            or not when <see cref="M:Terminal.Gui.TextFormatter.WordWrap(NStack.ustring,System.Int32,System.Boolean,System.Int32,Terminal.Gui.TextDirection)"/> is enabled. If `true` any trailing spaces will be trimmed when
            either the <see cref="P:Terminal.Gui.TextFormatter.Text"/> property is changed or when <see cref="M:Terminal.Gui.TextFormatter.WordWrap(NStack.ustring,System.Int32,System.Boolean,System.Int32,Terminal.Gui.TextDirection)"/> is set to `true`.
            The default is `false`.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Alignment">
            <summary>
            Controls the horizontal text-alignment property.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.VerticalAlignment">
            <summary>
            Controls the vertical text-alignment property. 
            </summary>
            <value>The text vertical alignment.</value>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Direction">
            <summary>
            Controls the text-direction property. 
            </summary>
            <value>The text vertical alignment.</value>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.IsHorizontalDirection(Terminal.Gui.TextDirection)">
            <summary>
            Check if it is a horizontal direction
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.IsVerticalDirection(Terminal.Gui.TextDirection)">
            <summary>
            Check if it is a vertical direction
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.IsLeftToRight(Terminal.Gui.TextDirection)">
            <summary>
            Check if it is Left to Right direction
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.IsTopToBottom(Terminal.Gui.TextDirection)">
            <summary>
            Check if it is Top to Bottom direction
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Size">
            <summary>
             Gets or sets the size of the area the text will be constrained to when formatted.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.HotKeySpecifier">
            <summary>
            The specifier character for the hotkey (e.g. '_'). Set to '\xffff' to disable hotkey support for this View instance. The default is '\xffff'.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.HotKeyPos">
            <summary>
            The position in the text of the hotkey. The hotkey will be rendered using the hot color.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.HotKey">
            <summary>
            Gets the hotkey. Will be an upper case letter or digit.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.CursorPosition">
            <summary>
            Gets the cursor position from <see cref="P:Terminal.Gui.TextFormatter.HotKey"/>. If the <see cref="P:Terminal.Gui.TextFormatter.HotKey"/> is defined, the cursor will be positioned over it.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.Lines">
            <summary>
            Gets the formatted lines.
            </summary>
            <remarks>
            <para>
            Upon a 'get' of this property, if the text needs to be formatted (if <see cref="P:Terminal.Gui.TextFormatter.NeedsFormat"/> is <c>true</c>)
            <see cref="M:Terminal.Gui.TextFormatter.Format(NStack.ustring,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,Terminal.Gui.TextDirection)"/> will be called internally. 
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextFormatter.NeedsFormat">
            <summary>
            Gets or sets whether the <see cref="T:Terminal.Gui.TextFormatter"/> needs to format the text when <see cref="M:Terminal.Gui.TextFormatter.Draw(Terminal.Gui.Rect,Terminal.Gui.Attribute,Terminal.Gui.Attribute,Terminal.Gui.Rect,System.Boolean)"/> is called.
            If it is <c>false</c> when Draw is called, the Draw call will be faster.
            </summary>
            <remarks>
            <para>
            This is set to true when the properties of <see cref="T:Terminal.Gui.TextFormatter"/> are set.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.SplitNewLine(NStack.ustring)">
            <summary>
            Splits all newlines in the <paramref name="text"/> into a list
            and supports both CRLF and LF, preserving the ending newline.
            </summary>
            <param name="text">The text.</param>
            <returns>A list of text without the newline characters.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.ClipOrPad(System.String,System.Int32)">
            <summary>
            Adds trailing whitespace or truncates <paramref name="text"/>
            so that it fits exactly <paramref name="width"/> console units.
            Note that some unicode characters take 2+ columns
            </summary>
            <param name="text"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.WordWrap(NStack.ustring,System.Int32,System.Boolean,System.Int32,Terminal.Gui.TextDirection)">
            <summary>
            Formats the provided text to fit within the width provided using word wrapping.
            </summary>
            <param name="text">The text to word wrap</param>
            <param name="width">The width to contain the text to</param>
            <param name="preserveTrailingSpaces">If <c>true</c>, the wrapped text will keep the trailing spaces.
             If <c>false</c>, the trailing spaces will be trimmed.</param>
            <param name="tabWidth">The tab width.</param>
            <param name="textDirection">The text direction.</param>
            <returns>Returns a list of word wrapped lines.</returns>
            <remarks>
            <para>
            This method does not do any justification.
            </para>
            <para>
            This method strips Newline ('\n' and '\r\n') sequences before processing.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.ClipAndJustify(NStack.ustring,System.Int32,Terminal.Gui.TextAlignment,Terminal.Gui.TextDirection)">
            <summary>
            Justifies text within a specified width. 
            </summary>
            <param name="text">The text to justify.</param>
            <param name="width">If the text length is greater that <c>width</c> it will be clipped.</param>
            <param name="talign">Alignment.</param>
            <param name="textDirection">The text direction.</param>
            <returns>Justified and clipped text.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.ClipAndJustify(NStack.ustring,System.Int32,System.Boolean,Terminal.Gui.TextDirection)">
            <summary>
            Justifies text within a specified width. 
            </summary>
            <param name="text">The text to justify.</param>
            <param name="width">If the text length is greater that <c>width</c> it will be clipped.</param>
            <param name="justify">Justify.</param>
            <param name="textDirection">The text direction.</param>
            <returns>Justified and clipped text.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Justify(NStack.ustring,System.Int32,System.Char,Terminal.Gui.TextDirection)">
            <summary>
            Justifies the text to fill the width provided. Space will be added between words (demarked by spaces and tabs) to
            make the text just fit <c>width</c>. Spaces will not be added to the ends.
            </summary>
            <param name="text"></param>
            <param name="width"></param>
            <param name="spaceChar">Character to replace whitespace and pad with. For debugging purposes.</param>
            <param name="textDirection">The text direction.</param>
            <returns>The justified text.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Format(NStack.ustring,System.Int32,Terminal.Gui.TextAlignment,System.Boolean,System.Boolean,System.Int32,Terminal.Gui.TextDirection)">
            <summary>
            Reformats text into lines, applying text alignment and optionally wrapping text to new lines on word boundaries.
            </summary>
            <param name="text"></param>
            <param name="width">The width to bound the text to for word wrapping and clipping.</param>
            <param name="talign">Specifies how the text will be aligned horizontally.</param>
            <param name="wordWrap">If <c>true</c>, the text will be wrapped to new lines as need. If <c>false</c>, forces text to fit a single line. Line breaks are converted to spaces. The text will be clipped to <c>width</c></param>
            <param name="preserveTrailingSpaces">If <c>true</c> and 'wordWrap' also true, the wrapped text will keep the trailing spaces. If <c>false</c>, the trailing spaces will be trimmed.</param>
            <param name="tabWidth">The tab width.</param>
            <param name="textDirection">The text direction.</param>
            <returns>A list of word wrapped lines.</returns>
            <remarks>
            <para>
            An empty <c>text</c> string will result in one empty line.
            </para>
            <para>
            If <c>width</c> is 0, a single, empty line will be returned.
            </para>
            <para>
            If <c>width</c> is int.MaxValue, the text will be formatted to the maximum width possible. 
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Format(NStack.ustring,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,Terminal.Gui.TextDirection)">
            <summary>
            Reformats text into lines, applying text alignment and optionally wrapping text to new lines on word boundaries.
            </summary>
            <param name="text"></param>
            <param name="width">The width to bound the text to for word wrapping and clipping.</param>
            <param name="justify">Specifies whether the text should be justified.</param>
            <param name="wordWrap">If <c>true</c>, the text will be wrapped to new lines as need. If <c>false</c>, forces text to fit a single line. Line breaks are converted to spaces. The text will be clipped to <c>width</c></param>
            <param name="preserveTrailingSpaces">If <c>true</c> and 'wordWrap' also true, the wrapped text will keep the trailing spaces. If <c>false</c>, the trailing spaces will be trimmed.</param>
            <param name="tabWidth">The tab width.</param>
            <param name="textDirection">The text direction.</param>
            <returns>A list of word wrapped lines.</returns>
            <remarks>
            <para>
            An empty <c>text</c> string will result in one empty line.
            </para>
            <para>
            If <c>width</c> is 0, a single, empty line will be returned.
            </para>
            <para>
            If <c>width</c> is int.MaxValue, the text will be formatted to the maximum width possible. 
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.MaxLines(NStack.ustring,System.Int32)">
            <summary>
            Computes the number of lines needed to render the specified text given the width.
            </summary>
            <returns>Number of lines.</returns>
            <param name="text">Text, may contain newlines.</param>
            <param name="width">The minimum width for the text.</param>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.MaxWidth(NStack.ustring,System.Int32)">
            <summary>
            Computes the maximum width needed to render the text (single line or multiple lines) given a minimum width.
            </summary>
            <returns>Max width of lines.</returns>
            <param name="text">Text, may contain newlines.</param>
            <param name="width">The minimum width for the text.</param>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.MaxWidthLine(NStack.ustring)">
            <summary>
            Determines the line with the highest width in the 
            <paramref name="text"/> if it contains newlines.
            </summary>
            <param name="text">Text, may contain newlines.</param>
            <returns>The highest line width.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetTextWidth(NStack.ustring)">
            <summary>
            Gets the total width of the passed text.
            </summary>
            <param name="text"></param>
            <returns>The text width.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetSumMaxCharWidth(System.Collections.Generic.List{NStack.ustring},System.Int32,System.Int32)">
            <summary>
            Gets the maximum characters width from the list based on the <paramref name="startIndex"/>
            and the <paramref name="length"/>.
            </summary>
            <param name="lines">The lines.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>The maximum characters width.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetSumMaxCharWidth(NStack.ustring,System.Int32,System.Int32)">
            <summary>
            Gets the maximum characters width from the text based on the <paramref name="startIndex"/>
            and the <paramref name="length"/>.
            </summary>
            <param name="text">The text.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>The maximum characters width.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetMaxLengthForWidth(NStack.ustring,System.Int32)">
            <summary>
            Gets the index position from the text based on the <paramref name="width"/>.
            </summary>
            <param name="text">The text.</param>
            <param name="width">The width.</param>
            <returns>The index of the text that fit the width.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetMaxLengthForWidth(System.Collections.Generic.List{System.Rune},System.Int32)">
            <summary>
            Gets the index position from the list based on the <paramref name="width"/>.
            </summary>
            <param name="runes">The runes.</param>
            <param name="width">The width.</param>
            <returns>The index of the list that fit the width.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.GetMaxColsForWidth(System.Collections.Generic.List{NStack.ustring},System.Int32)">
            <summary>
            Gets the index position from the list based on the <paramref name="width"/>.
            </summary>
            <param name="lines">The lines.</param>
            <param name="width">The width.</param>
            <returns>The index of the list that fit the width.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.CalcRect(System.Int32,System.Int32,NStack.ustring,Terminal.Gui.TextDirection)">
            <summary>
             Calculates the rectangle required to hold text, assuming no word wrapping.
            </summary>
            <param name="x">The x location of the rectangle</param>
            <param name="y">The y location of the rectangle</param>
            <param name="text">The text to measure</param>
            <param name="direction">The text direction.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.FindHotKey(NStack.ustring,System.Rune,System.Boolean,System.Int32@,Terminal.Gui.Key@)">
            <summary>
            Finds the hotkey and its location in text. 
            </summary>
            <param name="text">The text to look in.</param>
            <param name="hotKeySpecifier">The hotkey specifier (e.g. '_') to look for.</param>
            <param name="firstUpperCase">If <c>true</c> the legacy behavior of identifying the first upper case character as the hotkey will be enabled.
            Regardless of the value of this parameter, <c>hotKeySpecifier</c> takes precedence.</param>
            <param name="hotPos">Outputs the Rune index into <c>text</c>.</param>
            <param name="hotKey">Outputs the hotKey.</param>
            <returns><c>true</c> if a hotkey was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.ReplaceHotKeyWithTag(NStack.ustring,System.Int32)">
            <summary>
            Replaces the Rune at the index specified by the <c>hotPos</c> parameter with a tag identifying 
            it as the hotkey.
            </summary>
            <param name="text">The text to tag the hotkey in.</param>
            <param name="hotPos">The Rune index of the hotkey in <c>text</c>.</param>
            <returns>The text with the hotkey tagged.</returns>
            <remarks>
            The returned string will not render correctly without first un-doing the tag. To undo the tag, search for 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.RemoveHotKeySpecifier(NStack.ustring,System.Int32,System.Rune)">
            <summary>
            Removes the hotkey specifier from text.
            </summary>
            <param name="text">The text to manipulate.</param>
            <param name="hotKeySpecifier">The hot-key specifier (e.g. '_') to look for.</param>
            <param name="hotPos">Returns the position of the hot-key in the text. -1 if not found.</param>
            <returns>The input text with the hotkey specifier ('_') removed.</returns>
        </member>
        <member name="M:Terminal.Gui.TextFormatter.Draw(Terminal.Gui.Rect,Terminal.Gui.Attribute,Terminal.Gui.Attribute,Terminal.Gui.Rect,System.Boolean)">
            <summary>
            Draws the text held by <see cref="T:Terminal.Gui.TextFormatter"/> to <see cref="F:Terminal.Gui.Application.Driver"/> using the colors specified.
            </summary>
            <param name="bounds">Specifies the screen-relative location and maximum size for drawing the text.</param>
            <param name="normalColor">The color to use for all text except the hotkey</param>
            <param name="hotColor">The color to use to draw the hotkey</param>
            <param name="containerBounds">Specifies the screen-relative location and maximum container size.</param>
            <param name="fillRemaining">Determines if the bounds width will be used (default) or only the text width will be used.</param>
        </member>
        <member name="T:Terminal.Gui.Toplevel">
            <summary>
            Toplevel views can be modally executed. They are used for both an application's main view (filling the entire screen and
            for pop-up views such as <see cref="T:Terminal.Gui.Dialog"/>, <see cref="T:Terminal.Gui.MessageBox"/>, and <see cref="T:Terminal.Gui.Wizard"/>.
            </summary>
            <remarks>
              <para>
                Toplevels can be modally executing views, started by calling <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})"/>. 
                They return control to the caller when <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/> has 
                been called (which sets the <see cref="P:Terminal.Gui.Toplevel.Running"/> property to <c>false</c>). 
              </para>
              <para>
                A Toplevel is created when an application initializes Terminal.Gui by calling <see cref="M:Terminal.Gui.Application.Init(Terminal.Gui.ConsoleDriver,Terminal.Gui.IMainLoopDriver)"/>.
                The application Toplevel can be accessed via <see cref="P:Terminal.Gui.Application.Top"/>. Additional Toplevels can be created 
                and run (e.g. <see cref="T:Terminal.Gui.Dialog"/>s. To run a Toplevel, create the <see cref="T:Terminal.Gui.Toplevel"/> and 
                call <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})"/>.
              </para>
              <para>
                Toplevels can also opt-in to more sophisticated initialization
                by implementing <see cref="T:System.ComponentModel.ISupportInitialize"/>. When they do
                so, the <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit"/> and
                <see cref="M:System.ComponentModel.ISupportInitialize.EndInit"/> methods will be called
                before running the view.
                If first-run-only initialization is preferred, the <see cref="T:System.ComponentModel.ISupportInitializeNotification"/>
                can be implemented too, in which case the <see cref="T:System.ComponentModel.ISupportInitialize"/>
                methods will only be called if <see cref="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized"/>
                is <see langword="false"/>. This allows proper <see cref="T:Terminal.Gui.View"/> inheritance hierarchies
                to override base class layout code optimally by doing so only on first run,
                instead of on every run.
              </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Toplevel.Running">
            <summary>
            Gets or sets whether the <see cref="T:Terminal.Gui.MainLoop"/> for this <see cref="T:Terminal.Gui.Toplevel"/> is running or not. 
            </summary>
            <remarks>
               Setting this property directly is discouraged. Use <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/> instead. 
            </remarks>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Loaded">
            <summary>
            Invoked when the Toplevel <see cref="T:Terminal.Gui.Application.RunState"/> has begun to be loaded.
            A Loaded event handler is a good place to finalize initialization before calling 
            <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Ready">
            <summary>
            Invoked when the Toplevel <see cref="T:Terminal.Gui.MainLoop"/> has started it's first iteration.
            Subscribe to this event to perform tasks when the <see cref="T:Terminal.Gui.Toplevel"/> has been laid out and focus has been set.
            changes. 
            <para>A Ready event handler is a good place to finalize initialization after calling 
            <see cref="M:Terminal.Gui.Application.Run(System.Func{System.Exception,System.Boolean})"/> on this Toplevel.</para>
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Unloaded">
            <summary>
            Invoked when the Toplevel <see cref="T:Terminal.Gui.Application.RunState"/> has been unloaded.
            A Unloaded event handler is a good place to dispose objects after calling <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Activate">
            <summary>
            Invoked when the Toplevel <see cref="T:Terminal.Gui.Application.RunState"/> becomes the <see cref="P:Terminal.Gui.Application.Current"/> Toplevel.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Deactivate">
            <summary>
            Invoked when the Toplevel<see cref="T:Terminal.Gui.Application.RunState"/> ceases to be the <see cref="P:Terminal.Gui.Application.Current"/> Toplevel.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.ChildClosed">
            <summary>
            Invoked when a child of the Toplevel <see cref="T:Terminal.Gui.Application.RunState"/> is closed by  
            <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.AllChildClosed">
            <summary>
            Invoked when the last child of the Toplevel <see cref="T:Terminal.Gui.Application.RunState"/> is closed from 
            by <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Closing">
            <summary>
            Invoked when the Toplevel's <see cref="T:Terminal.Gui.Application.RunState"/> is being closed by  
            <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Closed">
            <summary>
            Invoked when the Toplevel's <see cref="T:Terminal.Gui.Application.RunState"/> is closed by <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.ChildLoaded">
            <summary>
            Invoked when a child Toplevel's <see cref="T:Terminal.Gui.Application.RunState"/> has been loaded.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.ChildUnloaded">
            <summary>
            Invoked when a cjhild Toplevel's <see cref="T:Terminal.Gui.Application.RunState"/> has been unloaded.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.Resized">
            <summary>
            Invoked when the terminal has been resized. The new <see cref="T:Terminal.Gui.Size"/> of the terminal is provided.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnLoaded">
            <summary>
            Called from <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> before the <see cref="T:Terminal.Gui.Toplevel"/> redraws for the first time. 
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnReady">
            <summary>
            Called from <see cref="M:Terminal.Gui.Application.RunLoop(Terminal.Gui.Application.RunState,System.Boolean)"/> after the <see cref="T:Terminal.Gui.Toplevel"/> has entered the 
            first iteration of the loop.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnUnloaded">
            <summary>
            Called from <see cref="M:Terminal.Gui.Application.End(Terminal.Gui.Application.RunState)"/> before the <see cref="T:Terminal.Gui.Toplevel"/> is disposed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.#ctor(Terminal.Gui.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Toplevel"/> class with the specified <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <param name="frame">A superview-relative rectangle specifying the location and size for the new Toplevel</param>
        </member>
        <member name="M:Terminal.Gui.Toplevel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Toplevel"/> class with <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout, 
            defaulting to full screen.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Toplevel.AlternateForwardKeyChanged">
            <summary>
            Invoked when the <see cref="P:Terminal.Gui.Application.AlternateForwardKey"/> is changed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnAlternateForwardKeyChanged(Terminal.Gui.Key)">
            <summary>
            Virtual method to invoke the <see cref="E:Terminal.Gui.Toplevel.AlternateForwardKeyChanged"/> event.
            </summary>
            <param name="oldKey"></param>
        </member>
        <member name="E:Terminal.Gui.Toplevel.AlternateBackwardKeyChanged">
            <summary>
            Invoked when the <see cref="P:Terminal.Gui.Application.AlternateBackwardKey"/> is changed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnAlternateBackwardKeyChanged(Terminal.Gui.Key)">
            <summary>
            Virtual method to invoke the <see cref="E:Terminal.Gui.Toplevel.AlternateBackwardKeyChanged"/> event.
            </summary>
            <param name="oldKey"></param>
        </member>
        <member name="E:Terminal.Gui.Toplevel.QuitKeyChanged">
            <summary>
            Invoked when the <see cref="P:Terminal.Gui.Application.QuitKey"/> is changed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnQuitKeyChanged(Terminal.Gui.Key)">
            <summary>
            Virtual method to invoke the <see cref="E:Terminal.Gui.Toplevel.QuitKeyChanged"/> event.
            </summary>
            <param name="oldKey"></param>
        </member>
        <member name="M:Terminal.Gui.Toplevel.Create">
            <summary>
            Convenience factory method that creates a new Toplevel with the current terminal dimensions.
            </summary>
            <returns>The created Toplevel.</returns>
        </member>
        <member name="P:Terminal.Gui.Toplevel.CanFocus">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.Toplevel"/> can focus.
            </summary>
            <value><c>true</c> if can focus; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.Toplevel.Modal">
             <summary>
             Determines whether the <see cref="T:Terminal.Gui.Toplevel"/> is modal or not. 
             If set to <c>false</c> (the default):
             
             <list type="bullet">
               <item>
            		<description><see cref="M:Terminal.Gui.Toplevel.ProcessKey(Terminal.Gui.KeyEvent)"/> events will propagate keys upwards.</description>
               </item>
               <item>
            		<description>The Toplevel will act as an embedded view (not a modal/pop-up).</description>
               </item>
             </list>
            
             If set to <c>true</c>:
             
             <list type="bullet">
               <item>
            		<description><see cref="M:Terminal.Gui.Toplevel.ProcessKey(Terminal.Gui.KeyEvent)"/> events will NOT propogate keys upwards.</description>
            	  </item>
               <item>
            		<description>The Toplevel will and look like a modal (pop-up) (e.g. see <see cref="T:Terminal.Gui.Dialog"/>.</description>
               </item>
             </list>
             </summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.MenuBar">
            <summary>
            Gets or sets the menu for this Toplevel.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.StatusBar">
            <summary>
            Gets or sets the status bar for this Toplevel.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.IsMdiContainer">
            <summary>
            Gets or sets if this Toplevel is a Mdi container.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Toplevel.IsMdiChild">
            <summary>
            Gets or sets if this Toplevel is a Mdi child.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnKeyDown(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnKeyUp(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.Add(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.Remove(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.RemoveAll">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.PositionToplevel(Terminal.Gui.Toplevel)">
            <summary>
            Virtual method enabling implementation of specific positions for inherited <see cref="T:Terminal.Gui.Toplevel"/> views.
            </summary>
            <param name="top">The toplevel.</param>
        </member>
        <member name="M:Terminal.Gui.Toplevel.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.WillPresent">
            <summary>
            Invoked by <see cref="M:Terminal.Gui.Application.Begin(Terminal.Gui.Toplevel)"/> as part of  <see cref="M:Terminal.Gui.Application.Run(Terminal.Gui.Toplevel,System.Func{System.Exception,System.Boolean})"/> 
            after the views have been laid out, and before the views are drawn for the first time.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.MoveNext">
            <summary>
            Move to the next Mdi child from the <see cref="P:Terminal.Gui.Application.MdiTop"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.MovePrevious">
            <summary>
            Move to the previous Mdi child from the <see cref="P:Terminal.Gui.Application.MdiTop"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.RequestStop">
            <summary>
            Stops and closes this <see cref="T:Terminal.Gui.Toplevel"/>. If this Toplevel is the top-most Toplevel, 
            <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/> will be called, causing the application to exit.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Toplevel.RequestStop(Terminal.Gui.Toplevel)">
            <summary>
            Stops and closes the <see cref="T:Terminal.Gui.Toplevel"/> specified by <paramref name="top"/>. If <paramref name="top"/> is the top-most Toplevel, 
            <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/> will be called, causing the application to exit.
            </summary>
            <param name="top">The toplevel to request stop.</param>
        </member>
        <member name="M:Terminal.Gui.Toplevel.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.GetTopMdiChild(System.Type,System.String[])">
            <summary>
            Gets the current visible Toplevel Mdi child that matches the arguments pattern.
            </summary>
            <param name="type">The type.</param>
            <param name="exclude">The strings to exclude.</param>
            <returns>The matched view.</returns>
        </member>
        <member name="M:Terminal.Gui.Toplevel.ShowChild(Terminal.Gui.Toplevel)">
            <summary>
            Shows the Mdi child indicated by <paramref name="top"/>, setting it as <see cref="P:Terminal.Gui.Application.Current"/>.
            </summary>
            <param name="top">The Toplevel.</param>
            <returns><c>true</c> if the toplevel can be shown or <c>false</c> if not.</returns>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Toplevel.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ToplevelEqualityComparer">
            <summary>
            Implements the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for comparing two <see cref="T:Terminal.Gui.Toplevel"/>s
            used by <see cref="T:Terminal.Gui.StackExtensions"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ToplevelEqualityComparer.Equals(Terminal.Gui.Toplevel,Terminal.Gui.Toplevel)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type <see cref="T:Terminal.Gui.Toplevel" /> to compare.</param>
            <param name="y">The second object of type <see cref="T:Terminal.Gui.Toplevel" /> to compare.</param>
            <returns>
                <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Terminal.Gui.ToplevelEqualityComparer.GetHashCode(Terminal.Gui.Toplevel)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:Terminal.Gui.Toplevel" /> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> 
            is a reference type and <paramref name="obj" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:Terminal.Gui.ToplevelComparer">
            <summary>
            Implements the <see cref="T:System.Collections.Generic.IComparer`1"/> to sort the <see cref="T:Terminal.Gui.Toplevel"/> 
            from the <see cref="P:Terminal.Gui.Application.MdiChildes"/> if needed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ToplevelComparer.Compare(Terminal.Gui.Toplevel,Terminal.Gui.Toplevel)">
            <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero
                        <paramref name="x" /> is less than <paramref name="y" />.Zero
                        <paramref name="x" /> equals <paramref name="y" />.Greater than zero
                        <paramref name="x" /> is greater than <paramref name="y" />.</returns>
        </member>
        <member name="T:Terminal.Gui.ToplevelClosingEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation for the <see cref="E:Terminal.Gui.Toplevel.Closing"/> event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ToplevelClosingEventArgs.RequestingTop">
            <summary>
            The toplevel requesting stop.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ToplevelClosingEventArgs.Cancel">
            <summary>
            Provides an event cancellation option.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ToplevelClosingEventArgs.#ctor(Terminal.Gui.Toplevel)">
            <summary>
            Initializes the event arguments with the requesting toplevel.
            </summary>
            <param name="requestingTop">The <see cref="P:Terminal.Gui.ToplevelClosingEventArgs.RequestingTop"/>.</param>
        </member>
        <member name="T:Terminal.Gui.Trees.AspectGetterDelegate`1">
            <summary>
            Delegates of this type are used to fetch string representations of user's model objects
            </summary>
            <param name="toRender">The object that is being rendered</param>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.Trees.Branch`1.IsExpanded">
            <summary>
            True if the branch is expanded to reveal child branches.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.Branch`1.Model">
            <summary>
            The users object that is being displayed by this branch of the tree.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.Branch`1.Depth">
            <summary>
            The depth of the current branch.  Depth of 0 indicates root level branches.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.Branch`1.ChildBranches">
            <summary>
            The children of the current branch.  This is null until the first call to 
            <see cref="M:Terminal.Gui.Trees.Branch`1.FetchChildren"/> to avoid enumerating the entire underlying hierarchy.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.Branch`1.Parent">
            <summary>
            The parent <see cref="T:Terminal.Gui.Trees.Branch`1"/> or null if it is a root.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.#ctor(Terminal.Gui.TreeView{`0},Terminal.Gui.Trees.Branch{`0},`0)">
            <summary>
            Declares a new branch of <paramref name="tree"/> in which the users object 
            <paramref name="model"/> is presented.
            </summary>
            <param name="tree">The UI control in which the branch resides.</param>
            <param name="parentBranchIfAny">Pass null for root level branches, otherwise
            pass the parent.</param>
            <param name="model">The user's object that should be displayed.</param>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.FetchChildren">
            <summary>
            Fetch the children of this branch. This method populates <see cref="P:Terminal.Gui.Trees.Branch`1.ChildBranches"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.GetWidth(Terminal.Gui.ConsoleDriver)">
            <summary>
            Returns the width of the line including prefix and the results 
            of <see cref="P:Terminal.Gui.TreeView`1.AspectGetter"/> (the line body).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.Draw(Terminal.Gui.ConsoleDriver,Terminal.Gui.ColorScheme,System.Int32,System.Int32)">
            <summary>
            Renders the current <see cref="P:Terminal.Gui.Trees.Branch`1.Model"/> on the specified line <paramref name="y"/>.
            </summary>
            <param name="driver"></param>
            <param name="colorScheme"></param>
            <param name="y"></param>
            <param name="availableWidth"></param>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.GetLinePrefix(Terminal.Gui.ConsoleDriver)">
            <summary>
            Gets all characters to render prior to the current branches line.  This includes indentation
            whitespace and any tree branches (if enabled).
            </summary>
            <param name="driver"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.GetParentBranches">
            <summary>
            Returns all parents starting with the immediate parent and ending at the root.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.GetExpandableSymbol(Terminal.Gui.ConsoleDriver)">
            <summary>
            Returns an appropriate symbol for displaying next to the string representation of 
            the <see cref="P:Terminal.Gui.Trees.Branch`1.Model"/> object to indicate whether it <see cref="P:Terminal.Gui.Trees.Branch`1.IsExpanded"/> or
            not (or it is a leaf).
            </summary>
            <param name="driver"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.CanExpand">
            <summary>
            Returns true if the current branch can be expanded according to 
            the <see cref="T:Terminal.Gui.Trees.TreeBuilder`1"/> or cached children already fetched.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.Expand">
            <summary>
            Expands the current branch if possible.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.Collapse">
            <summary>
            Marks the branch as collapsed (<see cref="P:Terminal.Gui.Trees.Branch`1.IsExpanded"/> false).
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.Refresh(System.Boolean)">
            <summary>
            Refreshes cached knowledge in this branch e.g. what children an object has.
            </summary>
            <param name="startAtTop">True to also refresh all <see cref="P:Terminal.Gui.Trees.Branch`1.Parent"/> 
            branches (starting with the root).</param>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.Rebuild">
            <summary>
            Calls <see cref="M:Terminal.Gui.Trees.Branch`1.Refresh(System.Boolean)"/> on the current branch and all expanded children.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.IsLast">
            <summary>
            Returns true if this branch has parents and it is the last node of it's parents 
            branches (or last root of the tree).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.IsHitOnExpandableSymbol(Terminal.Gui.ConsoleDriver,System.Int32)">
            <summary>
            Returns true if the given x offset on the branch line is the +/- symbol.  Returns 
            false if not showing expansion symbols or leaf node etc.
            </summary>
            <param name="driver"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.ExpandAll">
            <summary>
            Expands the current branch and all children branches.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.Branch`1.CollapseAll">
            <summary>
            Collapses the current branch and all children branches (even though those branches are 
            no longer visible they retain collapse/expansion state).
            </summary>
        </member>
        <member name="T:Terminal.Gui.Trees.DelegateTreeBuilder`1">
            <summary>
            Implementation of <see cref="T:Terminal.Gui.Trees.ITreeBuilder`1"/> that uses user defined functions
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.DelegateTreeBuilder`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Constructs an implementation of <see cref="T:Terminal.Gui.Trees.ITreeBuilder`1"/> that calls the user 
            defined method <paramref name="childGetter"/> to determine children
            </summary>
            <param name="childGetter"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.DelegateTreeBuilder`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`0}},System.Func{`0,System.Boolean})">
            <summary>
            Constructs an implementation of <see cref="T:Terminal.Gui.Trees.ITreeBuilder`1"/> that calls the user 
            defined method <paramref name="childGetter"/> to determine children 
            and <paramref name="canExpand"/> to determine expandability
            </summary>
            <param name="childGetter"></param>
            <param name="canExpand"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.DelegateTreeBuilder`1.CanExpand(`0)">
            <summary>
            Returns whether a node can be expanded based on the delegate passed during construction
            </summary>
            <param name="toExpand"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.DelegateTreeBuilder`1.GetChildren(`0)">
            <summary>
            Returns children using the delegate method passed during construction
            </summary>
            <param name="forObject"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Trees.ITreeBuilder`1">
            <summary>
            Interface for supplying data to a <see cref="T:Terminal.Gui.TreeView`1"/> on demand as root level nodes
            are expanded by the user
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.ITreeBuilder`1.SupportsCanExpand">
            <summary>
            Returns true if <see cref="M:Terminal.Gui.Trees.ITreeBuilder`1.CanExpand(`0)"/> is implemented by this class
            </summary>
            <value></value>
        </member>
        <member name="M:Terminal.Gui.Trees.ITreeBuilder`1.CanExpand(`0)">
            <summary>
            Returns true/false for whether a model has children.  This method should be implemented
            when <see cref="M:Terminal.Gui.Trees.ITreeBuilder`1.GetChildren(`0)"/> is an expensive operation otherwise 
            <see cref="P:Terminal.Gui.Trees.ITreeBuilder`1.SupportsCanExpand"/> should return false (in which case this method will not
            be called)
            </summary>
            <remarks>Only implement this method if you have a very fast way of determining whether 
            an object can have children e.g. checking a Type (directories can always be expanded)
            </remarks>
            <param name="toExpand"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.ITreeBuilder`1.GetChildren(`0)">
            <summary>
            Returns all children of a given <paramref name="forObject"/> which should be added to the 
            tree as new branches underneath it
            </summary>
            <param name="forObject"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Trees.ObjectActivatedEventArgs`1">
            <summary>
            Event args for the <see cref="E:Terminal.Gui.TreeView`1.ObjectActivated"/> event
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Terminal.Gui.Trees.ObjectActivatedEventArgs`1.Tree">
            <summary>
            The tree in which the activation occurred
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.Trees.ObjectActivatedEventArgs`1.ActivatedObject">
            <summary>
            The object that was selected at the time of activation
            </summary>
            <value></value>
        </member>
        <member name="M:Terminal.Gui.Trees.ObjectActivatedEventArgs`1.#ctor(Terminal.Gui.TreeView{`0},`0)">
            <summary>
            Creates a new instance documenting activation of the <paramref name="activated"/> object
            </summary>
            <param name="tree">Tree in which the activation is happening</param>
            <param name="activated">What object is being activated</param>
        </member>
        <member name="T:Terminal.Gui.Trees.SelectionChangedEventArgs`1">
            <summary>
            Event arguments describing a change in selected object in a tree view
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.SelectionChangedEventArgs`1.Tree">
            <summary>
            The view in which the change occurred
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.SelectionChangedEventArgs`1.OldValue">
            <summary>
            The previously selected value (can be null)
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.SelectionChangedEventArgs`1.NewValue">
            <summary>
            The newly selected value in the <see cref="P:Terminal.Gui.Trees.SelectionChangedEventArgs`1.Tree"/> (can be null)
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.SelectionChangedEventArgs`1.#ctor(Terminal.Gui.TreeView{`0},`0,`0)">
            <summary>
            Creates a new instance of event args describing a change of selection 
            in <paramref name="tree"/>
            </summary>
            <param name="tree"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="T:Terminal.Gui.Trees.TreeBuilder`1">
            <summary>
            Abstract implementation of <see cref="T:Terminal.Gui.Trees.ITreeBuilder`1"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.TreeBuilder`1.SupportsCanExpand">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Trees.TreeBuilder`1.CanExpand(`0)">
            <summary>
            Override this method to return a rapid answer as to whether <see cref="M:Terminal.Gui.Trees.TreeBuilder`1.GetChildren(`0)"/> 
            returns results.  If you are implementing this method ensure you passed true in base 
            constructor or set <see cref="P:Terminal.Gui.Trees.TreeBuilder`1.SupportsCanExpand"/>
            </summary>
            <param name="toExpand"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.TreeBuilder`1.GetChildren(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Trees.TreeBuilder`1.#ctor(System.Boolean)">
            <summary>
            Constructs base and initializes <see cref="P:Terminal.Gui.Trees.TreeBuilder`1.SupportsCanExpand"/>
            </summary>
            <param name="supportsCanExpand">Pass true if you intend to 
            implement <see cref="M:Terminal.Gui.Trees.TreeBuilder`1.CanExpand(`0)"/> otherwise false</param>
        </member>
        <member name="T:Terminal.Gui.Trees.ITreeNode">
            <summary>
            Interface to implement when you want the regular (non generic) <see cref="T:Terminal.Gui.TreeView"/>
            to automatically determine children for your class (without having to specify 
            an <see cref="T:Terminal.Gui.Trees.ITreeBuilder`1"/>)
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.ITreeNode.Text">
            <summary>
            Text to display when rendering the node
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.ITreeNode.Children">
            <summary>
            The children of your class which should be rendered underneath it when expanded
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.Trees.ITreeNode.Tag">
            <summary>
            Optionally allows you to store some custom data/class here.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Trees.TreeNode">
            <summary>
            Simple class for representing nodes, use with regular (non generic) <see cref="T:Terminal.Gui.TreeView"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.TreeNode.Children">
            <summary>
            Children of the current node
            </summary>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.Trees.TreeNode.Text">
            <summary>
            Text to display in tree node for current entry
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.Trees.TreeNode.Tag">
            <summary>
            Optionally allows you to store some custom data/class here.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.TreeNode.ToString">
            <summary>
            returns <see cref="P:Terminal.Gui.Trees.TreeNode.Text"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Trees.TreeNode.#ctor">
            <summary>
            Initialises a new instance with no <see cref="P:Terminal.Gui.Trees.TreeNode.Text"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.TreeNode.#ctor(System.String)">
            <summary>
            Initialises a new instance and sets starting <see cref="P:Terminal.Gui.Trees.TreeNode.Text"/>
            </summary>
        </member>
        <member name="T:Terminal.Gui.Trees.TreeNodeBuilder">
            <summary>
            <see cref="T:Terminal.Gui.Trees.ITreeBuilder`1"/> implementation for <see cref="T:Terminal.Gui.Trees.ITreeNode"/> objects
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.TreeNodeBuilder.#ctor">
            <summary>
            Initialises a new instance of builder for any model objects of 
            Type <see cref="T:Terminal.Gui.Trees.ITreeNode"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.Trees.TreeNodeBuilder.GetChildren(Terminal.Gui.Trees.ITreeNode)">
            <summary>
            Returns <see cref="P:Terminal.Gui.Trees.ITreeNode.Children"/> from <paramref name="model"/>
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Trees.TreeStyle">
            <summary>
            Defines rendering options that affect how the tree is displayed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.TreeStyle.ShowBranchLines">
            <summary>
            <see langword="true"/> to render vertical lines under expanded nodes to show which node belongs to which 
            parent. <see langword="false"/> to use only whitespace.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.Trees.TreeStyle.ExpandableSymbol">
            <summary>
            Symbol to use for branch nodes that can be expanded to indicate this to the user. 
            Defaults to '+'. Set to null to hide.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.TreeStyle.CollapseableSymbol">
            <summary>
            Symbol to use for branch nodes that can be collapsed (are currently expanded).
            Defaults to '-'. Set to null to hide.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.TreeStyle.ColorExpandSymbol">
            <summary>
            Set to <see langword="true"/> to highlight expand/collapse symbols in hot key color.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.TreeStyle.InvertExpandSymbolColors">
            <summary>
            Invert console colours used to render the expand symbol.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Trees.TreeStyle.LeaveLastRow">
            <summary>
            <see langword="true"/> to leave the last row of the control free for overwritting (e.g. by a scrollbar)
            When <see langword="true"/> scrolling will be triggered on the second last row of the control rather than.
            the last.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.Trees.TreeStyle.HighlightModelTextOnly">
            <summary>
            Set to <see langword="true"/> to cause the selected item to be rendered with only the <see cref="P:Terminal.Gui.Trees.Branch`1.Model"/> text
            to be highlighted. If <see langword="false"/> (the default), the entire row will be highlighted.
            </summary>
        </member>
        <member name="T:Terminal.Gui.LayoutStyle">
            <summary>
            Determines the LayoutStyle for a <see cref="T:Terminal.Gui.View"/>, if Absolute, during <see cref="M:Terminal.Gui.View.LayoutSubviews"/>, the
            value from the <see cref="P:Terminal.Gui.View.Frame"/> will be used, if the value is Computed, then <see cref="P:Terminal.Gui.View.Frame"/>
            will be updated from the X, Y <see cref="T:Terminal.Gui.Pos"/> objects and the Width and Height <see cref="T:Terminal.Gui.Dim"/> objects.
            </summary>
        </member>
        <member name="F:Terminal.Gui.LayoutStyle.Absolute">
            <summary>
            The position and size of the view are based on the Frame value.
            </summary>
        </member>
        <member name="F:Terminal.Gui.LayoutStyle.Computed">
            <summary>
            The position and size of the view will be computed based on the
            X, Y, Width and Height properties and set on the Frame.
            </summary>
        </member>
        <member name="T:Terminal.Gui.View">
            <summary>
            View is the base class for all views on the screen and represents a visible element that can render itself and 
            contains zero or more nested views.
            </summary>
            <remarks>
            <para>
               The View defines the base functionality for user interface elements in Terminal.Gui. Views
               can contain one or more subviews, can respond to user input and render themselves on the screen.
            </para>
            <para>
               Views supports two layout styles: <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> or <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>. 
               The choice as to which layout style is used by the View 
               is determined when the View is initialized. To create a View using Absolute layout, call a constructor that takes a
               Rect parameter to specify the absolute position and size (the View.<see cref="P:Terminal.Gui.View.Frame"/>). To create a View 
               using Computed layout use a constructor that does not take a Rect parameter and set the X, Y, Width and Height 
               properties on the view. Both approaches use coordinates that are relative to the container they are being added to. 
            </para>
            <para>
               To switch between Absolute and Computed layout, use the <see cref="P:Terminal.Gui.View.LayoutStyle"/> property. 
            </para>
            <para>
               Computed layout is more flexible and supports dynamic console apps where controls adjust layout
               as the terminal resizes or other Views change size or position. The X, Y, Width and Height 
               properties are Dim and Pos objects that dynamically update the position of a view.
               The X and Y properties are of type <see cref="T:Terminal.Gui.Pos"/>
               and you can use either absolute positions, percentages or anchor
               points. The Width and Height properties are of type
               <see cref="T:Terminal.Gui.Dim"/> and can use absolute position,
               percentages and anchors. These are useful as they will take
               care of repositioning views when view's frames are resized or
               if the terminal size changes.
            </para>
            <para>
               Absolute layout requires specifying coordinates and sizes of Views explicitly, and the
               View will typically stay in a fixed position and size. To change the position and size use the
               <see cref="P:Terminal.Gui.View.Frame"/> property.
            </para>
            <para>
               Subviews (child views) can be added to a View by calling the <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> method. 
               The container of a View can be accessed with the <see cref="P:Terminal.Gui.View.SuperView"/> property.
            </para>
            <para>
               To flag a region of the View's <see cref="P:Terminal.Gui.View.Bounds"/> to be redrawn call <see cref="M:Terminal.Gui.View.SetNeedsDisplay(Terminal.Gui.Rect)"/>. 
               To flag the entire view for redraw call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>.
            </para>
            <para>
               Views have a <see cref="P:Terminal.Gui.View.ColorScheme"/> property that defines the default colors that subviews
               should use for rendering. This ensures that the views fit in the context where
               they are being used, and allows for themes to be plugged in. For example, the
               default colors for windows and toplevels uses a blue background, while it uses
               a white background for dialog boxes and a red background for errors.
            </para>
            <para>
               Subclasses should not rely on <see cref="P:Terminal.Gui.View.ColorScheme"/> being
               set at construction time. If a <see cref="P:Terminal.Gui.View.ColorScheme"/> is not set on a view, the view will inherit the
               value from its <see cref="P:Terminal.Gui.View.SuperView"/> and the value might only be valid once a view has been
               added to a SuperView. 
            </para>
            <para>
               By using  <see cref="P:Terminal.Gui.View.ColorScheme"/> applications will work both
               in color as well as black and white displays.
            </para>
            <para>
               Views that are focusable should implement the <see cref="M:Terminal.Gui.View.PositionCursor"/> to make sure that
               the cursor is placed in a location that makes sense. Unix terminals do not have
               a way of hiding the cursor, so it can be distracting to have the cursor left at
               the last focused view. So views should make sure that they place the cursor
               in a visually sensible place.
            </para>
            <para>
               The <see cref="M:Terminal.Gui.View.LayoutSubviews"/> method is invoked when the size or layout of a view has
               changed. The default processing system will keep the size and dimensions
               for views that use the <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>, and will recompute the
               frames for the vies that use <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.Added">
            <summary>
            Event fired when a subview is being added to this view.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.Removed">
            <summary>
            Event fired when a subview is being removed from this view.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.Enter">
            <summary>
            Event fired when the view gets focus.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.Leave">
            <summary>
            Event fired when the view looses focus.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.MouseEnter">
            <summary>
            Event fired when the view receives the mouse event for the first time.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.MouseLeave">
            <summary>
            Event fired when the view receives a mouse event for the last time.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.MouseClick">
            <summary>
            Event fired when a mouse event is generated.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.CanFocusChanged">
            <summary>
            Event fired when the <see cref="P:Terminal.Gui.View.CanFocus"/> value is being changed.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.EnabledChanged">
            <summary>
            Event fired when the <see cref="P:Terminal.Gui.View.Enabled"/> value is being changed.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.VisibleChanged">
            <summary>
            Event fired when the <see cref="P:Terminal.Gui.View.Visible"/> value is being changed.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.HotKeyChanged">
            <summary>
            Event invoked when the <see cref="P:Terminal.Gui.View.HotKey"/> is changed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.HotKey">
            <summary>
            Gets or sets the HotKey defined for this view. A user pressing HotKey on the keyboard while this view has focus will cause the Clicked event to fire.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.HotKeySpecifier">
            <summary>
            Gets or sets the specifier character for the hotkey (e.g. '_'). Set to '\xffff' to disable hotkey support for this View instance. The default is '\xffff'. 
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Shortcut">
            <summary>
            This is the global setting that can be used as a global shortcut to invoke an action if provided.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.ShortcutTag">
            <summary>
            The keystroke combination used in the <see cref="P:Terminal.Gui.View.Shortcut"/> as string.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.ShortcutAction">
            <summary>
            The action to run if the <see cref="P:Terminal.Gui.View.Shortcut"/> is defined.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Data">
            <summary>
            Gets or sets arbitrary data for the view.
            </summary>
            <remarks>This property is not used internally.</remarks>
        </member>
        <member name="P:Terminal.Gui.View.Driver">
            <summary>
            Points to the current driver in use by the view, it is a convenience property
            for simplifying the development of new views.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Subviews">
            <summary>
            This returns a list of the subviews contained by this view.
            </summary>
            <value>The subviews.</value>
        </member>
        <member name="P:Terminal.Gui.View.KeyBindings">
            <summary>
            Configurable keybindings supported by the control
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.TabIndexes">
            <summary>
            This returns a tab index list of the subviews contained by this view.
            </summary>
            <value>The tabIndexes.</value>
        </member>
        <member name="P:Terminal.Gui.View.TabIndex">
            <summary>
            Indicates the index of the current <see cref="T:Terminal.Gui.View"/> from the <see cref="P:Terminal.Gui.View.TabIndexes"/> list.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.TabStop">
            <summary>
            This only be <see langword="true"/> if the <see cref="P:Terminal.Gui.View.CanFocus"/> is also <see langword="true"/> 
            and the focus can be avoided by setting this to <see langword="false"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.CanFocus">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.View.Id">
            <summary>
            Gets or sets an identifier for the view;
            </summary>
            <value>The identifier.</value>
            <remarks>The id should be unique across all Views that share a SuperView.</remarks>
        </member>
        <member name="P:Terminal.Gui.View.IsCurrentTop">
            <summary>
            Returns a value indicating if this View is currently on Top (Active)
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.WantMousePositionReports">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.View"/> wants mouse position reports.
            </summary>
            <value><see langword="true"/> if want mouse position reports; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Terminal.Gui.View.WantContinuousButtonPressed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.View"/> want continuous button pressed event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Frame">
            <summary>
            Gets or sets the frame for the view. The frame is relative to the view's container (<see cref="P:Terminal.Gui.View.SuperView"/>).
            </summary>
            <value>The frame.</value>
            <remarks>
            <para>
               Change the Frame when using the <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout style to move or resize views. 
            </para>
            <para>
               Altering the Frame of a view will trigger the redrawing of the
               view as well as the redrawing of the affected regions of the <see cref="P:Terminal.Gui.View.SuperView"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.LayoutStyle">
            <summary>
            Controls how the View's <see cref="P:Terminal.Gui.View.Frame"/> is computed during the LayoutSubviews method, if the style is set to
            <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>, 
            LayoutSubviews does not change the <see cref="P:Terminal.Gui.View.Frame"/>. If the style is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
            the <see cref="P:Terminal.Gui.View.Frame"/> is updated using
            the <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties.
            </summary>
            <value>The layout style.</value>
        </member>
        <member name="P:Terminal.Gui.View.Bounds">
            <summary>
            The bounds represent the View-relative rectangle used for this view; the area inside of the view.
            </summary>
            <value>The bounds.</value>
            <remarks>
            <para>
            Updates to the Bounds update the <see cref="P:Terminal.Gui.View.Frame"/>,
            and has the same side effects as updating the <see cref="P:Terminal.Gui.View.Frame"/>.
            </para>
            <para>
            Because <see cref="P:Terminal.Gui.View.Bounds"/> coordinates are relative to the upper-left corner of the <see cref="T:Terminal.Gui.View"/>, 
            the coordinates of the upper-left corner of the rectangle returned by this property are (0,0). 
            Use this property to obtain the size and coordinates of the client area of the 
            control for tasks such as drawing on the surface of the control.
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.X">
            <summary>
            Gets or sets the X position for the view (the column). Only used if the <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </summary>
            <value>The X Position.</value>
            <remarks>
            If <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> changing this property has no effect and its value is indeterminate. 
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Y">
            <summary>
            Gets or sets the Y position for the view (the row). Only used if the <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </summary>
            <value>The y position (line).</value>
            <remarks>
            If <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> changing this property has no effect and its value is indeterminate. 
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Width">
            <summary>
            Gets or sets the width of the view. Only used the <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </summary>
            <value>The width.</value>
            <remarks>
            If <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> changing this property has no effect and its value is indeterminate. 
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Height">
            <summary>
            Gets or sets the height of the view. Only used the <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </summary>
            <value>The height.</value>
            If <see cref="P:Terminal.Gui.View.LayoutStyle"/> is <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> changing this property has no effect and its value is indeterminate. 
        </member>
        <member name="P:Terminal.Gui.View.ForceValidatePosDim">
            <summary>
            Forces validation with <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout
             to avoid breaking the <see cref="T:Terminal.Gui.Pos"/> and <see cref="T:Terminal.Gui.Dim"/> settings.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.GetMinWidthHeight(Terminal.Gui.Size@)">
            <summary>
            Verifies if the minimum width or height can be sets in the view.
            </summary>
            <param name="size">The size.</param>
            <returns><see langword="true"/> if the size can be set, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.SetMinWidthHeight">
            <summary>
            Sets the minimum width or height if the view can be resized.
            </summary>
            <returns><see langword="true"/> if the size can be set, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Terminal.Gui.View.TextFormatter">
            <summary>
            Gets or sets the <see cref="T:Terminal.Gui.TextFormatter"/> which can be handled differently by any derived class.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.SuperView">
            <summary>
            Returns the container for this view, or null if this view has not been added to a container.
            </summary>
            <value>The super view.</value>
        </member>
        <member name="M:Terminal.Gui.View.#ctor(Terminal.Gui.Rect)">
            <summary>
            Initializes a new instance of a <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> <see cref="T:Terminal.Gui.View"/> class with the absolute
            dimensions specified in the <see langword="frame"/> parameter. 
            </summary>
            <param name="frame">The region covered by this view.</param>
            <remarks>
            This constructor initialize a View with a <see cref="P:Terminal.Gui.View.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>.
            Use <see cref="T:Terminal.Gui.View"/> to initialize a View with  <see cref="P:Terminal.Gui.View.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.#ctor">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.View"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <remarks>
            <para>
              Use <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties to dynamically control the size and location of the view.
              The <see cref="T:Terminal.Gui.View"/> will be created using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
              coordinates. The initial size (<see cref="P:Terminal.Gui.View.Frame"/>) will be 
              adjusted to fit the contents of <see cref="P:Terminal.Gui.View.Text"/>, including newlines ('\n') for multiple lines. 
            </para>
            <para>
              If <see cref="P:Terminal.Gui.View.Height"/> is greater than one, word wrapping is provided.
            </para>
            <para>
              This constructor initialize a View with a <see cref="P:Terminal.Gui.View.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>. 
              Use <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties to dynamically control the size and location of the view.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.#ctor(System.Int32,System.Int32,NStack.ustring)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.View"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Terminal.Gui.View"/> will be created at the given
              coordinates with the given string. The size (<see cref="P:Terminal.Gui.View.Frame"/>) will be 
              adjusted to fit the contents of <see cref="P:Terminal.Gui.View.Text"/>, including newlines ('\n') for multiple lines. 
            </para>
            <para>
              No line wrapping is provided.
            </para>
            </remarks>
            <param name="x">column to locate the View.</param>
            <param name="y">row to locate the View.</param>
            <param name="text">text to initialize the <see cref="P:Terminal.Gui.View.Text"/> property with.</param>
        </member>
        <member name="M:Terminal.Gui.View.#ctor(Terminal.Gui.Rect,NStack.ustring,Terminal.Gui.Border)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.View"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Terminal.Gui.View"/> will be created at the given
              coordinates with the given string. The initial size (<see cref="P:Terminal.Gui.View.Frame"/>) will be 
              adjusted to fit the contents of <see cref="P:Terminal.Gui.View.Text"/>, including newlines ('\n') for multiple lines. 
            </para>
            <para>
              If <c>rect.Height</c> is greater than one, word wrapping is provided.
            </para>
            </remarks>
            <param name="rect">Location.</param>
            <param name="text">text to initialize the <see cref="P:Terminal.Gui.View.Text"/> property with.</param>
            <param name="border">The <see cref="P:Terminal.Gui.View.Border"/>.</param>
        </member>
        <member name="M:Terminal.Gui.View.#ctor(NStack.ustring,Terminal.Gui.TextDirection,Terminal.Gui.Border)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.View"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Terminal.Gui.View"/> will be created using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>
              coordinates with the given string. The initial size (<see cref="P:Terminal.Gui.View.Frame"/>) will be 
              adjusted to fit the contents of <see cref="P:Terminal.Gui.View.Text"/>, including newlines ('\n') for multiple lines. 
            </para>
            <para>
              If <see cref="P:Terminal.Gui.View.Height"/> is greater than one, word wrapping is provided.
            </para>
            </remarks>
            <param name="text">text to initialize the <see cref="P:Terminal.Gui.View.Text"/> property with.</param>
            <param name="direction">The text direction.</param>
            <param name="border">The <see cref="P:Terminal.Gui.View.Border"/>.</param>
        </member>
        <member name="M:Terminal.Gui.View.UpdateTextFormatterText">
            <summary>
            Can be overridden if the <see cref="P:Terminal.Gui.TextFormatter.Text"/> has
             different format than the default.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ProcessResizeView">
            <summary>
            Can be overridden if the view resize behavior is
             different than the default.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.SetNeedsDisplay">
            <summary>
            Sets a flag indicating this view needs to be redisplayed because its state has changed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ClearLayoutNeeded">
            <summary>
            Removes the <see cref="M:Terminal.Gui.View.SetNeedsLayout"/> setting on this view.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.SetNeedsDisplay(Terminal.Gui.Rect)">
            <summary>
            Flags the view-relative region on this View as needing to be repainted.
            </summary>
            <param name="region">The view-relative region that must be flagged for repaint.</param>
        </member>
        <member name="M:Terminal.Gui.View.SetChildNeedsDisplay">
            <summary>
            Indicates that any child views (in the <see cref="P:Terminal.Gui.View.Subviews"/> list) need to be repainted.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.Add(Terminal.Gui.View)">
            <summary>
              Adds a subview (child) to this view.
            </summary>
            <remarks>
            The Views that have been added to this view can be retrieved via the <see cref="P:Terminal.Gui.View.Subviews"/> property. 
            See also <seealso cref="M:Terminal.Gui.View.Remove(Terminal.Gui.View)"/> <seealso cref="M:Terminal.Gui.View.RemoveAll"/> 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.Add(Terminal.Gui.View[])">
            <summary>
            Adds the specified views (children) to the view.
            </summary>
            <param name="views">Array of one or more views (can be optional parameter).</param>
            <remarks>
            The Views that have been added to this view can be retrieved via the <see cref="P:Terminal.Gui.View.Subviews"/> property. 
            See also <seealso cref="M:Terminal.Gui.View.Remove(Terminal.Gui.View)"/> <seealso cref="M:Terminal.Gui.View.RemoveAll"/> 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.RemoveAll">
            <summary>
              Removes all subviews (children) added via <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> or <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View[])"/> from this View.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.Remove(Terminal.Gui.View)">
            <summary>
              Removes a subview added via <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> or <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View[])"/> from this View.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)">
            <summary>
            Brings the specified subview to the front so it is drawn on top of any other views.
            </summary>
            <param name="subview">The subview to send to the front</param>
            <remarks>
              <seealso cref="M:Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.SendSubviewToBack(Terminal.Gui.View)">
            <summary>
            Sends the specified subview to the front so it is the first view drawn
            </summary>
            <param name="subview">The subview to send to the front</param>
            <remarks>
              <seealso cref="M:Terminal.Gui.View.BringSubviewToFront(Terminal.Gui.View)"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.SendSubviewBackwards(Terminal.Gui.View)">
            <summary>
            Moves the subview backwards in the hierarchy, only one step
            </summary>
            <param name="subview">The subview to send backwards</param>
            <remarks>
            If you want to send the view all the way to the back use SendSubviewToBack.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.BringSubviewForward(Terminal.Gui.View)">
            <summary>
            Moves the subview backwards in the hierarchy, only one step
            </summary>
            <param name="subview">The subview to send backwards</param>
            <remarks>
            If you want to send the view all the way to the back use SendSubviewToBack.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.Clear">
            <summary>
              Clears the view region with the current color.
            </summary>
            <remarks>
              <para>
                This clears the entire region used by this view.
              </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.Clear(Terminal.Gui.Rect)">
            <summary>
              Clears the specified region with the current color. 
            </summary>
            <remarks>
            </remarks>
            <param name="regionScreen">The screen-relative region to clear.</param>
        </member>
        <member name="M:Terminal.Gui.View.ViewToScreen(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Converts a view-relative (col,row) position to a screen-relative position (col,row). The values are optionally clamped to the screen dimensions.
            </summary>
            <param name="col">View-relative column.</param>
            <param name="row">View-relative row.</param>
            <param name="rcol">Absolute column; screen-relative.</param>
            <param name="rrow">Absolute row; screen-relative.</param>
            <param name="clipped">Whether to clip the result of the ViewToScreen method, if set to <see langword="true"/>, the rcol, rrow values are clamped to the screen (terminal) dimensions (0..TerminalDim-1).</param>
        </member>
        <member name="M:Terminal.Gui.View.ScreenToView(System.Int32,System.Int32)">
            <summary>
            Converts a point from screen-relative coordinates to view-relative coordinates.
            </summary>
            <returns>The mapped point.</returns>
            <param name="x">X screen-coordinate point.</param>
            <param name="y">Y screen-coordinate point.</param>
        </member>
        <member name="M:Terminal.Gui.View.ViewToScreen(Terminal.Gui.Rect)">
            <summary>
            Converts a region in view-relative coordinates to screen-relative coordinates.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ClipToBounds">
            <summary>
            Sets the <see cref="T:Terminal.Gui.ConsoleDriver"/>'s clip region to the current View's <see cref="P:Terminal.Gui.View.Bounds"/>.
            </summary>
            <returns>The existing driver's clip region, which can be then re-applied by setting <c><see cref="P:Terminal.Gui.View.Driver"/>.Clip</c> (<see cref="P:Terminal.Gui.ConsoleDriver.Clip"/>).</returns>
            <remarks>
            <see cref="P:Terminal.Gui.View.Bounds"/> is View-relative.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.SetClip(Terminal.Gui.Rect)">
            <summary>
            Sets the clip region to the specified view-relative region.
            </summary>
            <returns>The previous screen-relative clip region.</returns>
            <param name="region">View-relative clip region.</param>
        </member>
        <member name="M:Terminal.Gui.View.DrawFrame(Terminal.Gui.Rect,System.Int32,System.Boolean)">
            <summary>
            Draws a frame in the current view, clipped by the boundary of this view
            </summary>
            <param name="region">View-relative region for the frame to be drawn.</param>
            <param name="padding">The padding to add around the outside of the drawn frame.</param>
            <param name="fill">If set to <see langword="true"/> it fill will the contents.</param>
        </member>
        <member name="M:Terminal.Gui.View.DrawHotString(NStack.ustring,Terminal.Gui.Attribute,Terminal.Gui.Attribute)">
            <summary>
            Utility function to draw strings that contain a hotkey.
            </summary>
            <param name="text">String to display, the hotkey specifier before a letter flags the next letter as the hotkey.</param>
            <param name="hotColor">Hot color.</param>
            <param name="normalColor">Normal color.</param>
            <remarks>
            <para>The hotkey is any character following the hotkey specifier, which is the underscore ('_') character by default.</para>
            <para>The hotkey specifier can be changed via <see cref="P:Terminal.Gui.View.HotKeySpecifier"/></para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.DrawHotString(NStack.ustring,System.Boolean,Terminal.Gui.ColorScheme)">
            <summary>
            Utility function to draw strings that contains a hotkey using a <see cref="P:Terminal.Gui.View.ColorScheme"/> and the "focused" state.
            </summary>
            <param name="text">String to display, the underscore before a letter flags the next letter as the hotkey.</param>
            <param name="focused">If set to <see langword="true"/> this uses the focused colors from the color scheme, otherwise the regular ones.</param>
            <param name="scheme">The color scheme to use.</param>
        </member>
        <member name="M:Terminal.Gui.View.Move(System.Int32,System.Int32,System.Boolean)">
            <summary>
            This moves the cursor to the specified column and row in the view.
            </summary>
            <returns>The move.</returns>
            <param name="col">Col.</param>
            <param name="row">Row.</param>
            <param name="clipped">Whether to clip the result of the ViewToScreen method,
             if set to <see langword="true"/>, the col, row values are clamped to the screen (terminal) dimensions (0..TerminalDim-1).</param>
        </member>
        <member name="M:Terminal.Gui.View.PositionCursor">
            <summary>
              Positions the cursor in the right position based on the currently focused view in the chain.
            </summary>
               Views that are focusable should override <see cref="M:Terminal.Gui.View.PositionCursor"/> to ensure
               the cursor is placed in a location that makes sense. Unix terminals do not have
               a way of hiding the cursor, so it can be distracting to have the cursor left at
               the last focused view. Views should make sure that they place the cursor
               in a visually sensible place.
        </member>
        <member name="P:Terminal.Gui.View.HasFocus">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.View.FocusEventArgs">
            <summary>
            Defines the event arguments for <see cref="M:Terminal.Gui.View.SetFocus(Terminal.Gui.View)"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.FocusEventArgs.#ctor(Terminal.Gui.View)">
            <summary>
            Constructs.
            </summary>
            <param name="view">The view that gets or loses focus.</param>
        </member>
        <member name="P:Terminal.Gui.View.FocusEventArgs.Handled">
            <summary>
            Indicates if the current focus event has already been processed and the driver should stop notifying any other event subscriber.
            Its important to set this value to true specially when updating any View's layout from inside the subscriber method.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.FocusEventArgs.View">
            <summary>
            Indicates the current view that gets or loses focus.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnAdded(Terminal.Gui.View)">
            <summary>
            Method invoked when a subview is being added to this view.
            </summary>
            <param name="view">The subview being added.</param>
        </member>
        <member name="M:Terminal.Gui.View.OnRemoved(Terminal.Gui.View)">
            <summary>
            Method invoked when a subview is being removed from this view.
            </summary>
            <param name="view">The subview being removed.</param>
        </member>
        <member name="M:Terminal.Gui.View.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.View.Focused">
            <summary>
            Returns the currently focused view inside this view, or null if nothing is focused.
            </summary>
            <value>The focused.</value>
        </member>
        <member name="P:Terminal.Gui.View.MostFocused">
            <summary>
            Returns the most focused view in the chain of subviews (the leaf view that has the focus).
            </summary>
            <value>The most focused View.</value>
        </member>
        <member name="P:Terminal.Gui.View.ColorScheme">
            <summary>
            The color scheme for this view, if it is not defined, it returns the <see cref="P:Terminal.Gui.View.SuperView"/>'s
            color scheme.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.AddRune(System.Int32,System.Int32,System.Rune)">
            <summary>
            Displays the specified character in the specified column and row of the View.
            </summary>
            <param name="col">Column (view-relative).</param>
            <param name="row">Row (view-relative).</param>
            <param name="ch">Ch.</param>
        </member>
        <member name="M:Terminal.Gui.View.ClearNeedsDisplay">
            <summary>
            Removes the <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/> and the <see cref="P:Terminal.Gui.View.ChildNeedsDisplay"/> setting on this view.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.Redraw(Terminal.Gui.Rect)">
            <summary>
            Redraws this view and its subviews; only redraws the views that have been flagged for a re-display.
            </summary>
            <param name="bounds">The bounds (view-relative region) to redraw.</param>
            <remarks>
            <para>
               Always use <see cref="P:Terminal.Gui.View.Bounds"/> (view-relative) when calling <see cref="M:Terminal.Gui.View.Redraw(Terminal.Gui.Rect)"/>, NOT <see cref="P:Terminal.Gui.View.Frame"/> (superview-relative).
            </para>
            <para>
               Views should set the color that they want to use on entry, as otherwise this will inherit
               the last color that was set globally on the driver.
            </para>
            <para>
               Overrides of <see cref="M:Terminal.Gui.View.Redraw(Terminal.Gui.Rect)"/> must ensure they do not set <c>Driver.Clip</c> to a clip region
               larger than the <ref name="bounds"/> parameter, as this will cause the driver to clip the entire region.
            </para>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.DrawContent">
            <summary>
            Event invoked when the content area of the View is to be drawn.
            </summary>
            <remarks>
            <para>
            Will be invoked before any subviews added with <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> have been drawn.
            </para>
            <para>
            Rect provides the view-relative rectangle describing the currently visible viewport into the <see cref="T:Terminal.Gui.View"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.OnDrawContent(Terminal.Gui.Rect)">
            <summary>
            Enables overrides to draw infinitely scrolled content and/or a background behind added controls. 
            </summary>
            <param name="viewport">The view-relative rectangle describing the currently visible viewport into the <see cref="T:Terminal.Gui.View"/></param>
            <remarks>
            This method will be called before any subviews added with <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/> have been drawn. 
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.DrawContentComplete">
            <summary>
            Event invoked when the content area of the View is completed drawing.
            </summary>
            <remarks>
            <para>
            Will be invoked after any subviews removed with <see cref="M:Terminal.Gui.View.Remove(Terminal.Gui.View)"/> have been completed drawing.
            </para>
            <para>
            Rect provides the view-relative rectangle describing the currently visible viewport into the <see cref="T:Terminal.Gui.View"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.OnDrawContentComplete(Terminal.Gui.Rect)">
            <summary>
            Enables overrides after completed drawing infinitely scrolled content and/or a background behind removed controls.
            </summary>
            <param name="viewport">The view-relative rectangle describing the currently visible viewport into the <see cref="T:Terminal.Gui.View"/></param>
            <remarks>
            This method will be called after any subviews removed with <see cref="M:Terminal.Gui.View.Remove(Terminal.Gui.View)"/> have been completed drawing.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.SetFocus(Terminal.Gui.View)">
            <summary>
            Causes the specified subview to have focus.
            </summary>
            <param name="view">View.</param>
        </member>
        <member name="M:Terminal.Gui.View.SetFocus">
            <summary>
            Causes the specified view and the entire parent hierarchy to have the focused order updated.
            </summary>
        </member>
        <member name="T:Terminal.Gui.View.KeyEventEventArgs">
            <summary>
            Defines the event arguments for <see cref="P:Terminal.Gui.View.KeyEventEventArgs.KeyEvent"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.KeyEventEventArgs.#ctor(Terminal.Gui.KeyEvent)">
            <summary>
            Constructs.
            </summary>
            <param name="ke"></param>
        </member>
        <member name="P:Terminal.Gui.View.KeyEventEventArgs.KeyEvent">
            <summary>
            The <see cref="P:Terminal.Gui.View.KeyEventEventArgs.KeyEvent"/> for the event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.KeyEventEventArgs.Handled">
            <summary>
            Indicates if the current Key event has already been processed and the driver should stop notifying any other event subscriber.
            Its important to set this value to true specially when updating any View's layout from inside the subscriber method.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.KeyPress">
            <summary>
            Invoked when a character key is pressed and occurs after the key up event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.InvokeKeybindings(Terminal.Gui.KeyEvent)">
            <summary>
            Invokes any binding that is registered on this <see cref="T:Terminal.Gui.View"/>
            and matches the <paramref name="keyEvent"/>
            </summary>
            <param name="keyEvent">The key event passed.</param>
        </member>
        <member name="M:Terminal.Gui.View.AddKeyBinding(Terminal.Gui.Key,Terminal.Gui.Command[])">
            <summary>
            <para>Adds a new key combination that will trigger the given <paramref name="command"/>
            (if supported by the View - see <see cref="M:Terminal.Gui.View.GetSupportedCommands"/>)
            </para>
            <para>If the key is already bound to a different <see cref="T:Terminal.Gui.Command"/> it will be
            rebound to this one</para>
            <remarks>Commands are only ever applied to the current <see cref="T:Terminal.Gui.View"/>(i.e. this feature
            cannot be used to switch focus to another view and perform multiple commands there) </remarks>
            </summary>
            <param name="key"></param>
            <param name="command">The command(s) to run on the <see cref="T:Terminal.Gui.View"/> when <paramref name="key"/> is pressed.
            When specifying multiple commands, all commands will be applied in sequence. The bound <paramref name="key"/> strike
            will be consumed if any took effect.</param>
        </member>
        <member name="M:Terminal.Gui.View.ReplaceKeyBinding(Terminal.Gui.Key,Terminal.Gui.Key)">
            <summary>
            Replaces a key combination already bound to <see cref="T:Terminal.Gui.Command"/>.
            </summary>
            <param name="fromKey">The key to be replaced.</param>
            <param name="toKey">The new key to be used.</param>
        </member>
        <member name="M:Terminal.Gui.View.ContainsKeyBinding(Terminal.Gui.Key)">
            <summary>
            Checks if the key binding already exists.
            </summary>
            <param name="key">The key to check.</param>
            <returns><see langword="true"/> If the key already exist, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.ClearKeybindings">
            <summary>
            Removes all bound keys from the View and resets the default bindings.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ClearKeybinding(Terminal.Gui.Key)">
            <summary>
            Clears the existing keybinding (if any) for the given <paramref name="key"/>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Terminal.Gui.View.ClearKeybinding(Terminal.Gui.Command[])">
            <summary>
            Removes all key bindings that trigger the given command. Views can have multiple different
            keys bound to the same command and this method will clear all of them.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Terminal.Gui.View.AddCommand(Terminal.Gui.Command,System.Func{System.Nullable{System.Boolean}})">
            <summary>
            <para>States that the given <see cref="T:Terminal.Gui.View"/> supports a given <paramref name="command"/>
            and what <paramref name="f"/> to perform to make that command happen
            </para>
            <para>If the <paramref name="command"/> already has an implementation the <paramref name="f"/>
            will replace the old one</para>
            </summary>
            <param name="command">The command.</param>
            <param name="f">The function.</param>
        </member>
        <member name="M:Terminal.Gui.View.GetSupportedCommands">
            <summary>
            Returns all commands that are supported by this <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.View.GetKeyFromCommand(Terminal.Gui.Command[])">
            <summary>
            Gets the key used by a command.
            </summary>
            <param name="command">The command to search.</param>
            <returns>The <see cref="T:Terminal.Gui.Key"/> used by a <see cref="T:Terminal.Gui.Command"/></returns>
        </member>
        <member name="M:Terminal.Gui.View.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.View.KeyDown">
            <summary>
            Invoked when a key is pressed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnKeyDown(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.View.KeyUp">
            <summary>
            Invoked when a key is released.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnKeyUp(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.EnsureFocus">
            <summary>
            Finds the first view in the hierarchy that wants to get the focus if nothing is currently focused, otherwise, does nothing.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.FocusFirst">
            <summary>
            Focuses the first focusable subview if one exists.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.FocusLast">
            <summary>
            Focuses the last focusable subview if one exists.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.FocusPrev">
            <summary>
            Focuses the previous view.
            </summary>
            <returns><see langword="true"/> if previous was focused, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.FocusNext">
            <summary>
            Focuses the next view.
            </summary>
            <returns><see langword="true"/> if next was focused, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.SetRelativeLayout(Terminal.Gui.Rect)">
            <summary>
            Sets the View's <see cref="P:Terminal.Gui.View.Frame"/> to the relative coordinates if its container, given the <see cref="P:Terminal.Gui.View.Frame"/> for its container.
            </summary>
            <param name="hostFrame">The screen-relative frame for the host.</param>
            <remarks>
            Reminder: <see cref="P:Terminal.Gui.View.Frame"/> is superview-relative; <see cref="P:Terminal.Gui.View.Bounds"/> is view-relative.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.View.LayoutEventArgs">
            <summary>
            Event arguments for the <see cref="E:Terminal.Gui.View.LayoutComplete"/> event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.LayoutEventArgs.OldBounds">
            <summary>
            The view-relative bounds of the <see cref="T:Terminal.Gui.View"/> before it was laid out.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.LayoutStarted">
            <summary>
            Fired after the View's <see cref="M:Terminal.Gui.View.LayoutSubviews"/> method has completed. 
            </summary>
            <remarks>
            Subscribe to this event to perform tasks when the <see cref="T:Terminal.Gui.View"/> has been resized or the layout has otherwise changed.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.View.OnLayoutStarted(Terminal.Gui.View.LayoutEventArgs)">
            <summary>
            Raises the <see cref="E:Terminal.Gui.View.LayoutStarted"/> event. Called from  <see cref="M:Terminal.Gui.View.LayoutSubviews"/> before any subviews have been laid out.
            </summary>
        </member>
        <member name="E:Terminal.Gui.View.LayoutComplete">
            <summary>
            Fired after the View's <see cref="M:Terminal.Gui.View.LayoutSubviews"/> method has completed. 
            </summary>
            <remarks>
            Subscribe to this event to perform tasks when the <see cref="T:Terminal.Gui.View"/> has been resized or the layout has otherwise changed.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.View.Initialized">
            <summary>
            Event called only once when the <see cref="T:Terminal.Gui.View"/> is being initialized for the first time.
            Allows configurations and assignments to be performed before the <see cref="T:Terminal.Gui.View"/> being shown.
            This derived from <see cref="T:System.ComponentModel.ISupportInitializeNotification"/> to allow notify all the views that are being initialized.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnLayoutComplete(Terminal.Gui.View.LayoutEventArgs)">
            <summary>
            Raises the <see cref="E:Terminal.Gui.View.LayoutComplete"/> event. Called from  <see cref="M:Terminal.Gui.View.LayoutSubviews"/> before all sub-views have been laid out.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.LayoutSubviews">
            <summary>
            Invoked when a view starts executing or when the dimensions of the view have changed, for example in
            response to the container view or terminal resizing.
            </summary>
            <remarks>
            Calls <see cref="M:Terminal.Gui.View.OnLayoutComplete(Terminal.Gui.View.LayoutEventArgs)"/> (which raises the <see cref="E:Terminal.Gui.View.LayoutComplete"/> event) before it returns.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.Text">
            <summary>
              The text displayed by the <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <remarks>
            <para>
             If provided, the text will be drawn before any subviews are drawn.
            </para>
            <para>
             The text will be drawn starting at the view origin (0, 0) and will be formatted according
             to the <see cref="P:Terminal.Gui.View.TextAlignment"/> property. If the view's height is greater than 1, the
             text will word-wrap to additional lines if it does not fit horizontally. If the view's height
             is 1, the text will be clipped.
            </para>
            <para>
             Set the <see cref="P:Terminal.Gui.View.HotKeySpecifier"/> to enable hotkey support. To disable hotkey support set <see cref="P:Terminal.Gui.View.HotKeySpecifier"/> to
             <c>(Rune)0xffff</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.View.AutoSize">
            <summary>
            Gets or sets a flag that determines whether the View will be automatically resized to fit the <see cref="P:Terminal.Gui.View.Text"/>.
            The default is <see langword="false"/>. Set to <see langword="true"/> to turn on AutoSize. If <see cref="P:Terminal.Gui.View.AutoSize"/> is <see langword="true"/> the <see cref="P:Terminal.Gui.View.Width"/>
            and <see cref="P:Terminal.Gui.View.Height"/> will always be used if the text size is lower. If the text size is higher the bounds will
            be resized to fit it.
            In addition, if <see cref="P:Terminal.Gui.View.ForceValidatePosDim"/> is <see langword="true"/> the new values of <see cref="P:Terminal.Gui.View.Width"/> and
            <see cref="P:Terminal.Gui.View.Height"/> must be of the same types of the existing one to avoid breaking the <see cref="T:Terminal.Gui.Dim"/> settings.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.PreserveTrailingSpaces">
            <summary>
            Gets or sets a flag that determines whether <see cref="P:Terminal.Gui.TextFormatter.Text"/> will have trailing spaces preserved
            or not when <see cref="M:Terminal.Gui.TextFormatter.WordWrap(NStack.ustring,System.Int32,System.Boolean,System.Int32,Terminal.Gui.TextDirection)"/> is enabled. If <see langword="true"/> 
            any trailing spaces will be trimmed when either the <see cref="P:Terminal.Gui.View.Text"/> property is changed or 
            when <see cref="M:Terminal.Gui.TextFormatter.WordWrap(NStack.ustring,System.Int32,System.Boolean,System.Int32,Terminal.Gui.TextDirection)"/> is set to <see langword="true"/>.
            The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.TextAlignment">
            <summary>
            Gets or sets how the View's <see cref="P:Terminal.Gui.View.Text"/> is aligned horizontally when drawn. Changing this property will redisplay the <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Terminal.Gui.View.VerticalTextAlignment">
            <summary>
            Gets or sets how the View's <see cref="P:Terminal.Gui.View.Text"/> is aligned vertically when drawn. Changing this property will redisplay the <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Terminal.Gui.View.TextDirection">
            <summary>
            Gets or sets the direction of the View's <see cref="P:Terminal.Gui.View.Text"/>. Changing this property will redisplay the <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="P:Terminal.Gui.View.IsInitialized">
            <summary>
            Get or sets if  the <see cref="T:Terminal.Gui.View"/> was already initialized.
            This derived from <see cref="T:System.ComponentModel.ISupportInitializeNotification"/> to allow notify all the views that are being initialized.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.IsAdded">
            <summary>
            Gets information if the view was already added to the <see cref="P:Terminal.Gui.View.SuperView"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Enabled">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.View.ClearOnVisibleFalse">
            <summary>
            Gets or sets whether a view is cleared if the <see cref="P:Terminal.Gui.View.Visible"/> property is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.Visible">
            <inheritdoc/>>
        </member>
        <member name="P:Terminal.Gui.View.Border">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.View.IgnoreBorderPropertyOnRedraw">
            <summary>
            Get or sets whether the view will use <see cref="T:Terminal.Gui.Border"/> (if <see cref="P:Terminal.Gui.View.Border"/> is set) to draw 
            a border. If <see langword="false"/> (the default),
            <see cref="M:Terminal.Gui.View.Redraw(Terminal.Gui.Rect)"/> will call <see cref="M:Terminal.Gui.Border.DrawContent(Terminal.Gui.View,System.Boolean)"/>
            to draw the view's border. If <see langword="true"/> no border is drawn (and the view is expected to draw the border
            itself).
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.ToString">
            <summary>
            Pretty prints the View
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.View.GetAutoSize">
            <summary>
            Gets the size to fit all text if <see cref="P:Terminal.Gui.View.AutoSize"/> is true.
            </summary>
            <returns>The <see cref="T:Terminal.Gui.Size"/></returns>
        </member>
        <member name="M:Terminal.Gui.View.GetHotKeySpecifierLength(System.Boolean)">
            <summary>
            Get the width or height of the <see cref="P:Terminal.Gui.TextFormatter.HotKeySpecifier"/> length.
            </summary>
            <param name="isWidth"><see langword="true"/> if is the width (default) <see langword="false"/> if is the height.</param>
            <returns>The length of the <see cref="P:Terminal.Gui.TextFormatter.HotKeySpecifier"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.View.GetTextFormatterBoundsSize">
            <summary>
            Gets the bounds size from a <see cref="P:Terminal.Gui.TextFormatter.Size"/>.
            </summary>
            <returns>The bounds size minus the <see cref="P:Terminal.Gui.TextFormatter.HotKeySpecifier"/> length.</returns>
        </member>
        <member name="M:Terminal.Gui.View.GetBoundsTextFormatterSize">
            <summary>
            Gets the text formatter size from a <see cref="P:Terminal.Gui.View.Bounds"/> size.
            </summary>
            <returns>The text formatter size more the <see cref="P:Terminal.Gui.TextFormatter.HotKeySpecifier"/> length.</returns>
        </member>
        <member name="T:Terminal.Gui.View.MouseEventArgs">
            <summary>
            Specifies the event arguments for <see cref="P:Terminal.Gui.View.MouseEventArgs.MouseEvent"/>. This is a higher-level construct
            than the wrapped <see cref="P:Terminal.Gui.View.MouseEventArgs.MouseEvent"/> class and is used for the events defined on <see cref="T:Terminal.Gui.View"/>
            and subclasses of View (e.g. <see cref="E:Terminal.Gui.View.MouseEnter"/> and <see cref="E:Terminal.Gui.View.MouseClick"/>).
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.MouseEventArgs.#ctor(Terminal.Gui.MouseEvent)">
            <summary>
            Constructs.
            </summary>
            <param name="me"></param>
        </member>
        <member name="P:Terminal.Gui.View.MouseEventArgs.MouseEvent">
            <summary>
            The <see cref="P:Terminal.Gui.View.MouseEventArgs.MouseEvent"/> for the event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.View.MouseEventArgs.Handled">
            <summary>
            Indicates if the current mouse event has already been processed and the driver should stop notifying any other event subscriber.
            Its important to set this value to true specially when updating any View's layout from inside the subscriber method.
            </summary>
            <remarks>This property forwards to the <see cref="P:Terminal.Gui.MouseEvent.Handled"/> property and is provided as a convenience and for
            backwards compatibility</remarks>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseEnter(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseLeave(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <summary>
            Method invoked when a mouse event is generated
            </summary>
            <param name="mouseEvent"></param>
            <returns><see langword="true"/>, if the event was handled, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.OnMouseClick(Terminal.Gui.View.MouseEventArgs)">
            <summary>
            Invokes the MouseClick event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.OnCanFocusChanged">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.OnEnabledChanged">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.OnVisibleChanged">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.View.BeginInit">
            <summary>
            This derived from <see cref="T:System.ComponentModel.ISupportInitializeNotification"/> to allow notify all the views that are beginning initialized.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.EndInit">
            <summary>
            This derived from <see cref="T:System.ComponentModel.ISupportInitializeNotification"/> to allow notify all the views that are ending initialized.
            </summary>
        </member>
        <member name="M:Terminal.Gui.View.SetWidth(System.Int32,System.Int32@)">
            <summary>
            Calculate the width based on the <see cref="P:Terminal.Gui.View.Width"/> settings.
            </summary>
            <param name="desiredWidth">The desired width.</param>
            <param name="resultWidth">The real result width.</param>
            <returns><see langword="true"/> if the width can be directly assigned, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.SetHeight(System.Int32,System.Int32@)">
            <summary>
            Calculate the height based on the <see cref="P:Terminal.Gui.View.Height"/> settings.
            </summary>
            <param name="desiredHeight">The desired height.</param>
            <param name="resultHeight">The real result height.</param>
            <returns><see langword="true"/> if the height can be directly assigned, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.GetCurrentWidth(System.Int32@)">
            <summary>
            Gets the current width based on the <see cref="P:Terminal.Gui.View.Width"/> settings.
            </summary>
            <param name="currentWidth">The real current width.</param>
            <returns><see langword="true"/> if the width can be directly assigned, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.GetCurrentHeight(System.Int32@)">
            <summary>
            Calculate the height based on the <see cref="P:Terminal.Gui.View.Height"/> settings.
            </summary>
            <param name="currentHeight">The real current height.</param>
            <returns><see langword="true"/> if the height can be directly assigned, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.View.GetNormalColor">
            <summary>
            Determines the current <see cref="P:Terminal.Gui.View.ColorScheme"/> based on the <see cref="P:Terminal.Gui.View.Enabled"/> value.
            </summary>
            <returns><see cref="P:Terminal.Gui.ColorScheme.Normal"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="true"/>
            or <see cref="P:Terminal.Gui.ColorScheme.Disabled"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="false"/>.
            If it's overridden can return other values.</returns>
        </member>
        <member name="M:Terminal.Gui.View.GetFocusColor">
            <summary>
            Determines the current <see cref="P:Terminal.Gui.View.ColorScheme"/> based on the <see cref="P:Terminal.Gui.View.Enabled"/> value.
            </summary>
            <returns><see cref="P:Terminal.Gui.ColorScheme.Focus"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="true"/>
            or <see cref="P:Terminal.Gui.ColorScheme.Disabled"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="false"/>.
            If it's overridden can return other values.</returns>
        </member>
        <member name="M:Terminal.Gui.View.GetHotNormalColor">
            <summary>
            Determines the current <see cref="P:Terminal.Gui.View.ColorScheme"/> based on the <see cref="P:Terminal.Gui.View.Enabled"/> value.
            </summary>
            <returns><see cref="P:Terminal.Gui.ColorScheme.HotNormal"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="true"/>
            or <see cref="P:Terminal.Gui.ColorScheme.Disabled"/> if <see cref="P:Terminal.Gui.View.Enabled"/> is <see langword="false"/>.
            If it's overridden can return other values.</returns>
        </member>
        <member name="M:Terminal.Gui.View.GetTopSuperView">
            <summary>
            Get the top superview of a given <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <returns>The superview view.</returns>
        </member>
        <member name="T:Terminal.Gui.Window">
            <summary>
            A <see cref="T:Terminal.Gui.Toplevel"/> <see cref="T:Terminal.Gui.View"/> that draws a border around its <see cref="P:Terminal.Gui.View.Frame"/> with a <see cref="P:Terminal.Gui.Window.Title"/> at the top.
            </summary>
            <remarks>
            The 'client area' of a <see cref="T:Terminal.Gui.Window"/> is a rectangle deflated by one or more rows/columns from <see cref="P:Terminal.Gui.View.Bounds"/>. A this time there is no
            API to determine this rectangle.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Window.Title">
            <summary>
            The title to be displayed for this window.
            </summary>
            <value>The title</value>
        </member>
        <member name="P:Terminal.Gui.Window.Border">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.Window.ContentView">
            <summary>
            ContentView is an internal implementation detail of Window. It is used to host Views added with <see cref="M:Terminal.Gui.Window.Add(Terminal.Gui.View)"/>. 
            Its ONLY reason for being is to provide a simple way for Window to expose to those SubViews that the Window's Bounds 
            are actually deflated due to the border. 
            </summary>
        </member>
        <member name="M:Terminal.Gui.Window.#ctor(Terminal.Gui.Rect,NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Window"/> class with an optional title using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> positioning.
            </summary>
            <param name="frame">Superview-relative rectangle specifying the location and size</param>
            <param name="title">Title</param>
            <remarks>
            This constructor initializes a Window with a <see cref="T:Terminal.Gui.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>. Use constructors
            that do not take <c>Rect</c> parameters to initialize a Window with <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>. 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Window.#ctor(NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Window"/> class with an optional title using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
            <param name="title">Title.</param>
            <remarks>
              This constructor initializes a View with a <see cref="T:Terminal.Gui.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>. 
              Use <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties to dynamically control the size and location of the view.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Window.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Window"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Window.#ctor(Terminal.Gui.Rect,NStack.ustring,System.Int32,Terminal.Gui.Border)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Window"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> positioning with the specified frame for its location, with the specified frame padding,
            and an optional title.
            </summary>
            <param name="frame">Superview-relative rectangle specifying the location and size</param>
            <param name="title">Title</param>
            <param name="padding">Number of characters to use for padding of the drawn frame.</param>
            <param name="border">The <see cref="P:Terminal.Gui.Window.Border"/>.</param>
            <remarks>
            This constructor initializes a Window with a <see cref="T:Terminal.Gui.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/>. Use constructors
            that do not take <c>Rect</c> parameters to initialize a Window with  <see cref="T:Terminal.Gui.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Window.#ctor(NStack.ustring,System.Int32,Terminal.Gui.Border)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Window"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning,
            and an optional title.
            </summary>
            <param name="title">Title.</param>
            <param name="padding">Number of characters to use for padding of the drawn frame.</param>
            <param name="border">The <see cref="P:Terminal.Gui.Window.Border"/>.</param>
            <remarks>
              This constructor initializes a View with a <see cref="T:Terminal.Gui.LayoutStyle"/> of <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>. 
              Use <see cref="P:Terminal.Gui.View.X"/>, <see cref="P:Terminal.Gui.View.Y"/>, <see cref="P:Terminal.Gui.View.Width"/>, and <see cref="P:Terminal.Gui.View.Height"/> properties to dynamically control the size and location of the view.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Window.Add(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Window.Remove(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Window.RemoveAll">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Window.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Window.OnCanFocusChanged">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.Window.Text">
            <summary>
              The text displayed by the <see cref="T:Terminal.Gui.Label"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Window.TextAlignment">
            <summary>
            Controls the text-alignment property of the label, changing it will redisplay the <see cref="T:Terminal.Gui.Label"/>.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="T:Terminal.Gui.Window.TitleEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> which allows passing a cancelable new <see cref="P:Terminal.Gui.Window.Title"/> value event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Window.TitleEventArgs.NewTitle">
            <summary>
            The new Window Title.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Window.TitleEventArgs.OldTitle">
            <summary>
            The old Window Title.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Window.TitleEventArgs.Cancel">
            <summary>
            Flag which allows cancelling the Title change.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Window.TitleEventArgs.#ctor(NStack.ustring,NStack.ustring)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.Window.TitleEventArgs"/>
            </summary>
            <param name="oldTitle">The <see cref="P:Terminal.Gui.Window.Title"/> that is/has been replaced.</param>
            <param name="newTitle">The new <see cref="P:Terminal.Gui.Window.Title"/> to be replaced.</param>
        </member>
        <member name="M:Terminal.Gui.Window.OnTitleChanging(NStack.ustring,NStack.ustring)">
            <summary>
            Called before the <see cref="P:Terminal.Gui.Window.Title"/> changes. Invokes the <see cref="E:Terminal.Gui.Window.TitleChanging"/> event, which can be cancelled.
            </summary>
            <param name="oldTitle">The <see cref="P:Terminal.Gui.Window.Title"/> that is/has been replaced.</param>
            <param name="newTitle">The new <see cref="P:Terminal.Gui.Window.Title"/> to be replaced.</param>
            <returns>`true` if an event handler cancelled the Title change.</returns>
        </member>
        <member name="E:Terminal.Gui.Window.TitleChanging">
            <summary>
            Event fired when the <see cref="P:Terminal.Gui.Window.Title"/> is changing. Set <see cref="P:Terminal.Gui.Window.TitleEventArgs.Cancel"/> to 
            `true` to cancel the Title change.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Window.OnTitleChanged(NStack.ustring,NStack.ustring)">
            <summary>
            Called when the <see cref="P:Terminal.Gui.Window.Title"/> has been changed. Invokes the <see cref="E:Terminal.Gui.Window.TitleChanged"/> event.
            </summary>
            <param name="oldTitle">The <see cref="P:Terminal.Gui.Window.Title"/> that is/has been replaced.</param>
            <param name="newTitle">The new <see cref="P:Terminal.Gui.Window.Title"/> to be replaced.</param>
        </member>
        <member name="E:Terminal.Gui.Window.TitleChanged">
            <summary>
            Event fired after the <see cref="P:Terminal.Gui.Window.Title"/> has been changed. 
            </summary>
        </member>
        <member name="T:Terminal.Gui.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxCopy">
            <summary>
              Looks up a localized string similar to _Copy.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxCut">
            <summary>
              Looks up a localized string similar to Cu_t.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxDeleteAll">
            <summary>
              Looks up a localized string similar to _Delete All.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxPaste">
            <summary>
              Looks up a localized string similar to _Paste.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxRedo">
            <summary>
              Looks up a localized string similar to _Redo.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxSelectAll">
            <summary>
              Looks up a localized string similar to _Select All.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.ctxUndo">
            <summary>
              Looks up a localized string similar to _Undo.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdDirectory">
            <summary>
              Looks up a localized string similar to Directory.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdFile">
            <summary>
              Looks up a localized string similar to File.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdOpen">
            <summary>
              Looks up a localized string similar to Open.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdSave">
            <summary>
              Looks up a localized string similar to Save.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdSaveAs">
            <summary>
              Looks up a localized string similar to Save as.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdSelectFolder">
            <summary>
              Looks up a localized string similar to Select folder.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.fdSelectMixed">
            <summary>
              Looks up a localized string similar to Select Mixed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.wzBack">
            <summary>
              Looks up a localized string similar to _Back.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.wzFinish">
            <summary>
              Looks up a localized string similar to Fi_nish.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Resources.Strings.wzNext">
            <summary>
              Looks up a localized string similar to _Next....
            </summary>
        </member>
        <member name="T:Terminal.Gui.Point">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Point.X">
            <summary>
            Gets or sets the x-coordinate of this Point.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Point.Y">
            <summary>
            Gets or sets the y-coordinate of this Point.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Point.Empty">
             <summary>
            	Empty Shared Field
             </summary>
            
             <remarks>
            	An uninitialized Point Structure.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.op_Addition(Terminal.Gui.Point,Terminal.Gui.Size)">
             <summary>
            	Addition Operator
             </summary>
            
             <remarks>
            	Translates a Point using the Width and Height
            	properties of the given <typeref>Size</typeref>.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.op_Equality(Terminal.Gui.Point,Terminal.Gui.Point)">
             <summary>
            	Equality Operator
             </summary>
            
             <remarks>
            	Compares two Point objects. The return value is
            	based on the equivalence of the X and Y properties 
            	of the two points.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.op_Inequality(Terminal.Gui.Point,Terminal.Gui.Point)">
             <summary>
            	Inequality Operator
             </summary>
            
             <remarks>
            	Compares two Point objects. The return value is
            	based on the equivalence of the X and Y properties 
            	of the two points.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.op_Subtraction(Terminal.Gui.Point,Terminal.Gui.Size)">
             <summary>
            	Subtraction Operator
             </summary>
            
             <remarks>
            	Translates a Point using the negation of the Width 
            	and Height properties of the given Size.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.op_Explicit(Terminal.Gui.Point)~Terminal.Gui.Size">
             <summary>
            	Point to Size Conversion
             </summary>
            
             <remarks>
            	Returns a Size based on the Coordinates of a given 
            	Point. Requires explicit cast.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.#ctor(Terminal.Gui.Size)">
             <summary>
            	Point Constructor
             </summary>
            
             <remarks>
            	Creates a Point from a Size value.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.#ctor(System.Int32,System.Int32)">
             <summary>
            	Point Constructor
             </summary>
            
             <remarks>
            	Creates a Point from a specified x,y coordinate pair.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Point.IsEmpty">
             <summary>
            	IsEmpty Property
             </summary>
            
             <remarks>
            	Indicates if both X and Y are zero.
             </remarks>		
        </member>
        <member name="M:Terminal.Gui.Point.Equals(System.Object)">
             <summary>
            	Equals Method
             </summary>
            
             <remarks>
            	Checks equivalence of this Point and another object.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.GetHashCode">
             <summary>
            	GetHashCode Method
             </summary>
            
             <remarks>
            	Calculates a hashing value.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.Offset(System.Int32,System.Int32)">
             <summary>
            	Offset Method
             </summary>
            
             <remarks>
            	Moves the Point a specified distance.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.ToString">
             <summary>
            	ToString Method
             </summary>
            
             <remarks>
            	Formats the Point as a string in coordinate notation.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Point.Add(Terminal.Gui.Point,Terminal.Gui.Size)">
            <summary>
            Adds the specified Size to the specified Point.
            </summary>
            <returns>The Point that is the result of the addition operation.</returns>
            <param name="pt">The Point to add.</param>
            <param name="sz">The Size to add.</param>
        </member>
        <member name="M:Terminal.Gui.Point.Offset(Terminal.Gui.Point)">
            <summary>
            Translates this Point by the specified Point.
            </summary>
            <returns>The offset.</returns>
            <param name="p">The Point used offset this Point.</param>
        </member>
        <member name="M:Terminal.Gui.Point.Subtract(Terminal.Gui.Point,Terminal.Gui.Size)">
            <summary>
            Returns the result of subtracting specified Size from the specified Point.
            </summary>
            <returns>The Point that is the result of the subtraction operation.</returns>
            <param name="pt">The Point to be subtracted from.</param>
            <param name="sz">The Size to subtract from the Point.</param>
        </member>
        <member name="T:Terminal.Gui.PointF">
            <summary>
            Represents an ordered pair of x and y coordinates that define a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:Terminal.Gui.PointF.Empty">
            <summary>
            Creates a new instance of the <see cref='T:Terminal.Gui.PointF'/> class with member data left uninitialized.
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref='T:Terminal.Gui.PointF'/> class with the specified coordinates.
            </summary>
        </member>
        <member name="P:Terminal.Gui.PointF.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref='T:Terminal.Gui.PointF'/> is empty.
            </summary>
        </member>
        <member name="P:Terminal.Gui.PointF.X">
            <summary>
            Gets the x-coordinate of this <see cref='T:Terminal.Gui.PointF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.PointF.Y">
            <summary>
            Gets the y-coordinate of this <see cref='T:Terminal.Gui.PointF'/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.op_Addition(Terminal.Gui.PointF,Terminal.Gui.Size)">
            <summary>
            Translates a <see cref='T:Terminal.Gui.PointF'/> by a given <see cref='T:Terminal.Gui.Size'/> .
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.op_Subtraction(Terminal.Gui.PointF,Terminal.Gui.Size)">
            <summary>
            Translates a <see cref='T:Terminal.Gui.PointF'/> by the negative of a given <see cref='T:Terminal.Gui.Size'/> .
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.op_Addition(Terminal.Gui.PointF,Terminal.Gui.SizeF)">
            <summary>
            Translates a <see cref='T:Terminal.Gui.PointF'/> by a given <see cref='T:Terminal.Gui.SizeF'/> .
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.op_Subtraction(Terminal.Gui.PointF,Terminal.Gui.SizeF)">
            <summary>
            Translates a <see cref='T:Terminal.Gui.PointF'/> by the negative of a given <see cref='T:Terminal.Gui.SizeF'/> .
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.op_Equality(Terminal.Gui.PointF,Terminal.Gui.PointF)">
            <summary>
            Compares two <see cref='T:Terminal.Gui.PointF'/> objects. The result specifies whether the values of the
            <see cref='P:Terminal.Gui.PointF.X'/> and <see cref='P:Terminal.Gui.PointF.Y'/> properties of the two
            <see cref='T:Terminal.Gui.PointF'/> objects are equal.
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.op_Inequality(Terminal.Gui.PointF,Terminal.Gui.PointF)">
            <summary>
            Compares two <see cref='T:Terminal.Gui.PointF'/> objects. The result specifies whether the values of the
            <see cref='P:Terminal.Gui.PointF.X'/> or <see cref='P:Terminal.Gui.PointF.Y'/> properties of the two
            <see cref='T:Terminal.Gui.PointF'/> objects are unequal.
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.Add(Terminal.Gui.PointF,Terminal.Gui.Size)">
            <summary>
            Translates a <see cref='T:Terminal.Gui.PointF'/> by a given <see cref='T:Terminal.Gui.Size'/> .
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.Subtract(Terminal.Gui.PointF,Terminal.Gui.Size)">
            <summary>
            Translates a <see cref='T:Terminal.Gui.PointF'/> by the negative of a given <see cref='T:Terminal.Gui.Size'/> .
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.Add(Terminal.Gui.PointF,Terminal.Gui.SizeF)">
            <summary>
            Translates a <see cref='T:Terminal.Gui.PointF'/> by a given <see cref='T:Terminal.Gui.SizeF'/> .
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.Subtract(Terminal.Gui.PointF,Terminal.Gui.SizeF)">
            <summary>
            Translates a <see cref='T:Terminal.Gui.PointF'/> by the negative of a given <see cref='T:Terminal.Gui.SizeF'/> .
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.Equals(System.Object)">
            <summary>
            Compares two <see cref='T:Terminal.Gui.PointF'/> objects. The result specifies whether the values of the
            <see cref='P:Terminal.Gui.PointF.X'/> and <see cref='P:Terminal.Gui.PointF.Y'/> properties of the two
            <see cref='T:Terminal.Gui.PointF'/> objects are equal.
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.Equals(Terminal.Gui.PointF)">
            <summary>
            Compares two <see cref='T:Terminal.Gui.PointF'/> objects. The result specifies whether the values of the
            <see cref='P:Terminal.Gui.PointF.X'/> and <see cref='P:Terminal.Gui.PointF.Y'/> properties of the two
            <see cref='T:Terminal.Gui.PointF'/> objects are equal.
            </summary>
        </member>
        <member name="M:Terminal.Gui.PointF.GetHashCode">
            <summary>
            Generates a hashcode from the X and Y components
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.PointF.ToString">
            <summary>
            Returns a string including the X and Y values
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Rect">
            <summary>
            Stores a set of four integers that represent the location and size of a rectangle
            </summary>
        </member>
        <member name="F:Terminal.Gui.Rect.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this Rectangle structure.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Rect.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this Rectangle structure.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Rect.Width">
            <summary>
            Gets or sets the width of this Rect structure.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Rect.Height">
            <summary>
            Gets or sets the height of this Rectangle structure.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Rect.Empty">
             <summary>
            	Empty Shared Field
             </summary>
            
             <remarks>
            	An uninitialized Rectangle Structure.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
            	FromLTRB Shared Method
             </summary>
            
             <remarks>
            	Produces a Rectangle structure from left, top, right
            	and bottom coordinates.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Inflate(Terminal.Gui.Rect,System.Int32,System.Int32)">
             <summary>
            	Inflate Shared Method
             </summary>
            
             <remarks>
            	Produces a new Rectangle by inflating an existing 
            	Rectangle by the specified coordinate values.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Inflate(System.Int32,System.Int32)">
             <summary>
            	Inflate Method
             </summary>
            
             <remarks>
            	Inflates the Rectangle by a specified width and height.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Inflate(Terminal.Gui.Size)">
             <summary>
            	Inflate Method
             </summary>
            
             <remarks>
            	Inflates the Rectangle by a specified Size.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect,Terminal.Gui.Rect)">
             <summary>
            	Intersect Shared Method
             </summary>
            
             <remarks>
            	Produces a new Rectangle by intersecting 2 existing 
            	Rectangles. Returns null if there is no	intersection.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Intersect(Terminal.Gui.Rect)">
             <summary>
            	Intersect Method
             </summary>
            
             <remarks>
            	Replaces the Rectangle with the intersection of itself
            	and another Rectangle.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Union(Terminal.Gui.Rect,Terminal.Gui.Rect)">
             <summary>
            	Union Shared Method
             </summary>
            
             <remarks>
            	Produces a new Rectangle from the union of 2 existing 
            	Rectangles.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.op_Equality(Terminal.Gui.Rect,Terminal.Gui.Rect)">
             <summary>
            	Equality Operator
             </summary>
            
             <remarks>
            	Compares two Rectangle objects. The return value is
            	based on the equivalence of the Location and Size 
            	properties of the two Rectangles.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.op_Inequality(Terminal.Gui.Rect,Terminal.Gui.Rect)">
             <summary>
            	Inequality Operator
             </summary>
            
             <remarks>
            	Compares two Rectangle objects. The return value is
            	based on the equivalence of the Location and Size 
            	properties of the two Rectangles.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.#ctor(Terminal.Gui.Point,Terminal.Gui.Size)">
             <summary>
            	Rectangle Constructor
             </summary>
            
             <remarks>
            	Creates a Rectangle from Point and Size values.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
            	Rectangle Constructor
             </summary>
            
             <remarks>
            	Creates a Rectangle from a specified x,y location and
            	width and height values.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Rect.Bottom">
             <summary>
            	Bottom Property
             </summary>
            
             <remarks>
            	The Y coordinate of the bottom edge of the Rectangle.
            	Read only.
             </remarks>		
        </member>
        <member name="P:Terminal.Gui.Rect.IsEmpty">
             <summary>
            	IsEmpty Property
             </summary>
            
             <remarks>
            	Indicates if the width or height are zero. Read only.
             </remarks>		
        </member>
        <member name="P:Terminal.Gui.Rect.Left">
             <summary>
            	Left Property
             </summary>
            
             <remarks>
            	The X coordinate of the left edge of the Rectangle.
            	Read only.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Rect.Location">
             <summary>
            	Location Property
             </summary>
            
             <remarks>
            	The Location of the top-left corner of the Rectangle.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Rect.Right">
             <summary>
            	Right Property
             </summary>
            
             <remarks>
            	The X coordinate of the right edge of the Rectangle.
            	Read only.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Rect.Size">
             <summary>
            	Size Property
             </summary>
            
             <remarks>
            	The Size of the Rectangle.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Rect.Top">
             <summary>
            	Top Property
             </summary>
            
             <remarks>
            	The Y coordinate of the top edge of the Rectangle.
            	Read only.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Contains(System.Int32,System.Int32)">
             <summary>
            	Contains Method
             </summary>
            
             <remarks>
            	Checks if an x,y coordinate lies within this Rectangle.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Contains(Terminal.Gui.Point)">
             <summary>
            	Contains Method
             </summary>
            
             <remarks>
            	Checks if a Point lies within this Rectangle.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Contains(Terminal.Gui.Rect)">
             <summary>
            	Contains Method
             </summary>
            
             <remarks>
            	Checks if a Rectangle lies entirely within this 
            	Rectangle.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Equals(System.Object)">
             <summary>
            	Equals Method
             </summary>
            
             <remarks>
            	Checks equivalence of this Rectangle and another object.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.GetHashCode">
             <summary>
            	GetHashCode Method
             </summary>
            
             <remarks>
            	Calculates a hashing value.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.IntersectsWith(Terminal.Gui.Rect)">
             <summary>
            	IntersectsWith Method
             </summary>
            
             <remarks>
            	Checks if a Rectangle intersects with this one.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Offset(System.Int32,System.Int32)">
             <summary>
            	Offset Method
             </summary>
            
             <remarks>
            	Moves the Rectangle a specified distance.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.Offset(Terminal.Gui.Point)">
             <summary>
            	Offset Method
             </summary>
            
             <remarks>
            	Moves the Rectangle a specified distance.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Rect.ToString">
             <summary>
            	ToString Method
             </summary>
            
             <remarks>
            	Formats the Rectangle as a string in (x,y,w,h) notation.
             </remarks>
        </member>
        <member name="T:Terminal.Gui.RectangleF">
            <summary>
            Stores the location and size of a rectangular region.
            </summary>
        </member>
        <member name="F:Terminal.Gui.RectangleF.Empty">
            <summary>
            Initializes a new instance of the <see cref='T:Terminal.Gui.RectangleF'/> class.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref='T:Terminal.Gui.RectangleF'/> class with the specified location
            and size.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.#ctor(Terminal.Gui.PointF,Terminal.Gui.SizeF)">
            <summary>
            Initializes a new instance of the <see cref='T:Terminal.Gui.RectangleF'/> class with the specified location
            and size.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref='T:Terminal.Gui.RectangleF'/> with the specified location and size.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RectangleF.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of the rectangular region represented by this
            <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RectangleF.Size">
            <summary>
            Gets or sets the size of this <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RectangleF.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RectangleF.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RectangleF.Width">
            <summary>
            Gets or sets the width of the rectangular region defined by this <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RectangleF.Height">
            <summary>
            Gets or sets the height of the rectangular region defined by this <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RectangleF.Left">
            <summary>
            Gets the x-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Terminal.Gui.RectangleF'/> .
            </summary>
        </member>
        <member name="P:Terminal.Gui.RectangleF.Top">
            <summary>
            Gets the y-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RectangleF.Right">
            <summary>
            Gets the x-coordinate of the lower-right corner of the rectangular region defined by this
            <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RectangleF.Bottom">
            <summary>
            Gets the y-coordinate of the lower-right corner of the rectangular region defined by this
            <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RectangleF.IsEmpty">
            <summary>
            Tests whether this <see cref='T:Terminal.Gui.RectangleF'/> has a <see cref='P:Terminal.Gui.RectangleF.Width'/> or a <see cref='P:Terminal.Gui.RectangleF.Height'/> of 0.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref='T:Terminal.Gui.RectangleF'/> with the same location and
            size of this <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Equals(Terminal.Gui.RectangleF)">
            <summary>
            Returns true if two <see cref='T:Terminal.Gui.RectangleF'/> objects have equal location and size.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.RectangleF.op_Equality(Terminal.Gui.RectangleF,Terminal.Gui.RectangleF)">
            <summary>
            Tests whether two <see cref='T:Terminal.Gui.RectangleF'/> objects have equal location and size.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.op_Inequality(Terminal.Gui.RectangleF,Terminal.Gui.RectangleF)">
            <summary>
            Tests whether two <see cref='T:Terminal.Gui.RectangleF'/> objects differ in location or size.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this
            <see cref='T:Terminal.Gui.Rect'/> .
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Contains(Terminal.Gui.PointF)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this
            <see cref='T:Terminal.Gui.Rect'/> .
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Contains(Terminal.Gui.RectangleF)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained within
            the rectangular region represented by this <see cref='T:Terminal.Gui.Rect'/> .
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.GetHashCode">
            <summary>
            Gets the hash code for this <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Inflate(System.Single,System.Single)">
            <summary>
            Inflates this <see cref='T:Terminal.Gui.Rect'/> by the specified amount.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Inflate(Terminal.Gui.SizeF)">
            <summary>
            Inflates this <see cref='T:Terminal.Gui.Rect'/> by the specified amount.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Inflate(Terminal.Gui.RectangleF,System.Single,System.Single)">
            <summary>
            Creates a <see cref='T:Terminal.Gui.Rect'/> that is inflated by the specified amount.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Intersect(Terminal.Gui.RectangleF)">
            <summary>
            Creates a Rectangle that represents the intersection between this Rectangle and rect.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Intersect(Terminal.Gui.RectangleF,Terminal.Gui.RectangleF)">
            <summary>
            Creates a rectangle that represents the intersection between a and b. If there is no intersection, an
            empty rectangle is returned.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.IntersectsWith(Terminal.Gui.RectangleF)">
            <summary>
            Determines if this rectangle intersects with rect.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Union(Terminal.Gui.RectangleF,Terminal.Gui.RectangleF)">
            <summary>
            Creates a rectangle that represents the union between a and b.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Offset(Terminal.Gui.PointF)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.Offset(System.Single,System.Single)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.op_Implicit(Terminal.Gui.Rect)~Terminal.Gui.RectangleF">
            <summary>
            Converts the specified <see cref='T:Terminal.Gui.Rect'/> to a
            <see cref='T:Terminal.Gui.RectangleF'/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RectangleF.ToString">
            <summary>
            Converts the <see cref='P:Terminal.Gui.RectangleF.Location'/> and <see cref='P:Terminal.Gui.RectangleF.Size'/>
            of this <see cref='T:Terminal.Gui.RectangleF'/> to a human-readable string.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Size">
            <summary>
            Stores an ordered pair of integers, which specify a Height and Width.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Size.Empty">
            <summary>
            Gets a Size structure that has a Height and Width value of 0.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Size.op_Addition(Terminal.Gui.Size,Terminal.Gui.Size)">
             <summary>
            	Addition Operator
             </summary>
            
             <remarks>
            	Addition of two Size structures.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.op_Equality(Terminal.Gui.Size,Terminal.Gui.Size)">
             <summary>
            	Equality Operator
             </summary>
            
             <remarks>
            	Compares two Size objects. The return value is
            	based on the equivalence of the Width and Height 
            	properties of the two Sizes.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.op_Inequality(Terminal.Gui.Size,Terminal.Gui.Size)">
             <summary>
            	Inequality Operator
             </summary>
            
             <remarks>
            	Compares two Size objects. The return value is
            	based on the equivalence of the Width and Height 
            	properties of the two Sizes.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.op_Subtraction(Terminal.Gui.Size,Terminal.Gui.Size)">
             <summary>
            	Subtraction Operator
             </summary>
            
             <remarks>
            	Subtracts two Size structures.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.op_Explicit(Terminal.Gui.Size)~Terminal.Gui.Point">
             <summary>
            	Size to Point Conversion
             </summary>
            
             <remarks>
            	Returns a Point based on the dimensions of a given 
            	Size. Requires explicit cast.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.#ctor(Terminal.Gui.Point)">
             <summary>
            	Size Constructor
             </summary>
            
             <remarks>
            	Creates a Size from a Point value.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.#ctor(System.Int32,System.Int32)">
             <summary>
            	Size Constructor
             </summary>
            
             <remarks>
            	Creates a Size from specified dimensions.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Size.IsEmpty">
             <summary>
            	IsEmpty Property
             </summary>
            
             <remarks>
            	Indicates if both Width and Height are zero.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Size.Width">
             <summary>
            	Width Property
             </summary>
            
             <remarks>
            	The Width coordinate of the Size.
             </remarks>
        </member>
        <member name="P:Terminal.Gui.Size.Height">
             <summary>
            	Height Property
             </summary>
            
             <remarks>
            	The Height coordinate of the Size.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.Equals(System.Object)">
             <summary>
            	Equals Method
             </summary>
            
             <remarks>
            	Checks equivalence of this Size and another object.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.GetHashCode">
             <summary>
            	GetHashCode Method
             </summary>
            
             <remarks>
            	Calculates a hashing value.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.ToString">
             <summary>
            	ToString Method
             </summary>
            
             <remarks>
            	Formats the Size as a string in coordinate notation.
             </remarks>
        </member>
        <member name="M:Terminal.Gui.Size.Add(Terminal.Gui.Size,Terminal.Gui.Size)">
            <summary>
            Adds the width and height of one Size structure to the width and height of another Size structure.
            </summary>
            <returns>The add.</returns>
            <param name="sz1">The first Size structure to add.</param>
            <param name="sz2">The second Size structure to add.</param>
        </member>
        <member name="M:Terminal.Gui.Size.Subtract(Terminal.Gui.Size,Terminal.Gui.Size)">
            <summary>
            Subtracts the width and height of one Size structure to the width and height of another Size structure.
            </summary>
            <returns>The subtract.</returns>
            <param name="sz1">The first Size structure to subtract.</param>
            <param name="sz2">The second Size structure to subtract.</param>
        </member>
        <member name="T:Terminal.Gui.SizeF">
            <summary>
            Represents the size of a rectangular region with an ordered pair of width and height.
            </summary>
        </member>
        <member name="F:Terminal.Gui.SizeF.Empty">
            <summary>
            Initializes a new instance of the <see cref='T:Terminal.Gui.SizeF'/> class.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.#ctor(Terminal.Gui.SizeF)">
            <summary>
            Initializes a new instance of the <see cref='T:Terminal.Gui.SizeF'/> class from the specified
            existing <see cref='T:Terminal.Gui.SizeF'/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.#ctor(Terminal.Gui.PointF)">
            <summary>
            Initializes a new instance of the <see cref='T:Terminal.Gui.SizeF'/> class from the specified
            <see cref='T:Terminal.Gui.PointF'/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref='T:Terminal.Gui.SizeF'/> class from the specified dimensions.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.op_Addition(Terminal.Gui.SizeF,Terminal.Gui.SizeF)">
            <summary>
            Performs vector addition of two <see cref='T:Terminal.Gui.SizeF'/> objects.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.op_Subtraction(Terminal.Gui.SizeF,Terminal.Gui.SizeF)">
            <summary>
            Contracts a <see cref='T:Terminal.Gui.SizeF'/> by another <see cref='T:Terminal.Gui.SizeF'/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.op_Multiply(System.Single,Terminal.Gui.SizeF)">
            <summary>
            Multiplies <see cref="T:Terminal.Gui.SizeF"/> by a <see cref="T:System.Single"/> producing <see cref="T:Terminal.Gui.SizeF"/>.
            </summary>
            <param name="left">Multiplier of type <see cref="T:System.Single"/>.</param>
            <param name="right">Multiplicand of type <see cref="T:Terminal.Gui.SizeF"/>.</param>
            <returns>Product of type <see cref="T:Terminal.Gui.SizeF"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.SizeF.op_Multiply(Terminal.Gui.SizeF,System.Single)">
            <summary>
            Multiplies <see cref="T:Terminal.Gui.SizeF"/> by a <see cref="T:System.Single"/> producing <see cref="T:Terminal.Gui.SizeF"/>.
            </summary>
            <param name="left">Multiplicand of type <see cref="T:Terminal.Gui.SizeF"/>.</param>
            <param name="right">Multiplier of type <see cref="T:System.Single"/>.</param>
            <returns>Product of type <see cref="T:Terminal.Gui.SizeF"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.SizeF.op_Division(Terminal.Gui.SizeF,System.Single)">
            <summary>
            Divides <see cref="T:Terminal.Gui.SizeF"/> by a <see cref="T:System.Single"/> producing <see cref="T:Terminal.Gui.SizeF"/>.
            </summary>
            <param name="left">Dividend of type <see cref="T:Terminal.Gui.SizeF"/>.</param>
            <param name="right">Divisor of type <see cref="T:System.Int32"/>.</param>
            <returns>Result of type <see cref="T:Terminal.Gui.SizeF"/>.</returns>
        </member>
        <member name="M:Terminal.Gui.SizeF.op_Equality(Terminal.Gui.SizeF,Terminal.Gui.SizeF)">
            <summary>
            Tests whether two <see cref='T:Terminal.Gui.SizeF'/> objects are identical.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.op_Inequality(Terminal.Gui.SizeF,Terminal.Gui.SizeF)">
            <summary>
            Tests whether two <see cref='T:Terminal.Gui.SizeF'/> objects are different.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.op_Explicit(Terminal.Gui.SizeF)~Terminal.Gui.PointF">
            <summary>
            Converts the specified <see cref='T:Terminal.Gui.SizeF'/> to a <see cref='T:Terminal.Gui.PointF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.SizeF.IsEmpty">
            <summary>
            Tests whether this <see cref='T:Terminal.Gui.SizeF'/> has zero width and height.
            </summary>
        </member>
        <member name="P:Terminal.Gui.SizeF.Width">
            <summary>
            Represents the horizontal component of this <see cref='T:Terminal.Gui.SizeF'/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.SizeF.Height">
            <summary>
            Represents the vertical component of this <see cref='T:Terminal.Gui.SizeF'/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.Add(Terminal.Gui.SizeF,Terminal.Gui.SizeF)">
            <summary>
            Performs vector addition of two <see cref='T:Terminal.Gui.SizeF'/> objects.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.Subtract(Terminal.Gui.SizeF,Terminal.Gui.SizeF)">
            <summary>
            Contracts a <see cref='T:Terminal.Gui.SizeF'/> by another <see cref='T:Terminal.Gui.SizeF'/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref='T:Terminal.Gui.SizeF'/>  with the same dimensions
            as this <see cref='T:Terminal.Gui.SizeF'/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.Equals(Terminal.Gui.SizeF)">
            <summary>
            Tests whether two <see cref='T:Terminal.Gui.SizeF'/> objects are identical.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.GetHashCode">
            <summary>
            Generates a hashcode from the width and height
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.SizeF.ToString">
            <summary>
            Creates a human-readable string that represents this <see cref='T:Terminal.Gui.SizeF'/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SizeF.Multiply(Terminal.Gui.SizeF,System.Single)">
            <summary>
            Multiplies <see cref="T:Terminal.Gui.SizeF"/> by a <see cref="T:System.Single"/> producing <see cref="T:Terminal.Gui.SizeF"/>.
            </summary>
            <param name="size">Multiplicand of type <see cref="T:Terminal.Gui.SizeF"/>.</param>
            <param name="multiplier">Multiplier of type <see cref="T:System.Single"/>.</param>
            <returns>Product of type SizeF.</returns>
        </member>
        <member name="T:Terminal.Gui.Button">
            <summary>
              Button is a <see cref="T:Terminal.Gui.View"/> that provides an item that invokes an <see cref="T:System.Action"/> when activated by the user.
            </summary>
            <remarks>
            <para>
              Provides a button showing text invokes an <see cref="T:System.Action"/> when clicked on with a mouse
              or when the user presses SPACE, ENTER, or hotkey. The hotkey is the first letter or digit following the first underscore ('_') 
              in the button text. 
            </para>
            <para>
              Use <see cref="P:Terminal.Gui.View.HotKeySpecifier"/> to change the hotkey specifier from the default of ('_'). 
            </para>
            <para>
              If no hotkey specifier is found, the first uppercase letter encountered will be used as the hotkey.
            </para>
            <para>
              When the button is configured as the default (<see cref="P:Terminal.Gui.Button.IsDefault"/>) and the user presses
              the ENTER key, if no other <see cref="T:Terminal.Gui.View"/> processes the <see cref="T:Terminal.Gui.KeyEvent"/>, the <see cref="T:Terminal.Gui.Button"/>'s
              <see cref="T:System.Action"/> will be invoked.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Button.#ctor">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.Button"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <remarks>
              The width of the <see cref="T:Terminal.Gui.Button"/> is computed based on the
              text length. The height will always be 1.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Button.#ctor(NStack.ustring,System.Boolean)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.Button"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <remarks>
              The width of the <see cref="T:Terminal.Gui.Button"/> is computed based on the
              text length. The height will always be 1.
            </remarks>
            <param name="text">The button's text</param>
            <param name="is_default">
              If <c>true</c>, a special decoration is used, and the user pressing the enter key 
              in a <see cref="T:Terminal.Gui.Dialog"/> will implicitly activate this button.
            </param>
        </member>
        <member name="M:Terminal.Gui.Button.#ctor(System.Int32,System.Int32,NStack.ustring)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.Button"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout, based on the given text
            </summary>
            <remarks>
              The width of the <see cref="T:Terminal.Gui.Button"/> is computed based on the
              text length. The height will always be 1.
            </remarks>
            <param name="x">X position where the button will be shown.</param>
            <param name="y">Y position where the button will be shown.</param>
            <param name="text">The button's text</param>
        </member>
        <member name="M:Terminal.Gui.Button.#ctor(System.Int32,System.Int32,NStack.ustring,System.Boolean)">
            <summary>
              Initializes a new instance of <see cref="T:Terminal.Gui.Button"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout, based on the given text.
            </summary>
            <remarks>
              The width of the <see cref="T:Terminal.Gui.Button"/> is computed based on the
              text length. The height will always be 1.
            </remarks>
            <param name="x">X position where the button will be shown.</param>
            <param name="y">Y position where the button will be shown.</param>
            <param name="text">The button's text</param>
            <param name="is_default">
              If <c>true</c>, a special decoration is used, and the user pressing the enter key 
              in a <see cref="T:Terminal.Gui.Dialog"/> will implicitly activate this button.
            </param>
        </member>
        <member name="P:Terminal.Gui.Button.IsDefault">
            <summary>
            Gets or sets whether the <see cref="T:Terminal.Gui.Button"/> is the default action to activate in a dialog.
            </summary>
            <value><c>true</c> if is default; otherwise, <c>false</c>.</value>
            <remarks>
            If is <see langword="true"/> the current focused view
            will remain focused if the window is not closed.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Button.HotKey">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Button.UpdateTextFormatterText">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Button.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Button.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Button.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Button.OnClicked">
            <summary>
            Virtual method to invoke the <see cref="E:Terminal.Gui.Button.Clicked"/> event.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Button.Clicked">
            <summary>
              Clicked <see cref="T:System.Action"/>, raised when the user clicks the primary mouse button within the Bounds of this <see cref="T:Terminal.Gui.View"/>
              or if the user presses the action key while this view is focused. (TODO: IsDefault)
            </summary>
            <remarks>
              Client code can hook up to this event, it is
              raised when the button is activated either with
              the mouse or the keyboard.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Button.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Button.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Button.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.CheckBox">
            <summary>
            The <see cref="T:Terminal.Gui.CheckBox"/> <see cref="T:Terminal.Gui.View"/> shows an on/off toggle that the user can set
            </summary>
        </member>
        <member name="E:Terminal.Gui.CheckBox.Toggled">
            <summary>
              Toggled event, raised when the <see cref="T:Terminal.Gui.CheckBox"/>  is toggled.
            </summary>
            <remarks>
              Client code can hook up to this event, it is
              raised when the <see cref="T:Terminal.Gui.CheckBox"/> is activated either with
              the mouse or the keyboard. The passed <c>bool</c> contains the previous state. 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.CheckBox.OnToggled(System.Boolean)">
            <summary>
            Called when the <see cref="P:Terminal.Gui.CheckBox.Checked"/> property changes. Invokes the <see cref="E:Terminal.Gui.CheckBox.Toggled"/> event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CheckBox.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.CheckBox"/> based on the given text, using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.CheckBox.#ctor(NStack.ustring,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.CheckBox"/> based on the given text, using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="s">S.</param>
            <param name="is_checked">If set to <c>true</c> is checked.</param>
        </member>
        <member name="M:Terminal.Gui.CheckBox.#ctor(System.Int32,System.Int32,NStack.ustring)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.CheckBox"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <remarks>
              The size of <see cref="T:Terminal.Gui.CheckBox"/> is computed based on the
              text length. This <see cref="T:Terminal.Gui.CheckBox"/> is not toggled.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.CheckBox.#ctor(System.Int32,System.Int32,NStack.ustring,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.CheckBox"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <remarks>
              The size of <see cref="T:Terminal.Gui.CheckBox"/> is computed based on the
              text length. 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.CheckBox.UpdateTextFormatterText">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.CheckBox.Checked">
            <summary>
               The state of the <see cref="T:Terminal.Gui.CheckBox"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.CheckBox.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBox.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBox.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBox.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.CheckBox.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ColorPicker">
            <summary>
            The <see cref="T:Terminal.Gui.ColorPicker"/> <see cref="T:Terminal.Gui.View"/> Color picker.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ColorPicker.colorsPerLine">
            <summary>
            Number of colors on a line.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ColorPicker.lineCount">
            <summary>
            Number of color lines.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ColorPicker.horizontalZoom">
            <summary>
            Horizontal zoom.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ColorPicker.verticalZoom">
            <summary>
            Vertical zoom.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorPicker.Cursor">
            <summary>
            Cursor for the selected color.
            </summary>
        </member>
        <member name="E:Terminal.Gui.ColorPicker.ColorChanged">
            <summary>
            Fired when a color is picked.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ColorPicker.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ColorPicker"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.#ctor(NStack.ustring)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ColorPicker"/>.
            </summary>
            <param name="title">Title.</param>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.#ctor(Terminal.Gui.Point,NStack.ustring)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ColorPicker"/>.
            </summary>
            <param name="point">Location point.</param>
            <param name="title">Title.</param>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.#ctor(System.Int32,System.Int32,NStack.ustring)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ColorPicker"/>.
            </summary>
            <param name="x">X location.</param>
            <param name="y">Y location.</param>
            <param name="title">Title</param>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.AddCommands">
            <summary>
            Add the commands.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.AddKeyBindings">
            <summary>
            Add the KeyBindinds.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.DrawColorBox(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draw a box for one color.
            </summary>
            <param name="x">X location.</param>
            <param name="y">Y location</param>
            <param name="selected"></param>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.MoveLeft">
            <summary>
            Moves the selected item index to the previous column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.MoveRight">
            <summary>
            Moves the selected item index to the next column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.MoveUp">
            <summary>
            Moves the selected item index to the previous row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.MoveDown">
            <summary>
            Moves the selected item index to the next row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ColorPicker.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ComboBox">
            <summary>
            Provides a drop-down list of items the user can select from.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ComboBox.Source">
            <summary>
            Gets or sets the <see cref="T:Terminal.Gui.IListDataSource"/> backing this <see cref="T:Terminal.Gui.ComboBox"/>, enabling custom rendering.
            </summary>
            <value>The source.</value>
            <remarks>
             Use <see cref="M:Terminal.Gui.ComboBox.SetSource(System.Collections.IList)"/> to set a new <see cref="T:System.Collections.IList"/> source.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ComboBox.SetSource(System.Collections.IList)">
            <summary>
            Sets the source of the <see cref="T:Terminal.Gui.ComboBox"/> to an <see cref="T:System.Collections.IList"/>.
            </summary>
            <value>An object implementing the IList interface.</value>
            <remarks>
             Use the <see cref="P:Terminal.Gui.ComboBox.Source"/> property to set a new <see cref="T:Terminal.Gui.IListDataSource"/> source and use custome rendering.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.ComboBox.SelectedItemChanged">
            <summary>
            This event is raised when the selected item in the <see cref="T:Terminal.Gui.ComboBox"/> has changed.
            </summary>
        </member>
        <member name="E:Terminal.Gui.ComboBox.Expanded">
            <summary>
            This event is raised when the drop-down list is expanded.
            </summary>
        </member>
        <member name="E:Terminal.Gui.ComboBox.Collapsed">
            <summary>
            This event is raised when the drop-down list is collapsed.
            </summary>
        </member>
        <member name="E:Terminal.Gui.ComboBox.OpenSelectedItem">
            <summary>
            This event is raised when the user Double Clicks on an item or presses ENTER to open the selected item.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.#ctor(NStack.ustring)">
            <summary>
            Public constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Terminal.Gui.ComboBox.#ctor(Terminal.Gui.Rect,System.Collections.IList)">
            <summary>
            Public constructor
            </summary>
            <param name="rect"></param>
            <param name="source"></param>
        </member>
        <member name="M:Terminal.Gui.ComboBox.#ctor(System.Collections.IList)">
            <summary>
            Initialize with the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Terminal.Gui.ComboBox.SelectedItem">
            <summary>
            Gets the index of the currently selected item in the <see cref="P:Terminal.Gui.ComboBox.Source"/>
            </summary>
            <value>The selected item or -1 none selected.</value>
        </member>
        <member name="P:Terminal.Gui.ComboBox.IsShow">
            <summary>
            Gets the drop down list state, expanded or collapsed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ComboBox.ColorScheme">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ComboBox.ReadOnly">
             <summary>
            If set to true its not allow any changes in the text.
             </summary>
        </member>
        <member name="P:Terminal.Gui.ComboBox.HideDropdownListOnClick">
            <summary>
            Gets or sets if the drop-down list can be hide with a button click event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnExpanded">
            <summary>
            Virtual method which invokes the <see cref="E:Terminal.Gui.ComboBox.Expanded"/> event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnCollapsed">
            <summary>
            Virtual method which invokes the <see cref="E:Terminal.Gui.ComboBox.Collapsed"/> event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnSelectedChanged">
            <summary>
            Invokes the SelectedChanged event if it is defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ComboBox.OnOpenSelectedItem">
            <summary>
            Invokes the OnOpenSelectedItem event if it is defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ComboBox.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ComboBox.ExpandCollapse">
            <summary>
            Toggles the expand/collapse state of the sublist in the combo box
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ComboBox.Collapse">
            <summary>
            Collapses the drop down list.  Returns true if the state chagned or false
            if it was already collapsed and no action was taken
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.Expand">
            <summary>
            Expands the drop down list.  Returns true if the state chagned or false
            if it was already expanded and no action was taken
            </summary>
        </member>
        <member name="P:Terminal.Gui.ComboBox.Text">
            <summary>
            The currently selected list item
            </summary>
        </member>
        <member name="P:Terminal.Gui.ComboBox.SearchText">
            <summary>
            Current search text 
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.Reset(System.Boolean)">
            <summary>
            Reset to full original list
            </summary>
        </member>
        <member name="M:Terminal.Gui.ComboBox.ShowList">
            <summary>
            Show the search list
            </summary>
            
            Consider making public
        </member>
        <member name="M:Terminal.Gui.ComboBox.HideList">
            <summary>
            Hide the search list
            </summary>
            
            Consider making public
        </member>
        <member name="M:Terminal.Gui.ComboBox.CalculatetHeight">
            <summary>
            Internal height of dynamic search list
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.ContextMenu">
            <summary>
            ContextMenu provides a pop-up menu that can be positioned anywhere within a <see cref="T:Terminal.Gui.View"/>. 
            ContextMenu is analogous to <see cref="P:Terminal.Gui.ContextMenu.MenuBar"/> and, once activated, works like a sub-menu 
            of a <see cref="T:Terminal.Gui.MenuBarItem"/> (but can be positioned anywhere).
            <para>
            By default, a ContextMenu with sub-menus is displayed in a cascading manner, where each sub-menu pops out of the ContextMenu frame
            (either to the right or left, depending on where the ContextMenu is relative to the edge of the screen). By setting
            <see cref="P:Terminal.Gui.ContextMenu.UseSubMenusSingleFrame"/> to <see langword="true"/>, this behavior can be changed such that all sub-menus are
            drawn within the ContextMenu frame.
            </para>
            <para>
            ContextMenus can be activated using the Shift-F10 key (by default; use the <see cref="P:Terminal.Gui.ContextMenu.Key"/> to change to another key).
            </para>
            <para>
            Callers can cause the ContextMenu to be activated on a right-mouse click (or other interaction) by calling <see cref="M:Terminal.Gui.ContextMenu.Show"/>.
            </para>
            <para>
            ContextMenus are located using screen using screen coordinates and appear above all other Views.
            </para>
            </summary>
        </member>
        <member name="M:Terminal.Gui.ContextMenu.#ctor">
            <summary>
            Initializes a context menu with no menu items.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ContextMenu.#ctor(Terminal.Gui.View,Terminal.Gui.MenuBarItem)">
            <summary>
            Initializes a context menu, with a <see cref="T:Terminal.Gui.View"/> specifiying the parent/hose of the menu.
            </summary>
            <param name="host">The host view.</param>
            <param name="menuItems">The menu items for the context menu.</param>
        </member>
        <member name="M:Terminal.Gui.ContextMenu.#ctor(System.Int32,System.Int32,Terminal.Gui.MenuBarItem)">
            <summary>
            Initializes a context menu with menu items at a specific screen location.
            </summary>
            <param name="x">The left position (screen relative).</param>
            <param name="y">The top position (screen relative).</param>
            <param name="menuItems">The menu items.</param>
        </member>
        <member name="M:Terminal.Gui.ContextMenu.Dispose">
            <summary>
            Disposes the context menu object.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ContextMenu.Show">
            <summary>
            Shows (opens) the ContextMenu, displaying the <see cref="T:Terminal.Gui.MenuItem"/>s it contains.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ContextMenu.Hide">
            <summary>
            Hides (closes) the ContextMenu.
            </summary>
        </member>
        <member name="E:Terminal.Gui.ContextMenu.KeyChanged">
            <summary>
            Event invoked when the <see cref="P:Terminal.Gui.ContextMenu.Key"/> is changed.
            </summary>
        </member>
        <member name="E:Terminal.Gui.ContextMenu.MouseFlagsChanged">
            <summary>
            Event invoked when the <see cref="P:Terminal.Gui.ContextMenu.MouseFlags"/> is changed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.Position">
            <summary>
            Gets or sets the menu position.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.MenuItems">
            <summary>
            Gets or sets the menu items for this context menu.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.Key">
            <summary>
            <see cref="T:Terminal.Gui.Key"/> specifies they keyboard key that will activate the context menu with the keyboard.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.MouseFlags">
            <summary>
            <see cref="T:Terminal.Gui.MouseFlags"/> specifies the mouse action used to activate the context menu by mouse.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.IsShow">
            <summary>
            Gets whether the ContextMenu is showing or not.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.Host">
            <summary>
            The host <see cref="T:Terminal.Gui.View"/> which position will be used,
            otherwise if it's null the container will be used.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.ForceMinimumPosToZero">
            <summary>
            Sets or gets whether the context menu be forced to the right, ensuring it is not clipped, if the x position 
            is less than zero. The default is <see langword="true"/> which means the context menu will be forced to the right.
            If set to <see langword="false"/>, the context menu will be clipped on the left if x is less than zero.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.MenuBar">
            <summary>
            Gets the <see cref="T:Terminal.Gui.MenuBar"/> that is hosting this context menu.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ContextMenu.UseSubMenusSingleFrame">
            <summary>
            Gets or sets if sub-menus will be displayed using a "single frame" menu style. If <see langword="true"/>, the ContextMenu
            and any sub-menus that would normally cascade will be displayed within a single frame. If <see langword="false"/> (the default),
            sub-menus will cascade using separate frames for each level of the menu hierarchy.
            </summary>
        </member>
        <member name="T:Terminal.Gui.DateField">
            <summary>
              Simple Date editing <see cref="T:Terminal.Gui.View"/>
            </summary>
            <remarks>
              The <see cref="T:Terminal.Gui.DateField"/> <see cref="T:Terminal.Gui.View"/> provides date editing functionality with mouse support.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.DateField.DateChanged">
            <summary>
              DateChanged event, raised when the <see cref="P:Terminal.Gui.DateField.Date"/> property has changed.
            </summary>
            <remarks>
              This event is raised when the <see cref="P:Terminal.Gui.DateField.Date"/> property changes.
            </remarks>
            <remarks>
              The passed event arguments containing the old value, new value, and format string.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.DateField.#ctor(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
               Initializes a new instance of <see cref="T:Terminal.Gui.DateField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="date">Initial date contents.</param>
            <param name="isShort">If true, shows only two digits for the year.</param>
        </member>
        <member name="M:Terminal.Gui.DateField.#ctor">
            <summary>
             Initializes a new instance of <see cref="T:Terminal.Gui.DateField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.DateField.#ctor(System.DateTime)">
            <summary>
             Initializes a new instance of <see cref="T:Terminal.Gui.DateField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="date"></param>
        </member>
        <member name="P:Terminal.Gui.DateField.Date">
            <summary>
              Gets or sets the date of the <see cref="T:Terminal.Gui.DateField"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.DateField.IsShortFormat">
            <summary>
            Get or set the date format for the widget.
            </summary>
        </member>
        <member name="P:Terminal.Gui.DateField.CursorPosition">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DateField.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DateField.DeleteCharLeft(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DateField.DeleteCharRight">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DateField.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DateField.OnDateChanged(Terminal.Gui.DateTimeEventArgs{System.DateTime})">
            <summary>
            Event firing method for the <see cref="E:Terminal.Gui.DateField.DateChanged"/> event.
            </summary>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:Terminal.Gui.DateTimeEventArgs`1">
            <summary>
            Defines the event arguments for <see cref="E:Terminal.Gui.DateField.DateChanged"/> and <see cref="E:Terminal.Gui.TimeField.TimeChanged"/> events.
            </summary>
        </member>
        <member name="P:Terminal.Gui.DateTimeEventArgs`1.OldValue">
            <summary>
            The old <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.
            </summary>
        </member>
        <member name="P:Terminal.Gui.DateTimeEventArgs`1.NewValue">
            <summary>
            The new <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.
            </summary>
        </member>
        <member name="P:Terminal.Gui.DateTimeEventArgs`1.Format">
            <summary>
            The <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> format.
            </summary>
        </member>
        <member name="M:Terminal.Gui.DateTimeEventArgs`1.#ctor(`0,`0,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.DateTimeEventArgs`1"/>
            </summary>
            <param name="oldValue">The old <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.</param>
            <param name="newValue">The new <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> value.</param>
            <param name="format">The <see cref="T:Terminal.Gui.DateField"/> or <see cref="T:Terminal.Gui.TimeField"/> format string.</param>
        </member>
        <member name="T:Terminal.Gui.FrameView">
            <summary>
            The FrameView is a container frame that draws a frame around the contents. It is similar to
            a GroupBox in Windows.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FrameView.Title">
            <summary>
            The title to be displayed for this <see cref="T:Terminal.Gui.FrameView"/>.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Terminal.Gui.FrameView.Border">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.FrameView.ContentView">
            <summary>
            ContentView is an internal implementation detail of Window. It is used to host Views added with <see cref="M:Terminal.Gui.FrameView.Add(Terminal.Gui.View)"/>. 
            Its ONLY reason for being is to provide a simple way for Window to expose to those SubViews that the Window's Bounds 
            are actually deflated due to the border. 
            </summary>
        </member>
        <member name="M:Terminal.Gui.FrameView.#ctor(Terminal.Gui.Rect,NStack.ustring,Terminal.Gui.View[],Terminal.Gui.Border)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.FrameView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <param name="frame">Frame.</param>
            <param name="title">Title.</param>
            <param name="views">Views.</param>
            <param name="border">The <see cref="P:Terminal.Gui.FrameView.Border"/>.</param>
        </member>
        <member name="M:Terminal.Gui.FrameView.#ctor(NStack.ustring,Terminal.Gui.Border)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.FrameView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="title">Title.</param>
            <param name="border">The <see cref="P:Terminal.Gui.FrameView.Border"/>.</param>
        </member>
        <member name="M:Terminal.Gui.FrameView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.FrameView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.FrameView.Add(Terminal.Gui.View)">
            <summary>
            Add the specified <see cref="T:Terminal.Gui.View"/> to this container.
            </summary>
            <param name="view"><see cref="T:Terminal.Gui.View"/> to add to this container</param>
        </member>
        <member name="M:Terminal.Gui.FrameView.Remove(Terminal.Gui.View)">
            <summary>
              Removes a <see cref="T:Terminal.Gui.View"/> from this container.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.FrameView.RemoveAll">
            <summary>
              Removes all <see cref="T:Terminal.Gui.View"/>s from this container.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.FrameView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.FrameView.Text">
            <summary>
              The text displayed by the <see cref="T:Terminal.Gui.Label"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.FrameView.TextAlignment">
            <summary>
            Controls the text-alignment property of the label, changing it will redisplay the <see cref="T:Terminal.Gui.Label"/>.
            </summary>
            <value>The text alignment.</value>
        </member>
        <member name="M:Terminal.Gui.FrameView.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.FrameView.OnCanFocusChanged">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.GraphView">
            <summary>
            Control for rendering graphs (bar, scatter etc)
            </summary>
        </member>
        <member name="P:Terminal.Gui.GraphView.AxisX">
            <summary>
            Horizontal axis
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.GraphView.AxisY">
            <summary>
            Vertical axis
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.GraphView.Series">
            <summary>
            Collection of data series that are rendered in the graph
            </summary>
        </member>
        <member name="P:Terminal.Gui.GraphView.Annotations">
            <summary>
            Elements drawn into graph after series have been drawn e.g. Legends etc
            </summary>
        </member>
        <member name="P:Terminal.Gui.GraphView.MarginLeft">
            <summary>
            Amount of space to leave on left of control.  Graph content (<see cref="P:Terminal.Gui.GraphView.Series"/>)
            will not be rendered in margins but axis labels may be
            </summary>
        </member>
        <member name="P:Terminal.Gui.GraphView.MarginBottom">
            <summary>
            Amount of space to leave on bottom of control.  Graph content (<see cref="P:Terminal.Gui.GraphView.Series"/>)
            will not be rendered in margins but axis labels may be
            </summary>
        </member>
        <member name="P:Terminal.Gui.GraphView.ScrollOffset">
            <summary>
            The graph space position of the bottom left of the control.
            Changing this scrolls the viewport around in the graph
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.GraphView.CellSize">
            <summary>
            Translates console width/height into graph space. Defaults
            to 1 row/col of console space being 1 unit of graph space. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.GraphView.GraphColor">
            <summary>
            The color of the background of the graph and axis/labels
            </summary>
        </member>
        <member name="M:Terminal.Gui.GraphView.#ctor">
            <summary>
            Creates a new graph with a 1 to 1 graph space with absolute layout
            </summary>
        </member>
        <member name="M:Terminal.Gui.GraphView.Reset">
            <summary>
            Clears all settings configured on the graph and resets all properties
            to default values (<see cref="P:Terminal.Gui.GraphView.CellSize"/>, <see cref="P:Terminal.Gui.GraphView.ScrollOffset"/> etc) 
            </summary>
        </member>
        <member name="M:Terminal.Gui.GraphView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.GraphView.SetDriverColorToGraphColor">
            <summary>
            Sets the color attribute of <see cref="F:Terminal.Gui.Application.Driver"/> to the <see cref="P:Terminal.Gui.GraphView.GraphColor"/>
            (if defined) or <see cref="T:Terminal.Gui.ColorScheme"/> otherwise.
            </summary>
        </member>
        <member name="M:Terminal.Gui.GraphView.ScreenToGraphSpace(System.Int32,System.Int32)">
            <summary>
            Returns the section of the graph that is represented by the given
            screen position
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.GraphView.ScreenToGraphSpace(Terminal.Gui.Rect)">
            <summary>
            Returns the section of the graph that is represented by the screen area
            </summary>
            <param name="screenArea"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.GraphView.GraphSpaceToScreen(Terminal.Gui.PointF)">
            <summary>
            Calculates the screen location for a given point in graph space.
            Bear in mind these be off screen
            </summary>
            <param name="location">Point in graph space that may or may not be represented in the
            visible area of graph currently presented.  E.g. 0,0 for origin</param>
            <returns>Screen position (Column/Row) which would be used to render the graph <paramref name="location"/>.
            Note that this can be outside the current client area of the control</returns>
        </member>
        <member name="M:Terminal.Gui.GraphView.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
            <remarks>Also ensures that cursor is invisible after entering the <see cref="T:Terminal.Gui.GraphView"/>.</remarks>
        </member>
        <member name="M:Terminal.Gui.GraphView.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.GraphView.PageUp">
            <summary>
            Scrolls the graph up 1 page
            </summary>
        </member>
        <member name="M:Terminal.Gui.GraphView.PageDown">
            <summary>
            Scrolls the graph down 1 page
            </summary>
        </member>
        <member name="M:Terminal.Gui.GraphView.Scroll(System.Single,System.Single)">
            <summary>
            Scrolls the view by a given number of units in graph space.
            See <see cref="P:Terminal.Gui.GraphView.CellSize"/> to translate this into rows/cols
            </summary>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="M:Terminal.Gui.GraphView.DrawLine(Terminal.Gui.Point,Terminal.Gui.Point,System.Rune)">
            <summary>
            Draws a line between two points in screen space.  Can be diagonals.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="symbol">The symbol to use for the line</param>
        </member>
        <member name="T:Terminal.Gui.HexView">
            <summary>
            An hex viewer and editor <see cref="T:Terminal.Gui.View"/> over a <see cref="T:System.IO.Stream"/>
            </summary>
            <remarks>
            <para>
            <see cref="T:Terminal.Gui.HexView"/> provides a hex editor on top of a seekable <see cref="T:System.IO.Stream"/> with the left side showing an hex
            dump of the values in the <see cref="T:System.IO.Stream"/> and the right side showing the contents (filtered to 
            non-control sequence ASCII characters).    
            </para>
            <para>
            Users can switch from one side to the other by using the tab key.  
            </para>
            <para>
            To enable editing, set <see cref="P:Terminal.Gui.HexView.AllowEdits"/> to true. When <see cref="P:Terminal.Gui.HexView.AllowEdits"/> is true 
            the user can make changes to the hexadecimal values of the <see cref="T:System.IO.Stream"/>. Any changes are tracked
            in the <see cref="P:Terminal.Gui.HexView.Edits"/> property (a <see cref="T:System.Collections.Generic.SortedDictionary`2"/>) indicating 
            the position where the changes were made and the new values. A convenience method, <see cref="M:Terminal.Gui.HexView.ApplyEdits(System.IO.Stream)"/>
            will apply the edits to the <see cref="T:System.IO.Stream"/>.
            </para>
            <para>
            Control the first byte shown by setting the <see cref="P:Terminal.Gui.HexView.DisplayStart"/> property 
            to an offset in the stream.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.HexView.#ctor(System.IO.Stream)">
            <summary>
            Initializes a <see cref="T:Terminal.Gui.HexView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="source">The <see cref="T:System.IO.Stream"/> to view and edit as hex, this <see cref="T:System.IO.Stream"/> must support seeking, or an exception will be thrown.</param>
        </member>
        <member name="M:Terminal.Gui.HexView.#ctor">
            <summary>
            Initializes a <see cref="T:Terminal.Gui.HexView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="E:Terminal.Gui.HexView.Edited">
            <summary>
            Event to be invoked when an edit is made on the <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.HexView.PositionChanged">
            <summary>
            Event to be invoked when the position and cursor position changes.
            </summary>
        </member>
        <member name="P:Terminal.Gui.HexView.Source">
            <summary>
            Sets or gets the <see cref="T:System.IO.Stream"/> the <see cref="T:Terminal.Gui.HexView"/> is operating on; the stream must support seeking (<see cref="P:System.IO.Stream.CanSeek"/> == true).
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Terminal.Gui.HexView.DisplayStart">
            <summary>
            Sets or gets the offset into the <see cref="T:System.IO.Stream"/> that will displayed at the top of the <see cref="T:Terminal.Gui.HexView"/>
            </summary>
            <value>The display start.</value>
        </member>
        <member name="P:Terminal.Gui.HexView.Frame">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.HexView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.HexView.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.HexView.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.HexView.OnEdited(System.Collections.Generic.KeyValuePair{System.Int64,System.Byte})">
            <summary>
            Method used to invoke the <see cref="E:Terminal.Gui.HexView.Edited"/> event passing the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="keyValuePair">The key value pair.</param>
        </member>
        <member name="M:Terminal.Gui.HexView.OnPositionChanged">
            <summary>
            Method used to invoke the <see cref="E:Terminal.Gui.HexView.PositionChanged"/> event passing the <see cref="T:Terminal.Gui.HexView.HexViewEventArgs"/> arguments.
            </summary>
        </member>
        <member name="M:Terminal.Gui.HexView.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.HexView.AllowEdits">
            <summary>
            Gets or sets whether this <see cref="T:Terminal.Gui.HexView"/> allow editing of the <see cref="T:System.IO.Stream"/> 
            of the underlying <see cref="T:System.IO.Stream"/>.
            </summary>
            <value><c>true</c> if allow edits; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.HexView.Edits">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.SortedDictionary`2"/> describing the edits done to the <see cref="T:Terminal.Gui.HexView"/>. 
            Each Key indicates an offset where an edit was made and the Value is the changed byte.
            </summary>
            <value>The edits.</value>
        </member>
        <member name="P:Terminal.Gui.HexView.Position">
            <summary>
            Gets the current character position starting at one, related to the <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.HexView.CursorPosition">
            <summary>
            Gets the current cursor position starting at one for both, line and column.
            </summary>
        </member>
        <member name="P:Terminal.Gui.HexView.BytesPerLine">
            <summary>
            The bytes length per line.
            </summary>
        </member>
        <member name="M:Terminal.Gui.HexView.ApplyEdits(System.IO.Stream)">
            <summary>
            This method applies and edits made to the <see cref="T:System.IO.Stream"/> and resets the 
            contents of the <see cref="P:Terminal.Gui.HexView.Edits"/> property.
            </summary>
            <param name="stream">If provided also applies the changes to the passed <see cref="T:System.IO.Stream"/></param>.
        </member>
        <member name="M:Terminal.Gui.HexView.DiscardEdits">
            <summary>
            This method discards the edits made to the <see cref="T:System.IO.Stream"/> by resetting the 
            contents of the <see cref="P:Terminal.Gui.HexView.Edits"/> property.
            </summary>
        </member>
        <member name="P:Terminal.Gui.HexView.DesiredCursorVisibility">
            <summary>
            Get / Set the wished cursor when the field is focused
            </summary>
        </member>
        <member name="M:Terminal.Gui.HexView.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.HexView.HexViewEventArgs">
            <summary>
            Defines the event arguments for <see cref="E:Terminal.Gui.HexView.PositionChanged"/> event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.HexView.HexViewEventArgs.Position">
            <summary>
            Gets the current character position starting at one, related to the <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.HexView.HexViewEventArgs.CursorPosition">
            <summary>
            Gets the current cursor position starting at one for both, line and column.
            </summary>
        </member>
        <member name="P:Terminal.Gui.HexView.HexViewEventArgs.BytesPerLine">
            <summary>
            The bytes length per line.
            </summary>
        </member>
        <member name="M:Terminal.Gui.HexView.HexViewEventArgs.#ctor(System.Int64,Terminal.Gui.Point,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.HexView.HexViewEventArgs"/>
            </summary>
            <param name="pos">The character position.</param>
            <param name="cursor">The cursor position.</param>
            <param name="lineLength">Line bytes length.</param>
        </member>
        <member name="T:Terminal.Gui.ITreeViewFilter`1">
            <summary>
            Provides filtering for a <see cref="T:Terminal.Gui.TreeView"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ITreeViewFilter`1.IsMatch(`0)">
            <summary>
            Return <see langword="true"/> if the <paramref name="model"/> should
            be included in the tree.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Label">
            <summary>
            The Label <see cref="T:Terminal.Gui.View"/> displays a string at a given position and supports multiple lines separated by newline characters.
            Multi-line Labels support word wrap.
            </summary>
            <remarks>
            The <see cref="T:Terminal.Gui.Label"/> view is functionality identical to <see cref="T:Terminal.Gui.View"/> and is included for API backwards compatibility.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor(Terminal.Gui.Rect,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor(NStack.ustring,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor(Terminal.Gui.Rect,NStack.ustring,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor(System.Int32,System.Int32,NStack.ustring,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Label.#ctor(NStack.ustring,Terminal.Gui.TextDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.Label.Clicked">
            <summary>
              Clicked <see cref="T:System.Action"/>, raised when the user clicks the primary mouse button within the Bounds of this <see cref="T:Terminal.Gui.View"/>
              or if the user presses the action key while this view is focused. (TODO: IsDefault)
            </summary>
            <remarks>
              Client code can hook up to this event, it is
              raised when the button is activated either with
              the mouse or the keyboard.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Label.OnMouseEvent(Terminal.Gui.MouseEvent)">
            <summary>
            Method invoked when a mouse event is generated
            </summary>
            <param name="mouseEvent"></param>
            <returns><c>true</c>, if the event was handled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.Label.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Label.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.Label.OnClicked">
            <summary>
            Virtual method to invoke the <see cref="E:Terminal.Gui.Label.Clicked"/> event.
            </summary>
        </member>
        <member name="T:Terminal.Gui.LineView">
            <summary>
            A straight line control either horizontal or vertical
            </summary>
        </member>
        <member name="P:Terminal.Gui.LineView.StartingAnchor">
            <summary>
            The rune to display at the start of the line (left end of horizontal line or top end of vertical)
            If not specified then <see cref="P:Terminal.Gui.LineView.LineRune"/> is used
            </summary>
        </member>
        <member name="P:Terminal.Gui.LineView.EndingAnchor">
            <summary>
            The rune to display at the end of the line (right end of horizontal line or bottom end of vertical).
            If not specified then <see cref="P:Terminal.Gui.LineView.LineRune"/> is used
            </summary>
        </member>
        <member name="P:Terminal.Gui.LineView.LineRune">
            <summary>
            The symbol to use for drawing the line
            </summary>
        </member>
        <member name="P:Terminal.Gui.LineView.Orientation">
            <summary>
            The direction of the line.  If you change this you will need to manually update the Width/Height
            of the control to cover a relevant area based on the new direction.
            </summary>
        </member>
        <member name="M:Terminal.Gui.LineView.#ctor">
            <summary>
            Creates a horizontal line
            </summary>
        </member>
        <member name="M:Terminal.Gui.LineView.#ctor(Terminal.Gui.Graphs.Orientation)">
            <summary>
            Creates a horizontal or vertical line based on <paramref name="orientation"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.LineView.Redraw(Terminal.Gui.Rect)">
            <summary>
            Draws the line including any starting/ending anchors
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="T:Terminal.Gui.IListDataSource">
            <summary>
            Implement <see cref="T:Terminal.Gui.IListDataSource"/> to provide custom rendering for a <see cref="T:Terminal.Gui.ListView"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.IListDataSource.Count">
            <summary>
            Returns the number of elements to display
            </summary>
        </member>
        <member name="P:Terminal.Gui.IListDataSource.Length">
            <summary>
            Returns the maximum length of elements to display
            </summary>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.Render(Terminal.Gui.ListView,Terminal.Gui.ConsoleDriver,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method is invoked to render a specified item, the method should cover the entire provided width.
            </summary>
            <returns>The render.</returns>
            <param name="container">The list view to render.</param>
            <param name="driver">The console driver to render.</param>
            <param name="selected">Describes whether the item being rendered is currently selected by the user.</param>
            <param name="item">The index of the item to render, zero for the first item and so on.</param>
            <param name="col">The column where the rendering will start</param>
            <param name="line">The line where the rendering will be done.</param>
            <param name="width">The width that must be filled out.</param>
            <param name="start">The index of the string to be displayed.</param>
            <remarks>
              The default color will be set before this method is invoked, and will be based on whether the item is selected or not.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.IsMarked(System.Int32)">
            <summary>
            Should return whether the specified item is currently marked.
            </summary>
            <returns><see langword="true"/>, if marked, <see langword="false"/> otherwise.</returns>
            <param name="item">Item index.</param>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.SetMark(System.Int32,System.Boolean)">
            <summary>
            Flags the item as marked.
            </summary>
            <param name="item">Item index.</param>
            <param name="value">If set to <see langword="true"/> value.</param>
        </member>
        <member name="M:Terminal.Gui.IListDataSource.ToList">
            <summary>
            Return the source as IList.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.ListView">
            <summary>
            ListView <see cref="T:Terminal.Gui.View"/> renders a scrollable list of data where each item can be activated to perform an action.
            </summary>
            <remarks>
            <para>
              The <see cref="T:Terminal.Gui.ListView"/> displays lists of data and allows the user to scroll through the data.
              Items in the can be activated firing an event (with the ENTER key or a mouse double-click). 
              If the <see cref="P:Terminal.Gui.ListView.AllowsMarking"/> property is true, elements of the list can be marked by the user.
            </para>
            <para>
              By default <see cref="T:Terminal.Gui.ListView"/> uses <see cref="M:System.Object.ToString"/> to render the items of any
              <see cref="T:System.Collections.IList"/> object (e.g. arrays, <see cref="T:System.Collections.Generic.List`1"/>,
              and other collections). Alternatively, an object that implements <see cref="T:Terminal.Gui.IListDataSource"/>
              can be provided giving full control of what is rendered.
            </para>
            <para>
              <see cref="T:Terminal.Gui.ListView"/> can display any object that implements the <see cref="T:System.Collections.IList"/> interface.
              <see cref="T:System.String"/> values are converted into <see cref="T:NStack.ustring"/> values before rendering, and other values are
              converted into <see cref="T:System.String"/> by calling <see cref="M:System.Object.ToString"/> and then converting to <see cref="T:NStack.ustring"/> .
            </para>
            <para>
              To change the contents of the ListView, set the <see cref="P:Terminal.Gui.ListView.Source"/> property (when 
              providing custom rendering via <see cref="T:Terminal.Gui.IListDataSource"/>) or call <see cref="M:Terminal.Gui.ListView.SetSource(System.Collections.IList)"/>
              an <see cref="T:System.Collections.IList"/> is being used.
            </para>
            <para>
              When <see cref="P:Terminal.Gui.ListView.AllowsMarking"/> is set to true the rendering will prefix the rendered items with
              [x] or [ ] and bind the SPACE key to toggle the selection. To implement a different
              marking style set <see cref="P:Terminal.Gui.ListView.AllowsMarking"/> to false and implement custom rendering.
            </para>
            <para>
              Searching the ListView with the keyboard is supported. Users type the
              first characters of an item, and the first item that starts with what the user types will be selected.
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ListView.Source">
            <summary>
            Gets or sets the <see cref="T:Terminal.Gui.IListDataSource"/> backing this <see cref="T:Terminal.Gui.ListView"/>, enabling custom rendering.
            </summary>
            <value>The source.</value>
            <remarks>
             Use <see cref="M:Terminal.Gui.ListView.SetSource(System.Collections.IList)"/> to set a new <see cref="T:System.Collections.IList"/> source.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ListView.SetSource(System.Collections.IList)">
            <summary>
            Sets the source of the <see cref="T:Terminal.Gui.ListView"/> to an <see cref="T:System.Collections.IList"/>.
            </summary>
            <value>An object implementing the IList interface.</value>
            <remarks>
             Use the <see cref="P:Terminal.Gui.ListView.Source"/> property to set a new <see cref="T:Terminal.Gui.IListDataSource"/> source and use custome rendering.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ListView.SetSourceAsync(System.Collections.IList)">
            <summary>
            Sets the source to an <see cref="T:System.Collections.IList"/> value asynchronously.
            </summary>
            <value>An item implementing the IList interface.</value>
            <remarks>
             Use the <see cref="P:Terminal.Gui.ListView.Source"/> property to set a new <see cref="T:Terminal.Gui.IListDataSource"/> source and use custom rendering.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ListView.AllowsMarking">
            <summary>
            Gets or sets whether this <see cref="T:Terminal.Gui.ListView"/> allows items to be marked.
            </summary>
            <value>Set to <see langword="true"/> to allow marking elements of the list.</value>
            <remarks>
            If set to <see langword="true"/>, <see cref="T:Terminal.Gui.ListView"/> will render items marked items with "[x]", and unmarked items with "[ ]"
            spaces. SPACE key will toggle marking. The default is <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ListView.AllowsMultipleSelection">
            <summary>
            If set to <see langword="true"/> more than one item can be selected. If <see langword="false"/> selecting
            an item will cause all others to be un-selected. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListView.TopItem">
            <summary>
            Gets or sets the item that is displayed at the top of the <see cref="T:Terminal.Gui.ListView"/>.
            </summary>
            <value>The top item.</value>
        </member>
        <member name="P:Terminal.Gui.ListView.LeftItem">
            <summary>
            Gets or sets the leftmost column that is currently visible (when scrolling horizontally).
            </summary>
            <value>The left position.</value>
        </member>
        <member name="P:Terminal.Gui.ListView.Maxlength">
            <summary>
            Gets the widest item in the list.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListView.SelectedItem">
            <summary>
            Gets or sets the index of the currently selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="M:Terminal.Gui.ListView.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListView"/> that will display the 
            contents of the object implementing the <see cref="T:System.Collections.IList"/> interface, 
            with relative positioning.
            </summary>
            <param name="source">An <see cref="T:System.Collections.IList"/> data source, if the elements are strings or ustrings, 
            the string is rendered, otherwise the ToString() method is invoked on the result.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.#ctor(Terminal.Gui.IListDataSource)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListView"/> that will display the provided data source, using relative positioning.
            </summary>
            <param name="source"><see cref="T:Terminal.Gui.IListDataSource"/> object that provides a mechanism to render the data. 
            The number of elements on the collection should not change, if you must change, set 
            the "Source" property to reset the internal settings of the ListView.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListView"/>. Set the <see cref="P:Terminal.Gui.ListView.Source"/> property to display something.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ListView.#ctor(Terminal.Gui.Rect,System.Collections.IList)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListView"/> that will display the contents of the object implementing the <see cref="T:System.Collections.IList"/> interface with an absolute position.
            </summary>
            <param name="rect">Frame for the listview.</param>
            <param name="source">An IList data source, if the elements of the IList are strings or ustrings, 
            the string is rendered, otherwise the ToString() method is invoked on the result.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.#ctor(Terminal.Gui.Rect,Terminal.Gui.IListDataSource)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListView"/> with the provided data source and an absolute position
            </summary>
            <param name="rect">Frame for the listview.</param>
            <param name="source">IListDataSource object that provides a mechanism to render the data. 
            The number of elements on the collection should not change, if you must change, 
            set the "Source" property to reset the internal settings of the ListView.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.ListView.SelectedItemChanged">
            <summary>
            This event is raised when the selected item in the <see cref="T:Terminal.Gui.ListView"/> has changed.
            </summary>
        </member>
        <member name="E:Terminal.Gui.ListView.OpenSelectedItem">
            <summary>
            This event is raised when the user Double Clicks on an item or presses ENTER to open the selected item.
            </summary>
        </member>
        <member name="E:Terminal.Gui.ListView.RowRender">
            <summary>
            This event is invoked when this <see cref="T:Terminal.Gui.ListView"/> is being drawn before rendering.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListView.KeystrokeNavigator">
            <summary>
            Gets the <see cref="T:Terminal.Gui.CollectionNavigator"/> that searches the <see cref="P:Terminal.Gui.ListView.Source"/> collection as
            the user types.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ListView.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.AllowsAll">
            <summary>
            If <see cref="P:Terminal.Gui.ListView.AllowsMarking"/> and <see cref="P:Terminal.Gui.ListView.AllowsMultipleSelection"/> are both <see langword="true"/>,
            unmarks all marked items other than the currently selected. 
            </summary>
            <returns><see langword="true"/> if unmarking was successful.</returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MarkUnmarkRow">
            <summary>
            Marks the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> if it is not already marked.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> was marked.</returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MovePageUp">
            <summary>
            Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to the item at the top of the visible list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MovePageDown">
            <summary>
            Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to the item just below the bottom 
            of the visible list, scrolling if needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveDown">
            <summary>
            Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to the next item in the list, 
            scrolling the list if needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveUp">
            <summary>
            Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to the previous item in the list, 
            scrolling the list if needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveEnd">
            <summary>
            Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to last item in the list, 
            scrolling the list if needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.MoveHome">
            <summary>
            Changes the <see cref="P:Terminal.Gui.ListView.SelectedItem"/> to the first item in the list, 
            scrolling the list if needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.ScrollDown(System.Int32)">
            <summary>
            Scrolls the view down by <paramref name="items"/> items.
            </summary>
            <param name="items">Number of items to scroll down.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.ScrollUp(System.Int32)">
            <summary>
            Scrolls the view up by <paramref name="items"/> items.
            </summary>
            <param name="items">Number of items to scroll up.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.ScrollRight(System.Int32)">
            <summary>
            Scrolls the view right.
            </summary>
            <param name="cols">Number of columns to scroll right.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.ScrollLeft(System.Int32)">
            <summary>
            Scrolls the view left.
            </summary>
            <param name="cols">Number of columns to scroll left.</param>
        </member>
        <member name="M:Terminal.Gui.ListView.OnSelectedChanged">
            <summary>
            Invokes the <see cref="E:Terminal.Gui.ListView.SelectedItemChanged"/> event if it is defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.OnOpenSelectedItem">
            <summary>
            Invokes the <see cref="E:Terminal.Gui.ListView.OpenSelectedItem"/> event if it is defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.ListView.OnRowRender(Terminal.Gui.ListViewRowEventArgs)">
            <summary>
            Virtual method that will invoke the <see cref="E:Terminal.Gui.ListView.RowRender"/>.
            </summary>
            <param name="rowEventArgs"></param>
        </member>
        <member name="M:Terminal.Gui.ListView.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.EnsureSelectedItemVisible">
            <summary>
            Ensures the selected item is always visible on the screen.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ListView.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListView.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ListWrapper">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.#ctor(System.Collections.IList)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ListWrapper.Count">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ListWrapper.Length">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.Render(Terminal.Gui.ListView,Terminal.Gui.ConsoleDriver,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.IsMarked(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.SetMark(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.ToList">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ListWrapper.StartsWith(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ListViewItemEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> for <see cref="T:Terminal.Gui.ListView"/> events.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListViewItemEventArgs.Item">
            <summary>
            The index of the <see cref="T:Terminal.Gui.ListView"/> item.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListViewItemEventArgs.Value">
            <summary>
            The <see cref="T:Terminal.Gui.ListView"/> item.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ListViewItemEventArgs.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.ListViewItemEventArgs"/>
            </summary>
            <param name="item">The index of the <see cref="T:Terminal.Gui.ListView"/> item.</param>
            <param name="value">The <see cref="T:Terminal.Gui.ListView"/> item</param>
        </member>
        <member name="T:Terminal.Gui.ListViewRowEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> used by the <see cref="E:Terminal.Gui.ListView.RowRender"/> event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListViewRowEventArgs.Row">
            <summary>
            The current row being rendered.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ListViewRowEventArgs.RowAttribute">
            <summary>
            The <see cref="T:Terminal.Gui.Attribute"/> used by current row or
            null to maintain the current attribute.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ListViewRowEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes with the current row.
            </summary>
            <param name="row"></param>
        </member>
        <member name="T:Terminal.Gui.MenuItemCheckStyle">
            <summary>
            Specifies how a <see cref="T:Terminal.Gui.MenuItem"/> shows selection state. 
            </summary>
        </member>
        <member name="F:Terminal.Gui.MenuItemCheckStyle.NoCheck">
            <summary>
            The menu item will be shown normally, with no check indicator. The default.
            </summary>
        </member>
        <member name="F:Terminal.Gui.MenuItemCheckStyle.Checked">
            <summary>
            The menu item will indicate checked/un-checked state (see <see cref="F:Terminal.Gui.MenuItemCheckStyle.Checked"/>).
            </summary>
        </member>
        <member name="F:Terminal.Gui.MenuItemCheckStyle.Radio">
            <summary>
            The menu item is part of a menu radio group (see <see cref="F:Terminal.Gui.MenuItemCheckStyle.Checked"/>) and will indicate selected state.
            </summary>
        </member>
        <member name="T:Terminal.Gui.MenuItem">
            <summary>
            A <see cref="T:Terminal.Gui.MenuItem"/> has title, an associated help text, and an action to execute on activation. 
            MenuItems can also have a checked indicator (see <see cref="P:Terminal.Gui.MenuItem.Checked"/>).
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Data">
            <summary>
            Gets or sets arbitrary data for the menu item.
            </summary>
            <remarks>This property is not used internally.</remarks>
        </member>
        <member name="M:Terminal.Gui.MenuItem.#ctor(Terminal.Gui.Key)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.MenuItem"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.#ctor(NStack.ustring,NStack.ustring,System.Action,System.Func{System.Boolean},Terminal.Gui.MenuItem,Terminal.Gui.Key)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.MenuItem"/>.
            </summary>
            <param name="title">Title for the menu item.</param>
            <param name="help">Help text to display.</param>
            <param name="action">Action to invoke when the menu item is activated.</param>
            <param name="canExecute">Function to determine if the action can currently be executed.</param>
            <param name="parent">The <see cref="P:Terminal.Gui.MenuItem.Parent"/> of this menu item.</param>
            <param name="shortcut">The <see cref="P:Terminal.Gui.MenuItem.Shortcut"/> keystroke combination.</param>
        </member>
        <member name="F:Terminal.Gui.MenuItem.HotKey">
            <summary>
            The HotKey is used to activate a <see cref="T:Terminal.Gui.MenuItem"/> with the keyboard. HotKeys are defined by prefixing the <see cref="P:Terminal.Gui.MenuItem.Title"/>
            of a MenuItem with an underscore ('_'). 
            <para>
            Pressing Alt-Hotkey for a <see cref="T:Terminal.Gui.MenuBarItem"/> (menu items on the menu bar) works even if the menu is not active). 
            Once a menu has focus and is active, pressing just the HotKey will activate the MenuItem.
            </para>
            <para>
            For example for a MenuBar with a "_File" MenuBarItem that contains a "_New" MenuItem, Alt-F will open the File menu.
            Pressing the N key will then activate the New MenuItem.
            </para>
            <para>
            See also <see cref="P:Terminal.Gui.MenuItem.Shortcut"/> which enable global key-bindings to menu items.
            </para>
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Shortcut">
            <summary>
            Shortcut defines a key binding to the MenuItem that will invoke the MenuItem's action globally for the <see cref="T:Terminal.Gui.View"/> that is
            the parent of the <see cref="T:Terminal.Gui.MenuBar"/> or <see cref="T:Terminal.Gui.ContextMenu"/> this <see cref="T:Terminal.Gui.MenuItem"/>.
            <para>
            The <see cref="T:Terminal.Gui.Key"/> will be drawn on the MenuItem to the right of the <see cref="P:Terminal.Gui.MenuItem.Title"/> and <see cref="P:Terminal.Gui.MenuItem.Help"/> text. See <see cref="P:Terminal.Gui.MenuItem.ShortcutTag"/>.
            </para>
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.ShortcutTag">
            <summary>
            Gets the text describing the keystroke combination defined by <see cref="P:Terminal.Gui.MenuItem.Shortcut"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Title">
            <summary>
            Gets or sets the title of the menu item .
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Help">
            <summary>
            Gets or sets the help text for the menu item. The help text is drawn to the right of the <see cref="P:Terminal.Gui.MenuItem.Title"/>.
            </summary>
            <value>The help text.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Action">
            <summary>
            Gets or sets the action to be invoked when the menu item is triggered.
            </summary>
            <value>Method to invoke.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.CanExecute">
            <summary>
            Gets or sets the action to be invoked to determine if the menu can be triggered. If <see cref="P:Terminal.Gui.MenuItem.CanExecute"/> returns <see langword="true"/>
            the menu item will be enabled. Otherwise, it will be disabled. 
            </summary>
            <value>Function to determine if the action is can be executed or not.</value>
        </member>
        <member name="M:Terminal.Gui.MenuItem.IsEnabled">
            <summary>
            Returns <see langword="true"/> if the menu item is enabled. This method is a wrapper around <see cref="P:Terminal.Gui.MenuItem.CanExecute"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Checked">
            <summary>
            Sets or gets whether the <see cref="T:Terminal.Gui.MenuItem"/> shows a check indicator or not. See <see cref="T:Terminal.Gui.MenuItemCheckStyle"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.CheckType">
            <summary>
            Sets or gets the <see cref="T:Terminal.Gui.MenuItemCheckStyle"/> of a menu item where <see cref="P:Terminal.Gui.MenuItem.Checked"/> is set to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuItem.Parent">
            <summary>
            Gets the parent for this <see cref="T:Terminal.Gui.MenuItem"/>.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Terminal.Gui.MenuItem.IsFromSubMenu">
            <summary>
            Gets if this <see cref="T:Terminal.Gui.MenuItem"/> is from a sub-menu.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.GetMenuItem">
            <summary>
            Merely a debugging aid to see the interaction with main.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuItem.GetMenuBarItem">
            <summary>
            Merely a debugging aid to see the interaction with main.
            </summary>
        </member>
        <member name="T:Terminal.Gui.MenuBarItem">
            <summary>
            <see cref="T:Terminal.Gui.MenuBarItem"/> is a menu item on an app's <see cref="T:Terminal.Gui.MenuBar"/>. 
            MenuBarItems do not support <see cref="P:Terminal.Gui.MenuItem.Shortcut"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor(NStack.ustring,NStack.ustring,System.Action,System.Func{System.Boolean},Terminal.Gui.MenuItem)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/> as a <see cref="T:Terminal.Gui.MenuItem"/>.
            </summary>
            <param name="title">Title for the menu item.</param>
            <param name="help">Help text to display. Will be displayed next to the Title surrounded by parentheses.</param>
            <param name="action">Action to invoke when the menu item is activated.</param>
            <param name="canExecute">Function to determine if the action can currently be executed.</param>
            <param name="parent">The parent <see cref="T:Terminal.Gui.MenuItem"/> of this if exist, otherwise is null.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor(NStack.ustring,Terminal.Gui.MenuItem[],Terminal.Gui.MenuItem)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/>.
            </summary>
            <param name="title">Title for the menu item.</param>
            <param name="children">The items in the current menu.</param>
            <param name="parent">The parent <see cref="T:Terminal.Gui.MenuItem"/> of this if exist, otherwise is null.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor(NStack.ustring,System.Collections.Generic.List{Terminal.Gui.MenuItem[]},Terminal.Gui.MenuItem)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/> with separate list of items.
            </summary>
            <param name="title">Title for the menu item.</param>
            <param name="children">The list of items in the current menu.</param>
            <param name="parent">The parent <see cref="T:Terminal.Gui.MenuItem"/> of this if exist, otherwise is null.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor(Terminal.Gui.MenuItem[])">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/>.
            </summary>
            <param name="children">The items in the current menu.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.#ctor">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.MenuBarItem"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.SubMenu(Terminal.Gui.MenuItem)">
            <summary>
            Check if the children parameter is a <see cref="T:Terminal.Gui.MenuBarItem"/>.
            </summary>
            <param name="children"></param>
            <returns>Returns a <see cref="T:Terminal.Gui.MenuBarItem"/> or null otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.IsSubMenuOf(Terminal.Gui.MenuItem)">
            <summary>
            Check if the <see cref="T:Terminal.Gui.MenuItem"/> parameter is a child of this.
            </summary>
            <param name="menuItem"></param>
            <returns>Returns <c>true</c> if it is a child of this. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.MenuBarItem.GetChildrenIndex(Terminal.Gui.MenuItem)">
            <summary>
            Get the index of the <see cref="T:Terminal.Gui.MenuItem"/> parameter.
            </summary>
            <param name="children"></param>
            <returns>Returns a value bigger than -1 if the <see cref="T:Terminal.Gui.MenuItem"/> is a child of this.</returns>
        </member>
        <member name="P:Terminal.Gui.MenuBarItem.Children">
            <summary>
            Gets or sets an array of <see cref="T:Terminal.Gui.MenuItem"/> objects that are the children of this <see cref="T:Terminal.Gui.MenuBarItem"/>
            </summary>
            <value>The children.</value>
        </member>
        <member name="M:Terminal.Gui.Menu.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.MenuBar">
            <summary>
            <para>
            Provides a menu bar that spans the top of a <see cref="T:Terminal.Gui.Toplevel"/> View with drop-down and cascading menus. 
            </para>
            <para>
            By default, any sub-sub-menus (sub-menus of the <see cref="T:Terminal.Gui.MenuItem"/>s added to <see cref="T:Terminal.Gui.MenuBarItem"/>s) 
            are displayed in a cascading manner, where each sub-sub-menu pops out of the sub-menu frame
            (either to the right or left, depending on where the sub-menu is relative to the edge of the screen). By setting
            <see cref="P:Terminal.Gui.MenuBar.UseSubMenusSingleFrame"/> to <see langword="true"/>, this behavior can be changed such that all sub-sub-menus are
            drawn within a single frame below the MenuBar.
            </para>
            </summary>
            <remarks>
            <para>
            The <see cref="T:Terminal.Gui.MenuBar"/> appears on the first row of the parent <see cref="T:Terminal.Gui.Toplevel"/> View and uses the full width.
            </para>
            <para>
            The <see cref="T:Terminal.Gui.MenuBar"/> provides global hotkeys for the application. See <see cref="F:Terminal.Gui.MenuItem.HotKey"/>.
            </para>
            <para>
            See also: <see cref="T:Terminal.Gui.ContextMenu"/>
            </para>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.MenuBar.Menus">
            <summary>
            Gets or sets the array of <see cref="T:Terminal.Gui.MenuBarItem"/>s for the menu. Only set this after the <see cref="T:Terminal.Gui.MenuBar"/> is visible.
            </summary>
            <value>The menu array.</value>
        </member>
        <member name="P:Terminal.Gui.MenuBar.UseKeysUpDownAsKeysLeftRight">
            <summary>
            Used for change the navigation key style.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.ShortcutDelimiter">
            <summary>
            Sets or gets the shortcut delimiter separator. The default is "+".
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.HotKeySpecifier">
            <summary>
            The specifier character for the hotkey to all menus.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.UseSubMenusSingleFrame">
            <summary>
            Gets or sets if the sub-menus must be displayed in a single or multiple frames.
            <para>
            By default any sub-sub-menus (sub-menus of the main <see cref="T:Terminal.Gui.MenuItem"/>s) are displayed in a cascading manner, 
            where each sub-sub-menu pops out of the sub-menu frame
            (either to the right or left, depending on where the sub-menu is relative to the edge of the screen). By setting
            <see cref="P:Terminal.Gui.MenuBar.UseSubMenusSingleFrame"/> to <see langword="true"/>, this behavior can be changed such that all sub-sub-menus are
            drawn within a single frame below the MenuBar.
            </para>		
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.Key">
            <summary>
            The <see cref="T:Terminal.Gui.Key"/> used to activate the menu bar by keyboard.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.Visible">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.MenuBar"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.#ctor(Terminal.Gui.MenuBarItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.MenuBar"/> class with the specified set of toplevel menu items.
            </summary>
            <param name="menus">Individual menu items; a null item will result in a separator being drawn.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnKeyDown(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnKeyUp(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.MenuBar.MenuOpening">
            <summary>
            Raised as a menu is opening.
            </summary>
        </member>
        <member name="E:Terminal.Gui.MenuBar.MenuOpened">
            <summary>
            Raised when a menu is opened.
            </summary>
        </member>
        <member name="E:Terminal.Gui.MenuBar.MenuClosing">
            <summary>
            Raised when a menu is closing passing <see cref="T:Terminal.Gui.MenuClosingEventArgs"/>.
            </summary>
        </member>
        <member name="E:Terminal.Gui.MenuBar.MenuAllClosed">
            <summary>
            Raised when all the menu is closed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.IsMenuOpen">
            <summary>
            <see langword="true"/> if the menu is open; otherwise <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnMenuOpening(Terminal.Gui.MenuBarItem)">
            <summary>
            Virtual method that will invoke the <see cref="E:Terminal.Gui.MenuBar.MenuOpening"/> event if it's defined.
            </summary>
            <param name="currentMenu">The current menu to be replaced.</param>
            <returns>Returns the <see cref="T:Terminal.Gui.MenuOpeningEventArgs"/></returns>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnMenuOpened">
            <summary>
            Virtual method that will invoke the <see cref="E:Terminal.Gui.MenuBar.MenuOpened"/> event if it's defined.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnMenuClosing(Terminal.Gui.MenuBarItem,System.Boolean,System.Boolean)">
            <summary>
            Virtual method that will invoke the <see cref="E:Terminal.Gui.MenuBar.MenuClosing"/>.
            </summary>
            <param name="currentMenu">The current menu to be closed.</param>
            <param name="reopen">Whether the current menu will be reopen.</param>
            <param name="isSubMenu">Whether is a sub-menu or not.</param>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnMenuAllClosed">
            <summary>
            Virtual method that will invoke the <see cref="E:Terminal.Gui.MenuBar.MenuAllClosed"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuBar.LastFocused">
            <summary>
            Gets the view that was last focused before opening the menu.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OpenMenu">
            <summary>
            Opens the Menu programatically, as though the F9 key were pressed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.CloseMenu(System.Boolean)">
            <summary>
            Closes the Menu programmatically if open and not canceled (as though F9 were pressed).
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuBar.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.MenuBar.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.MenuOpeningEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> which allows passing a cancelable menu opening event or replacing with a new <see cref="T:Terminal.Gui.MenuBarItem"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuOpeningEventArgs.CurrentMenu">
            <summary>
            The current <see cref="T:Terminal.Gui.MenuBarItem"/> parent.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuOpeningEventArgs.NewMenuBarItem">
            <summary>
            The new <see cref="T:Terminal.Gui.MenuBarItem"/> to be replaced.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuOpeningEventArgs.Cancel">
            <summary>
            Flag that allows the cancellation of the event. If set to <see langword="true"/> in the
            event handler, the event will be canceled. 
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuOpeningEventArgs.#ctor(Terminal.Gui.MenuBarItem)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.MenuOpeningEventArgs"/>.
            </summary>
            <param name="currentMenu">The current <see cref="T:Terminal.Gui.MenuBarItem"/> parent.</param>
        </member>
        <member name="T:Terminal.Gui.MenuClosingEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> which allows passing a cancelable menu closing event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuClosingEventArgs.CurrentMenu">
            <summary>
            The current <see cref="T:Terminal.Gui.MenuBarItem"/> parent.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuClosingEventArgs.Reopen">
            <summary>
            Indicates whether the current menu will reopen.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuClosingEventArgs.IsSubMenu">
            <summary>
            Indicates whether the current menu is a sub-menu.
            </summary>
        </member>
        <member name="P:Terminal.Gui.MenuClosingEventArgs.Cancel">
            <summary>
            Flag that allows the cancellation of the event. If set to <see langword="true"/> in the
            event handler, the event will be canceled. 
            </summary>
        </member>
        <member name="M:Terminal.Gui.MenuClosingEventArgs.#ctor(Terminal.Gui.MenuBarItem,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.MenuClosingEventArgs"/>.
            </summary>
            <param name="currentMenu">The current <see cref="T:Terminal.Gui.MenuBarItem"/> parent.</param>
            <param name="reopen">Whether the current menu will reopen.</param>
            <param name="isSubMenu">Indicates whether it is a sub-menu.</param>
        </member>
        <member name="T:Terminal.Gui.PanelView">
            <summary>
            A container for single <see cref="P:Terminal.Gui.PanelView.Child"/> that will allow to drawn <see cref="P:Terminal.Gui.PanelView.Border"/> in
             two ways. If <see cref="P:Terminal.Gui.PanelView.UsePanelFrame"/> the borders and the child will be accommodated in the available
             panel size, otherwise the panel will be resized based on the child and borders thickness sizes.
            </summary>
        </member>
        <member name="M:Terminal.Gui.PanelView.#ctor">
            <summary>
            Initializes a panel with a null child.
            </summary>
        </member>
        <member name="M:Terminal.Gui.PanelView.#ctor(Terminal.Gui.View)">
            <summary>
            Initializes a panel with a valid child.
            </summary>
            <param name="child"></param>
        </member>
        <member name="P:Terminal.Gui.PanelView.UsePanelFrame">
            <summary>
            Gets or sets if the panel size will used, otherwise the child size.
            </summary>
        </member>
        <member name="P:Terminal.Gui.PanelView.Child">
            <summary>
            The child that will use this panel.
            </summary>
        </member>
        <member name="P:Terminal.Gui.PanelView.Border">
            <inheritdoc />
        </member>
        <member name="M:Terminal.Gui.PanelView.Add(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.PanelView.Remove(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.PanelView.RemoveAll">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.PanelView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ProgressBarStyle">
            <summary>
            Specifies the style that a <see cref="T:Terminal.Gui.ProgressBar"/> uses to indicate the progress of an operation.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarStyle.Blocks">
            <summary>
            Indicates progress by increasing the number of segmented blocks in a <see cref="T:Terminal.Gui.ProgressBar"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarStyle.Continuous">
            <summary>
            Indicates progress by increasing the size of a smooth, continuous bar in a <see cref="T:Terminal.Gui.ProgressBar"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarStyle.MarqueeBlocks">
            <summary>
            Indicates progress by continuously scrolling a block across a <see cref="T:Terminal.Gui.ProgressBar"/> in a marquee fashion.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarStyle.MarqueeContinuous">
            <summary>
            Indicates progress by continuously scrolling a block across a <see cref="T:Terminal.Gui.ProgressBar"/> in a marquee fashion.
            </summary>
        </member>
        <member name="T:Terminal.Gui.ProgressBarFormat">
             <summary>
            Specifies the format that a <see cref="T:Terminal.Gui.ProgressBar"/> uses to indicate the visual presentation.
             </summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarFormat.Simple">
            <summary>
            A simple visual presentation showing only the progress bar.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarFormat.SimplePlusPercentage">
            <summary>
            A simple visual presentation showing the progress bar and the percentage.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarFormat.Framed">
            <summary>
            A framed visual presentation showing only the progress bar.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarFormat.FramedPlusPercentage">
            <summary>
            A framed visual presentation showing the progress bar and the percentage.
            </summary>
        </member>
        <member name="F:Terminal.Gui.ProgressBarFormat.FramedProgressPadded">
            <summary>
            A framed visual presentation showing all with the progress bar padded.
            </summary>
        </member>
        <member name="T:Terminal.Gui.ProgressBar">
            <summary>
            A Progress Bar view that can indicate progress of an activity visually.
            </summary>
            <remarks>
              <para>
                <see cref="T:Terminal.Gui.ProgressBar"/> can operate in two modes, percentage mode, or
                activity mode.  The progress bar starts in percentage mode and
                setting the Fraction property will reflect on the UI the progress 
                made so far.   Activity mode is used when the application has no 
                way of knowing how much time is left, and is started when the <see cref="M:Terminal.Gui.ProgressBar.Pulse"/> method is called.  
                Call <see cref="M:Terminal.Gui.ProgressBar.Pulse"/> repeatedly as progress is made.
              </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.#ctor(Terminal.Gui.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ProgressBar"/> class, starts in percentage mode with an absolute position and size.
            </summary>
            <param name="rect">Rect.</param>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ProgressBar"/> class, starts in percentage mode and uses relative layout.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.Fraction">
            <summary>
            Gets or sets the <see cref="T:Terminal.Gui.ProgressBar"/> fraction to display, must be a value between 0 and 1.
            </summary>
            <value>The fraction representing the progress.</value>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.ProgressBarStyle">
            <summary>
            Gets/Sets the progress bar style based on the <see cref="T:Terminal.Gui.ProgressBarStyle"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.ProgressBarFormat">
            <summary>
            Specifies the format that a <see cref="T:Terminal.Gui.ProgressBar"/> uses to indicate the visual presentation.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.SegmentCharacter">
            <summary>
            Segment indicator for meter views.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.Text">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.ProgressBar.BidirectionalMarquee">
            <summary>
            Specifies if the <see cref="F:Terminal.Gui.ProgressBarStyle.MarqueeBlocks"/> or the
             <see cref="F:Terminal.Gui.ProgressBarStyle.MarqueeContinuous"/> styles is unidirectional
             or bidirectional.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.Pulse">
            <summary>
            Notifies the <see cref="T:Terminal.Gui.ProgressBar"/> that some progress has taken place.
            </summary>
            <remarks>
            If the <see cref="T:Terminal.Gui.ProgressBar"/> is percentage mode, it switches to activity
            mode. If is in activity mode, the marker is moved.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ProgressBar.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.RadioGroup">
            <summary>
            Displays a group of labels each with a selected indicator. Only one of those can be selected at a given time.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.RadioGroup"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.#ctor(NStack.ustring[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.RadioGroup"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="radioLabels">The radio labels; an array of strings that can contain hotkeys using an underscore before the letter.</param>
            <param name="selected">The index of the item to be selected, the value is clamped to the number of items.</param>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.#ctor(Terminal.Gui.Rect,NStack.ustring[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.RadioGroup"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <param name="rect">Boundaries for the radio group.</param>
            <param name="radioLabels">The radio labels; an array of strings that can contain hotkeys using an underscore before the letter.</param>
            <param name="selected">The index of item to be selected, the value is clamped to the number of items.</param>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.#ctor(System.Int32,System.Int32,NStack.ustring[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.RadioGroup"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            The <see cref="T:Terminal.Gui.View"/> frame is computed from the provided radio labels.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="radioLabels">The radio labels; an array of strings that can contain hotkeys using an underscore before the letter.</param>
            <param name="selected">The item to be selected, the value is clamped to the number of items.</param>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.DisplayMode">
            <summary>
            Gets or sets the <see cref="T:Terminal.Gui.DisplayModeLayout"/> for this <see cref="T:Terminal.Gui.RadioGroup"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.HorizontalSpace">
            <summary>
            Gets or sets the horizontal space for this <see cref="T:Terminal.Gui.RadioGroup"/> if the <see cref="P:Terminal.Gui.RadioGroup.DisplayMode"/> is <see cref="F:Terminal.Gui.DisplayModeLayout.Horizontal"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.RadioLabels">
            <summary>
            The radio labels to display
            </summary>
            <value>The radio labels.</value>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="E:Terminal.Gui.RadioGroup.SelectedItemChanged">
            <summary>
            Invoked when the selected radio label has changed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.RadioGroup.SelectedItem">
            <summary>
            The currently selected item from the list of radio labels
            </summary>
            <value>The selected.</value>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.Refresh">
            <summary>
            Allow to invoke the <see cref="E:Terminal.Gui.RadioGroup.SelectedItemChanged"/> after their creation.
            </summary>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.OnSelectedItemChanged(System.Int32,System.Int32)">
            <summary>
            Called whenever the current selected item changes. Invokes the <see cref="E:Terminal.Gui.RadioGroup.SelectedItemChanged"/> event.
            </summary>
            <param name="selectedItem"></param>
            <param name="previousSelectedItem"></param>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.ProcessColdKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.RadioGroup.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.DisplayModeLayout">
            <summary>
            Used for choose the display mode of this <see cref="T:Terminal.Gui.RadioGroup"/>
            </summary>
        </member>
        <member name="F:Terminal.Gui.DisplayModeLayout.Vertical">
            <summary>
            Vertical mode display. It's the default.
            </summary>
        </member>
        <member name="F:Terminal.Gui.DisplayModeLayout.Horizontal">
            <summary>
            Horizontal mode display.
            </summary>
        </member>
        <member name="T:Terminal.Gui.SelectedItemChangedArgs">
            <summary>
            Event arguments for the SelectedItemChagned event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.SelectedItemChangedArgs.PreviousSelectedItem">
            <summary>
            Gets the index of the item that was previously selected. -1 if there was no previous selection.
            </summary>
        </member>
        <member name="P:Terminal.Gui.SelectedItemChangedArgs.SelectedItem">
            <summary>
            Gets the index of the item that is now selected. -1 if there is no selection.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SelectedItemChangedArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.SelectedItemChangedArgs"/> class.
            </summary>
            <param name="selectedItem"></param>
            <param name="previousSelectedItem"></param>
        </member>
        <member name="T:Terminal.Gui.ScrollBarView">
            <summary>
            ScrollBarViews are views that display a 1-character scrollbar, either horizontal or vertical
            </summary>
            <remarks>
            <para>
              The scrollbar is drawn to be a representation of the Size, assuming that the 
              scroll position is set at Position.
            </para>
            <para>
              If the region to display the scrollbar is larger than three characters, 
              arrow indicators are drawn.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.#ctor(Terminal.Gui.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollBarView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <param name="rect">Frame for the scrollbar.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.#ctor(Terminal.Gui.Rect,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollBarView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> layout.
            </summary>
            <param name="rect">Frame for the scrollbar.</param>
            <param name="size">The size that this scrollbar represents. Sets the <see cref="P:Terminal.Gui.ScrollBarView.Size"/> property.</param>
            <param name="position">The position within this scrollbar. Sets the <see cref="P:Terminal.Gui.ScrollBarView.Position"/> property.</param>
            <param name="isVertical">If set to <c>true</c> this is a vertical scrollbar, otherwise, the scrollbar is horizontal. Sets the <see cref="P:Terminal.Gui.ScrollBarView.IsVertical"/> property.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollBarView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollBarView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="size">The size that this scrollbar represents.</param>
            <param name="position">The position within this scrollbar.</param>
            <param name="isVertical">If set to <c>true</c> this is a vertical scrollbar, otherwise, the scrollbar is horizontal.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.#ctor(Terminal.Gui.View,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollBarView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
            <param name="host">The view that will host this scrollbar.</param>
            <param name="isVertical">If set to <c>true</c> this is a vertical scrollbar, otherwise, the scrollbar is horizontal.</param>
            <param name="showBothScrollIndicator">If set to <c>true (default)</c> will have the other scrollbar, otherwise will have only one.</param>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.IsVertical">
            <summary>
            If set to <c>true</c> this is a vertical scrollbar, otherwise, the scrollbar is horizontal.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.Size">
            <summary>
            The size of content the scrollbar represents.
            </summary>
            <value>The size.</value>
            <remarks>The <see cref="P:Terminal.Gui.ScrollBarView.Size"/> is typically the size of the virtual content. E.g. when a Scrollbar is
            part of a <see cref="T:Terminal.Gui.View"/> the Size is set to the appropriate dimension of <see cref="P:Terminal.Gui.ScrollBarView.Host"/>.</remarks>
        </member>
        <member name="E:Terminal.Gui.ScrollBarView.ChangedPosition">
            <summary>
            This event is raised when the position on the scrollbar has changed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.Position">
            <summary>
            The position, relative to <see cref="P:Terminal.Gui.ScrollBarView.Size"/>, to set the scrollbar at.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.Host">
            <summary>
            Get or sets the view that host this <see cref="T:Terminal.Gui.View"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.OtherScrollBarView">
            <summary>
            Represent a vertical or horizontal ScrollBarView other than this.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.ShowScrollIndicator">
            <summary>
            Gets or sets the visibility for the vertical or horizontal scroll indicator.
            </summary>
            <value><c>true</c> if show vertical or horizontal scroll indicator; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.KeepContentAlwaysInViewport">
            <summary>
            Get or sets if the view-port is kept always visible in the area of this <see cref="T:Terminal.Gui.ScrollBarView"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollBarView.AutoHideScrollBars">
            <summary>
            If true the vertical/horizontal scroll bars won't be showed if it's not needed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.OnChangedPosition">
            <summary>
            Virtual method to invoke the <see cref="E:Terminal.Gui.ScrollBarView.ChangedPosition"/> action event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.Refresh">
            <summary>
            Only used for a hosted view that will update and redraw the scrollbars.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollBarView.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.ScrollView">
            <summary>
            Scrollviews are views that present a window into a virtual space where subviews are added.  Similar to the iOS UIScrollView.
            </summary>
            <remarks>
            <para>
              The subviews that are added to this <see cref="T:Terminal.Gui.ScrollView"/> are offset by the
              <see cref="P:Terminal.Gui.ScrollView.ContentOffset"/> property.  The view itself is a window into the 
              space represented by the <see cref="P:Terminal.Gui.ScrollView.ContentSize"/>.
            </para>
            <para>
              Use the 
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.ScrollView.#ctor(Terminal.Gui.Rect)">
            <summary>
             Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> positioning.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:Terminal.Gui.ScrollView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollView.ContentSize">
            <summary>
            Represents the contents of the data shown inside the scrollview
            </summary>
            <value>The size of the content.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollView.ContentOffset">
            <summary>
            Represents the top left corner coordinate that is displayed by the scrollview
            </summary>
            <value>The content offset.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollView.AutoHideScrollBars">
            <summary>
            If true the vertical/horizontal scroll bars won't be showed if it's not needed.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ScrollView.KeepContentAlwaysInViewport">
            <summary>
            Get or sets if the view-port is kept always visible in the area of this <see cref="T:Terminal.Gui.ScrollView"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.ScrollView.Add(Terminal.Gui.View)">
            <summary>
            Adds the view to the scrollview.
            </summary>
            <param name="view">The view to add to the scrollview.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.Remove(Terminal.Gui.View)">
            <summary>
            Removes the view from the scrollview.
            </summary>
            <param name="view">The view to remove from the scrollview.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.RemoveAll">
            <summary>
              Removes all widgets from this container.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.ScrollView.ShowHorizontalScrollIndicator">
            <summary>
            Gets or sets the visibility for the horizontal scroll indicator.
            </summary>
            <value><c>true</c> if show horizontal scroll indicator; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.ScrollView.ShowVerticalScrollIndicator">
            <summary>
            Gets or sets the visibility for the vertical scroll indicator.
            </summary>
            <value><c>true</c> if show vertical scroll indicator; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Terminal.Gui.ScrollView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollUp(System.Int32)">
            <summary>
            Scrolls the view up.
            </summary>
            <returns><c>true</c>, if left was scrolled, <c>false</c> otherwise.</returns>
            <param name="lines">Number of lines to scroll.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollLeft(System.Int32)">
            <summary>
            Scrolls the view to the left
            </summary>
            <returns><c>true</c>, if left was scrolled, <c>false</c> otherwise.</returns>
            <param name="cols">Number of columns to scroll by.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollDown(System.Int32)">
            <summary>
            Scrolls the view down.
            </summary>
            <returns><c>true</c>, if left was scrolled, <c>false</c> otherwise.</returns>
            <param name="lines">Number of lines to scroll.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ScrollRight(System.Int32)">
            <summary>
            Scrolls the view to the right.
            </summary>
            <returns><c>true</c>, if right was scrolled, <c>false</c> otherwise.</returns>
            <param name="cols">Number of columns to scroll by.</param>
        </member>
        <member name="M:Terminal.Gui.ScrollView.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.ScrollView.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.StatusItem">
            <summary>
            <see cref="T:Terminal.Gui.StatusItem"/> objects are contained by <see cref="T:Terminal.Gui.StatusBar"/> <see cref="T:Terminal.Gui.View"/>s. 
            Each <see cref="T:Terminal.Gui.StatusItem"/> has a title, a shortcut (hotkey), and an <see cref="P:Terminal.Gui.StatusItem.Action"/> that will be invoked when the 
            <see cref="P:Terminal.Gui.StatusItem.Shortcut"/> is pressed.
            The <see cref="P:Terminal.Gui.StatusItem.Shortcut"/> will be a global hotkey for the application in the current context of the screen.
            The colour of the <see cref="P:Terminal.Gui.StatusItem.Title"/> will be changed after each ~ (can be customized using <see cref="P:Terminal.Gui.StatusItem.HotTextSpecifier"/>).
            A <see cref="P:Terminal.Gui.StatusItem.Title"/> set to `~F1~ Help` will render as *F1* using <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/> and
            *Help* as <see cref="P:Terminal.Gui.ColorScheme.Normal"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.StatusItem.#ctor(Terminal.Gui.Key,NStack.ustring,System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.StatusItem"/>.
            </summary>
            <param name="shortcut">Shortcut to activate the <see cref="T:Terminal.Gui.StatusItem"/>.</param>
            <param name="title">Title for the <see cref="T:Terminal.Gui.StatusItem"/>.</param>
            <param name="action">Action to invoke when the <see cref="T:Terminal.Gui.StatusItem"/> is activated.</param>
            <param name="canExecute">Function to determine if the action can currently be executed.</param>
        </member>
        <member name="P:Terminal.Gui.StatusItem.Shortcut">
            <summary>
            Gets the global shortcut to invoke the action on the menu.
            </summary>
        </member>
        <member name="P:Terminal.Gui.StatusItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
            <remarks>
            The colour of the <see cref="P:Terminal.Gui.StatusItem.Title"/> will be changed after each ~. 
            A <see cref="P:Terminal.Gui.StatusItem.Title"/> set to `~F1~ Help` will render as *F1* using <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/> and
            *Help* as <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/>.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.StatusItem.Action">
            <summary>
            Gets or sets the action to be invoked when the statusbar item is triggered
            </summary>
            <value>Action to invoke.</value>
        </member>
        <member name="P:Terminal.Gui.StatusItem.CanExecute">
            <summary>
            Gets or sets the action to be invoked to determine if the <see cref="T:Terminal.Gui.StatusItem"/> can be triggered. 
            If <see cref="P:Terminal.Gui.StatusItem.CanExecute"/> returns <see langword="true"/> the status item will be enabled. Otherwise, it will be disabled.
            </summary>
            <value>Function to determine if the action is can be executed or not.</value>
        </member>
        <member name="P:Terminal.Gui.StatusItem.HotTextSpecifier">
            <summary>
            Gets or sets the rune that toggles the text color between <see cref="P:Terminal.Gui.ColorScheme.Normal"/> and <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/>.
            The default value is '~'.
            Therefore, '~F1~ Help' will be rendered as 'F1' using <see cref="P:Terminal.Gui.ColorScheme.HotNormal"/> and 'Help' using <see cref="P:Terminal.Gui.ColorScheme.Normal"/>.
            In order to use '~' as part of the title (e.g., to denote the home directory as a part of the current directory),
            <see cref="P:Terminal.Gui.StatusItem.HotTextSpecifier"/> should be changed to a different rune.
            </summary>
        </member>
        <member name="M:Terminal.Gui.StatusItem.IsEnabled">
            <summary>
            Returns <see langword="true"/> if the status item is enabled. This method is a wrapper around <see cref="P:Terminal.Gui.StatusItem.CanExecute"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.StatusItem.Data">
            <summary>
            Gets or sets arbitrary data for the status item.
            </summary>
            <remarks>This property is not used internally.</remarks>
        </member>
        <member name="T:Terminal.Gui.StatusBar">
            <summary>
            A status bar is a <see cref="T:Terminal.Gui.View"/> that snaps to the bottom of a <see cref="T:Terminal.Gui.Toplevel"/> displaying set of <see cref="T:Terminal.Gui.StatusItem"/>s.
            The <see cref="T:Terminal.Gui.StatusBar"/> should be context sensitive. This means, if the main menu and an open text editor are visible, the items probably shown will
            be ~F1~ Help ~F2~ Save ~F3~ Load. While a dialog to ask a file to load is executed, the remaining commands will probably be ~F1~ Help.
            So for each context must be a new instance of a statusbar.
            </summary>
        </member>
        <member name="P:Terminal.Gui.StatusBar.Items">
            <summary>
            The items that compose the <see cref="T:Terminal.Gui.StatusBar"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.StatusBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.StatusBar"/> class.
            </summary>
        </member>
        <member name="M:Terminal.Gui.StatusBar.#ctor(Terminal.Gui.StatusItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.StatusBar"/> class with the specified set of <see cref="T:Terminal.Gui.StatusItem"/>s.
            The <see cref="T:Terminal.Gui.StatusBar"/> will be drawn on the lowest line of the terminal or <see cref="P:Terminal.Gui.View.SuperView"/> (if not null).
            </summary>
            <param name="items">A list of statusbar items.</param>
        </member>
        <member name="P:Terminal.Gui.StatusBar.ShortcutDelimiter">
            <summary>
            Used for change the shortcut delimiter separator.
            </summary>
        </member>
        <member name="M:Terminal.Gui.StatusBar.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.StatusBar.ProcessHotKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.StatusBar.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.StatusBar.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.StatusBar.AddItemAt(System.Int32,Terminal.Gui.StatusItem)">
            <summary>
            Inserts a <see cref="T:Terminal.Gui.StatusItem"/> in the specified index of <see cref="P:Terminal.Gui.StatusBar.Items"/>.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Terminal.Gui.StatusBar.RemoveItem(System.Int32)">
            <summary>
            Removes a <see cref="T:Terminal.Gui.StatusItem"/> at specified index of <see cref="P:Terminal.Gui.StatusBar.Items"/>.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <returns>The <see cref="T:Terminal.Gui.StatusItem"/> removed.</returns>
        </member>
        <member name="T:Terminal.Gui.TableView">
            <summary>
            View for tabular data based on a <see cref="T:System.Data.DataTable"/>.
            
            <a href="https://gui-cs.github.io/Terminal.Gui/articles/tableview.html">See TableView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="T:Terminal.Gui.TableView.CellActivatedEventArgs">
            <summary>
             Defines the event arguments for <see cref="E:Terminal.Gui.TableView.CellActivated"/> event
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.CellActivatedEventArgs.Table">
            <summary>
            The current table to which the new indexes refer.  May be null e.g. if selection change is the result of clearing the table from the view
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableView.CellActivatedEventArgs.Col">
            <summary>
            The column index of the <see cref="P:Terminal.Gui.TableView.CellActivatedEventArgs.Table"/> cell that is being activated
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableView.CellActivatedEventArgs.Row">
            <summary>
            The row index of the <see cref="P:Terminal.Gui.TableView.CellActivatedEventArgs.Table"/> cell that is being activated
            </summary>
            <value></value>
        </member>
        <member name="M:Terminal.Gui.TableView.CellActivatedEventArgs.#ctor(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of arguments describing a cell being activated in <see cref="T:Terminal.Gui.TableView"/>
            </summary>
            <param name="t"></param>
            <param name="col"></param>
            <param name="row"></param>
        </member>
        <member name="F:Terminal.Gui.TableView.DefaultMaxCellWidth">
            <summary>
            The default maximum cell width for <see cref="P:Terminal.Gui.TableView.MaxCellWidth"/> and <see cref="P:Terminal.Gui.TableView.ColumnStyle.MaxWidth"/>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TableView.DefaultMinAcceptableWidth">
            <summary>
            The default minimum cell width for <see cref="P:Terminal.Gui.TableView.ColumnStyle.MinAcceptableWidth"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.Table">
            <summary>
            The data table to render in the view.  Setting this property automatically updates and redraws the control.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.Style">
            <summary>
            Contains options for changing how the table is rendered
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.FullRowSelect">
            <summary>
            True to select the entire row at once.  False to select individual cells.  Defaults to false
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.MultiSelect">
            <summary>
            True to allow regions to be selected 
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableView.MultiSelectedRegions">
            <summary>
            When <see cref="P:Terminal.Gui.TableView.MultiSelect"/> is enabled this property contain all rectangles of selected cells.  Rectangles describe column/rows selected in <see cref="P:Terminal.Gui.TableView.Table"/> (not screen coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnOffset">
            <summary>
            Horizontal scroll offset.  The index of the first column in <see cref="P:Terminal.Gui.TableView.Table"/> to display when when rendering the view.
            </summary>
            <remarks>This property allows very wide tables to be rendered with horizontal scrolling</remarks>
        </member>
        <member name="P:Terminal.Gui.TableView.RowOffset">
            <summary>
            Vertical scroll offset.  The index of the first row in <see cref="P:Terminal.Gui.TableView.Table"/> to display in the first non header line of the control when rendering the view.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.SelectedColumn">
            <summary>
            The index of <see cref="P:System.Data.DataTable.Columns"/> in <see cref="P:Terminal.Gui.TableView.Table"/> that the user has currently selected
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.SelectedRow">
            <summary>
            The index of <see cref="P:System.Data.DataTable.Rows"/> in <see cref="P:Terminal.Gui.TableView.Table"/> that the user has currently selected
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.MaxCellWidth">
            <summary>
            The maximum number of characters to render in any given column.  This prevents one long column from pushing out all the others
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.NullSymbol">
            <summary>
            The text representation that should be rendered for cells with the value <see cref="F:System.DBNull.Value"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.SeparatorSymbol">
            <summary>
            The symbol to add after each cell value and header value to visually seperate values (if not using vertical gridlines)
            </summary>
        </member>
        <member name="E:Terminal.Gui.TableView.SelectedCellChanged">
            <summary>
            This event is raised when the selected cell in the table changes.
            </summary>
        </member>
        <member name="E:Terminal.Gui.TableView.CellActivated">
            <summary>
            This event is raised when a cell is activated e.g. by double clicking or pressing <see cref="P:Terminal.Gui.TableView.CellActivationKey"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.CellActivationKey">
            <summary>
            The key which when pressed should trigger <see cref="E:Terminal.Gui.TableView.CellActivated"/> event.  Defaults to Enter.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TableView.#ctor(System.Data.DataTable)">
            <summary>
            Initialzies a <see cref="T:Terminal.Gui.TableView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout. 
            </summary>
            <param name="table">The table to display in the control</param>
        </member>
        <member name="M:Terminal.Gui.TableView.#ctor">
            <summary>
            Initialzies a <see cref="T:Terminal.Gui.TableView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout. Set the <see cref="P:Terminal.Gui.TableView.Table"/> property to begin editing
            </summary>
        </member>
        <member name="M:Terminal.Gui.TableView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TableView.ClearLine(System.Int32,System.Int32)">
            <summary>
            Clears a line of the console by filling it with spaces
            </summary>
            <param name="row"></param>
            <param name="width"></param>
        </member>
        <member name="M:Terminal.Gui.TableView.GetHeaderHeightIfAny">
            <summary>
            Returns the amount of vertical space currently occupied by the header or 0 if it is not visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.GetHeaderHeight">
            <summary>
            Returns the amount of vertical space required to display the header
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.RenderCell(Terminal.Gui.Attribute,System.String,System.Boolean)">
            <summary>
            Override to provide custom multi colouring to cells.  Use <see cref="P:Terminal.Gui.View.Driver"/> to
            with <see cref="M:Terminal.Gui.ConsoleDriver.AddStr(NStack.ustring)"/>.  The driver will already be
            in the correct place when rendering and you must render the full <paramref name="render"/>
            or the view will not look right.  For simpler provision of color use <see cref="F:Terminal.Gui.TableView.ColumnStyle.ColorGetter"/>
            For changing the content that is rendered use <see cref="F:Terminal.Gui.TableView.ColumnStyle.RepresentationGetter"/>
            </summary>
            <param name="cellColor"></param>
            <param name="render"></param>
            <param name="isPrimaryCell"></param>
        </member>
        <member name="M:Terminal.Gui.TableView.TruncateOrPad(System.Object,System.String,System.Int32,Terminal.Gui.TableView.ColumnStyle)">
            <summary>
            Truncates or pads <paramref name="representation"/> so that it occupies a exactly <paramref name="availableHorizontalSpace"/> using the alignment specified in <paramref name="colStyle"/> (or left if no style is defined)
            </summary>
            <param name="originalCellValue">The object in this cell of the <see cref="P:Terminal.Gui.TableView.Table"/></param>
            <param name="representation">The string representation of <paramref name="originalCellValue"/></param>
            <param name="availableHorizontalSpace"></param>
            <param name="colStyle">Optional style indicating custom alignment for the cell</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TableView.SetSelection(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the <see cref="P:Terminal.Gui.TableView.SelectedRow"/> and <see cref="P:Terminal.Gui.TableView.SelectedColumn"/> to the given col/row in <see cref="P:Terminal.Gui.TableView.Table"/>. Optionally starting a box selection (see <see cref="P:Terminal.Gui.TableView.MultiSelect"/>)
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="extendExistingSelection">True to create a multi cell selection or adjust an existing one</param>
        </member>
        <member name="M:Terminal.Gui.TableView.UnionSelection(System.Int32,System.Int32)">
            <summary>
            Unions the current selected cell (and/or regions) with the provided cell and makes
            it the active one.
            </summary>
            <param name="col"></param>
            <param name="row"></param>
        </member>
        <member name="M:Terminal.Gui.TableView.ChangeSelectionByOffset(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the <see cref="P:Terminal.Gui.TableView.SelectedRow"/> and <see cref="P:Terminal.Gui.TableView.SelectedColumn"/> by the provided offsets. Optionally starting a box selection (see <see cref="P:Terminal.Gui.TableView.MultiSelect"/>)
            </summary>
            <param name="offsetX">Offset in number of columns</param>
            <param name="offsetY">Offset in number of rows</param>
            <param name="extendExistingSelection">True to create a multi cell selection or adjust an existing one</param>
        </member>
        <member name="M:Terminal.Gui.TableView.PageUp(System.Boolean)">
            <summary>
            Moves the selection up by one page
            </summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.PageDown(System.Boolean)">
            <summary>
            Moves the selection down by one page
            </summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.ChangeSelectionToStartOfTable(System.Boolean)">
            <summary>
            Moves or extends the selection to the first cell in the table (0,0).
            If <see cref="P:Terminal.Gui.TableView.FullRowSelect"/> is enabled then selection instead moves
            to (<see cref="P:Terminal.Gui.TableView.SelectedColumn"/>,0) i.e. no horizontal scrolling.
            </summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.ChangeSelectionToEndOfTable(System.Boolean)">
            <summary>
            Moves or extends the selection to the final cell in the table (nX,nY).
            If <see cref="P:Terminal.Gui.TableView.FullRowSelect"/> is enabled then selection instead moves
            to (<see cref="P:Terminal.Gui.TableView.SelectedColumn"/>,nY) i.e. no horizontal scrolling.
            </summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.ChangeSelectionToEndOfRow(System.Boolean)">
            <summary>
            Moves or extends the selection to the last cell in the current row
            </summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.ChangeSelectionToStartOfRow(System.Boolean)">
            <summary>
            Moves or extends the selection to the first cell in the current row
            </summary>
            <param name="extend">true to extend the current selection (if any) instead of replacing</param>
        </member>
        <member name="M:Terminal.Gui.TableView.SelectAll">
            <summary>
            When <see cref="P:Terminal.Gui.TableView.MultiSelect"/> is on, creates selection over all cells in the table (replacing any old selection regions)
            </summary>
        </member>
        <member name="M:Terminal.Gui.TableView.GetAllSelectedCells">
            <summary>
            Returns all cells in any <see cref="P:Terminal.Gui.TableView.MultiSelectedRegions"/> (if <see cref="P:Terminal.Gui.TableView.MultiSelect"/> is enabled) and the selected cell
            </summary>
            <remarks>Return value is not affected by <see cref="P:Terminal.Gui.TableView.FullRowSelect"/> (i.e. returned <see cref="T:Terminal.Gui.Point"/>s are not expanded to 
            include all points on row).</remarks>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.CreateTableSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new rectangle between the two points with positive width/height regardless of relative positioning of the points.  pt1 is always considered the <see cref="P:Terminal.Gui.TableView.TableSelection.Origin"/> point
            </summary>
            <param name="pt1X">Origin point for the selection in X</param>
            <param name="pt1Y">Origin point for the selection in Y</param>
            <param name="pt2X">End point for the selection in X</param>
            <param name="pt2Y">End point for the selection in Y</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.CreateTableSelection(System.Int32,System.Int32)">
            <summary>
            Returns a single point as a <see cref="T:Terminal.Gui.TableView.TableSelection"/>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.IsSelected(System.Int32,System.Int32)">
            <summary>
            <para>
            Returns true if the given cell is selected either because it is the active cell or part of a multi cell selection (e.g. <see cref="P:Terminal.Gui.TableView.FullRowSelect"/>).
            </para>
            <remarks>Returns <see langword="false"/> if <see cref="P:Terminal.Gui.TableView.ColumnStyle.Visible"/> is <see langword="false"/>.</remarks>
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.IsColumnVisible(System.Int32)">
            <summary>
            Returns true if the given <paramref name="columnIndex"/> indexes a visible
            column otherwise false.  Returns false for indexes that are out of bounds.
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.PositionCursor">
            <summary>
            Positions the cursor in the area of the screen in which the start of the active cell is rendered.  Calls base implementation if active cell is not visible due to scrolling or table is loaded etc
            </summary>
        </member>
        <member name="M:Terminal.Gui.TableView.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TableView.ScreenToCell(System.Int32,System.Int32)">
            <summary>.
            Returns the column and row of <see cref="P:Terminal.Gui.TableView.Table"/> that corresponds to a given point 
            on the screen (relative to the control client area).  Returns null if the point is
            in the header, no table is loaded or outside the control bounds.
            </summary>
            <param name="clientX">X offset from the top left of the control.</param>
            <param name="clientY">Y offset from the top left of the control.</param>
            <returns>Cell clicked or null.</returns>
        </member>
        <member name="M:Terminal.Gui.TableView.ScreenToCell(System.Int32,System.Int32,System.Data.DataColumn@)">
            <inheritdoc cref="M:Terminal.Gui.TableView.ScreenToCell(System.Int32,System.Int32)"/>
            <param name="clientX">X offset from the top left of the control.</param>
            <param name="clientY">Y offset from the top left of the control.</param>
            <param name="headerIfAny">If the click is in a header this is the column clicked.</param>
        </member>
        <member name="M:Terminal.Gui.TableView.CellToScreen(System.Int32,System.Int32)">
            <summary>
            Returns the screen position (relative to the control client area) that the given cell is rendered or null if it is outside the current scroll area or no table is loaded
            </summary>
            <param name="tableColumn">The index of the <see cref="P:Terminal.Gui.TableView.Table"/> column you are looking for, use <see cref="P:System.Data.DataColumn.Ordinal"/></param>
            <param name="tableRow">The index of the row in <see cref="P:Terminal.Gui.TableView.Table"/> that you are looking for</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.Update">
            <summary>
            Updates the view to reflect changes to <see cref="P:Terminal.Gui.TableView.Table"/> and to (<see cref="P:Terminal.Gui.TableView.ColumnOffset"/> / <see cref="P:Terminal.Gui.TableView.RowOffset"/>) etc
            </summary>
            <remarks>This always calls <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/></remarks>
        </member>
        <member name="M:Terminal.Gui.TableView.EnsureValidScrollOffsets">
            <summary>
            Updates <see cref="P:Terminal.Gui.TableView.ColumnOffset"/> and <see cref="P:Terminal.Gui.TableView.RowOffset"/> where they are outside the bounds of the table (by adjusting them to the nearest existing cell).  Has no effect if <see cref="P:Terminal.Gui.TableView.Table"/> has not been set.
            </summary>
            <remarks>Changes will not be immediately visible in the display until you call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/></remarks>
        </member>
        <member name="M:Terminal.Gui.TableView.EnsureValidSelection">
            <summary>
            Updates <see cref="P:Terminal.Gui.TableView.SelectedColumn"/>, <see cref="P:Terminal.Gui.TableView.SelectedRow"/> and <see cref="P:Terminal.Gui.TableView.MultiSelectedRegions"/> where they are outside the bounds of the table (by adjusting them to the nearest existing cell).  Has no effect if <see cref="P:Terminal.Gui.TableView.Table"/> has not been set.
            </summary>
            <remarks>Changes will not be immediately visible in the display until you call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/></remarks>
        </member>
        <member name="M:Terminal.Gui.TableView.TableIsNullOrInvisible">
            <summary>
            Returns true if the <see cref="P:Terminal.Gui.TableView.Table"/> is not set or all the
            <see cref="T:System.Data.DataColumn"/> in the <see cref="P:Terminal.Gui.TableView.Table"/> have an explicit
            <see cref="T:Terminal.Gui.TableView.ColumnStyle"/> that marks them <see cref="F:Terminal.Gui.TableView.ColumnStyle.visible"/>
            <see langword="false"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.GetNearestVisibleColumn(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns <paramref name="columnIndex"/> unless the <see cref="P:Terminal.Gui.TableView.ColumnStyle.Visible"/> is false for
            the indexed <see cref="T:System.Data.DataColumn"/>.  If so then the index returned is nudged to the nearest visible
            column.
            </summary>
            <remarks>Returns <paramref name="columnIndex"/> unchanged if it is invalid (e.g. out of bounds).</remarks>
            <param name="columnIndex">The input column index.</param>
            <param name="lookRight">When nudging invisible selections look right first.
            <see langword="true"/> to look right, <see langword="false"/> to look left.</param>
            <param name="allowBumpingInOppositeDirection">If we cannot find anything visible when
            looking in direction of <paramref name="lookRight"/> then should we look in the opposite
            direction instead? Use true if you want to push a selection to a valid index no matter what.
            Use false if you are primarily interested in learning about directional column visibility.</param>
        </member>
        <member name="M:Terminal.Gui.TableView.EnsureSelectedCellIsVisible">
            <summary>
            Updates scroll offsets to ensure that the selected cell is visible.  Has no effect if <see cref="P:Terminal.Gui.TableView.Table"/> has not been set.
            </summary>
            <remarks>Changes will not be immediately visible in the display until you call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/></remarks>
        </member>
        <member name="M:Terminal.Gui.TableView.OnSelectedCellChanged(Terminal.Gui.TableView.SelectedCellChangedEventArgs)">
            <summary>
            Invokes the <see cref="E:Terminal.Gui.TableView.SelectedCellChanged"/> event
            </summary>
        </member>
        <member name="M:Terminal.Gui.TableView.OnCellActivated(Terminal.Gui.TableView.CellActivatedEventArgs)">
            <summary>
            Invokes the <see cref="E:Terminal.Gui.TableView.CellActivated"/> event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Terminal.Gui.TableView.CalculateViewport(Terminal.Gui.Rect,System.Int32)">
            <summary>
            Calculates which columns should be rendered given the <paramref name="bounds"/> in which to display and the <see cref="P:Terminal.Gui.TableView.ColumnOffset"/>
            </summary>
            <param name="bounds"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.CalculateMaxCellWidth(System.Data.DataColumn,System.Int32,Terminal.Gui.TableView.ColumnStyle)">
            <summary>
            Returns the maximum of the <paramref name="col"/> name and the maximum length of data that will be rendered starting at <see cref="P:Terminal.Gui.TableView.RowOffset"/> and rendering <paramref name="rowsToRender"/>
            </summary>
            <param name="col"></param>
            <param name="rowsToRender"></param>
            <param name="colStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.GetRepresentation(System.Object,Terminal.Gui.TableView.ColumnStyle)">
            <summary>
            Returns the value that should be rendered to best represent a strongly typed <paramref name="value"/> read from <see cref="P:Terminal.Gui.TableView.Table"/>
            </summary>
            <param name="value"></param>
            <param name="colStyle">Optional style defining how to represent cell values</param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TableView.CellColorGetterDelegate">
            <summary>
            Delegate for providing color to <see cref="T:Terminal.Gui.TableView"/> cells based on the value being rendered
            </summary>
            <param name="args">Contains information about the cell for which color is needed</param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TableView.RowColorGetterDelegate">
            <summary>
            Delegate for providing color for a whole row of a <see cref="T:Terminal.Gui.TableView"/>
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TableView.ColumnStyle">
            <summary>
            Describes how to render a given column in  a <see cref="T:Terminal.Gui.TableView"/> including <see cref="P:Terminal.Gui.TableView.ColumnStyle.Alignment"/> 
            and textual representation of cells (e.g. date formats)
            
            <a href="https://gui-cs.github.io/Terminal.Gui/articles/tableview.html">See TableView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnStyle.Alignment">
            <summary>
            Defines the default alignment for all values rendered in this column.  For custom alignment based on cell contents use <see cref="F:Terminal.Gui.TableView.ColumnStyle.AlignmentGetter"/>.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TableView.ColumnStyle.AlignmentGetter">
            <summary>
            Defines a delegate for returning custom alignment per cell based on cell values.  When specified this will override <see cref="P:Terminal.Gui.TableView.ColumnStyle.Alignment"/>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TableView.ColumnStyle.RepresentationGetter">
            <summary>
            Defines a delegate for returning custom representations of cell values.  If not set then <see cref="M:System.Object.ToString"/> is used.  Return values from your delegate may be truncated e.g. based on <see cref="P:Terminal.Gui.TableView.ColumnStyle.MaxWidth"/>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TableView.ColumnStyle.ColorGetter">
            <summary>
            Defines a delegate for returning a custom color scheme per cell based on cell values.
            Return null for the default
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnStyle.Format">
            <summary>
            Defines the format for values e.g. "yyyy-MM-dd" for dates
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnStyle.MaxWidth">
            <summary>
            Set the maximum width of the column in characters.  This value will be ignored if more than the tables <see cref="P:Terminal.Gui.TableView.MaxCellWidth"/>.  Defaults to <see cref="F:Terminal.Gui.TableView.DefaultMaxCellWidth"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnStyle.MinWidth">
            <summary>
            Set the minimum width of the column in characters.  Setting this will ensure that
            even when a column has short content/header it still fills a given width of the control.
            
            <para>This value will be ignored if more than the tables <see cref="P:Terminal.Gui.TableView.MaxCellWidth"/> 
            or the <see cref="P:Terminal.Gui.TableView.ColumnStyle.MaxWidth"/>
            </para>
            <remarks>
            For setting a flexible column width (down to a lower limit) use <see cref="P:Terminal.Gui.TableView.ColumnStyle.MinAcceptableWidth"/>
            instead
            </remarks>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnStyle.MinAcceptableWidth">
            <summary>
            Enables flexible sizing of this column based on available screen space to render into.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnStyle.Visible">
            <summary>
            Gets or Sets a value indicating whether the column should be visible to the user.
            This affects both whether it is rendered and whether it can be selected. Defaults to
            true.
            </summary>
            <remarks>If <see cref="P:Terminal.Gui.TableView.ColumnStyle.MaxWidth"/> is 0 then <see cref="P:Terminal.Gui.TableView.ColumnStyle.Visible"/> will always return false.</remarks>
        </member>
        <member name="M:Terminal.Gui.TableView.ColumnStyle.GetAlignment(System.Object)">
            <summary>
            Returns the alignment for the cell based on <paramref name="cellValue"/> and <see cref="F:Terminal.Gui.TableView.ColumnStyle.AlignmentGetter"/>/<see cref="P:Terminal.Gui.TableView.ColumnStyle.Alignment"/>
            </summary>
            <param name="cellValue"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.ColumnStyle.GetRepresentation(System.Object)">
            <summary>
            Returns the full string to render (which may be truncated if too long) that the current style says best represents the given <paramref name="value"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TableView.TableStyle">
            <summary>
            Defines rendering options that affect how the table is displayed.
            
            <a href="https://gui-cs.github.io/Terminal.Gui/articles/tableview.html">See TableView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.TableStyle.AlwaysShowHeaders">
            <summary>
            When scrolling down always lock the column headers in place as the first row of the table
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.TableStyle.ShowHorizontalHeaderOverline">
            <summary>
            True to render a solid line above the headers
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.TableStyle.ShowHorizontalHeaderUnderline">
            <summary>
            True to render a solid line under the headers
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.TableStyle.ShowVerticalCellLines">
            <summary>
            True to render a solid line vertical line between cells
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.TableStyle.ShowVerticalHeaderLines">
            <summary>
            True to render a solid line vertical line between headers
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.TableStyle.ShowHorizontalScrollIndicators">
            <summary>
            True to render a arrows on the right/left of the table when 
            there are more column(s) that can be scrolled to.  Requires
            <see cref="P:Terminal.Gui.TableView.TableStyle.ShowHorizontalHeaderUnderline"/> to be true.
            Defaults to true
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.TableStyle.InvertSelectedCellFirstCharacter">
            <summary>
            True to invert the colors of the first symbol of the selected cell in the <see cref="T:Terminal.Gui.TableView"/>.
            This gives the appearance of a cursor for when the <see cref="T:Terminal.Gui.ConsoleDriver"/> doesn't otherwise show
            this
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.TableStyle.ColumnStyles">
            <summary>
            Collection of columns for which you want special rendering (e.g. custom column lengths, text alignment etc)
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.TableStyle.RowColorGetter">
            <summary>
            Delegate for coloring specific rows in a different color.  For cell color <see cref="F:Terminal.Gui.TableView.ColumnStyle.ColorGetter"/>
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableView.TableStyle.ExpandLastColumn">
            <summary>
            Determines rendering when the last column in the table is visible but it's
            content or <see cref="P:Terminal.Gui.TableView.ColumnStyle.MaxWidth"/> is less than the remaining 
            space in the control.  True (the default) will expand the column to fill
            the remaining bounds of the control.  False will draw a column ending line
            and leave a blank column that cannot be selected in the remaining space.  
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableView.TableStyle.SmoothHorizontalScrolling">
            <summary>
            <para>
            Determines how <see cref="P:Terminal.Gui.TableView.ColumnOffset"/> is updated when scrolling
            right off the end of the currently visible area.
            </para>
            <para>
            If true then when scrolling right the scroll offset is increased the minimum required to show
            the new column.  This may be slow if you have an incredibly large number of columns in
            your table and/or slow <see cref="F:Terminal.Gui.TableView.ColumnStyle.RepresentationGetter"/> implementations
            </para>
            <para>
            If false then scroll offset is set to the currently selected column (i.e. PageRight).
            </para>
            </summary>
        </member>
        <member name="M:Terminal.Gui.TableView.TableStyle.GetColumnStyleIfAny(System.Data.DataColumn)">
            <summary>
            Returns the entry from <see cref="P:Terminal.Gui.TableView.TableStyle.ColumnStyles"/> for the given <paramref name="col"/> or null if no custom styling is defined for it
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TableView.TableStyle.GetOrCreateColumnStyle(System.Data.DataColumn)">
            <summary>
            Returns an existing <see cref="T:Terminal.Gui.TableView.ColumnStyle"/> for the given <paramref name="col"/> or creates a new one with default options
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TableView.ColumnToRender">
            <summary>
            Describes a desire to render a column at a given horizontal position in the UI
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnToRender.Column">
            <summary>
            The column to render
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnToRender.X">
            <summary>
            The horizontal position to begin rendering the column at
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnToRender.Width">
            <summary>
            The width that the column should occupy as calculated by <see cref="M:Terminal.Gui.TableView.CalculateViewport(Terminal.Gui.Rect,System.Int32)"/>.  Note that this includes
            space for padding i.e. the separator between columns.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.ColumnToRender.IsVeryLast">
            <summary>
            True if this column is the very last column in the <see cref="P:Terminal.Gui.TableView.Table"/> (not just the last visible column)
            </summary>
        </member>
        <member name="T:Terminal.Gui.TableView.CellColorGetterArgs">
            <summary>
            Arguments for a <see cref="T:Terminal.Gui.TableView.CellColorGetterDelegate"/>.  Describes a cell for which a rendering
            <see cref="T:Terminal.Gui.ColorScheme"/> is being sought
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.CellColorGetterArgs.Table">
            <summary>
            The data table hosted by the <see cref="T:Terminal.Gui.TableView"/> control.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.CellColorGetterArgs.RowIndex">
            <summary>
            The index of the row in <see cref="P:Terminal.Gui.TableView.CellColorGetterArgs.Table"/> for which color is needed
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.CellColorGetterArgs.ColIdex">
            <summary>
            The index of column in <see cref="P:Terminal.Gui.TableView.CellColorGetterArgs.Table"/> for which color is needed
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.CellColorGetterArgs.CellValue">
            <summary>
            The hard typed value being rendered in the cell for which color is needed
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.CellColorGetterArgs.Representation">
            <summary>
            The textual representation of <see cref="P:Terminal.Gui.TableView.CellColorGetterArgs.CellValue"/> (what will actually be drawn to the screen)
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.CellColorGetterArgs.RowScheme">
            <summary>
            the color scheme that is going to be used to render the cell if no cell specific color scheme is returned
            </summary>
        </member>
        <member name="T:Terminal.Gui.TableView.RowColorGetterArgs">
            <summary>
            Arguments for <see cref="T:Terminal.Gui.TableView.RowColorGetterDelegate"/>. Describes a row of data in a <see cref="T:System.Data.DataTable"/>
            for which <see cref="T:Terminal.Gui.ColorScheme"/> is sought.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.RowColorGetterArgs.Table">
            <summary>
            The data table hosted by the <see cref="T:Terminal.Gui.TableView"/> control.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.RowColorGetterArgs.RowIndex">
            <summary>
            The index of the row in <see cref="P:Terminal.Gui.TableView.RowColorGetterArgs.Table"/> for which color is needed
            </summary>
        </member>
        <member name="T:Terminal.Gui.TableView.SelectedCellChangedEventArgs">
            <summary>
            Defines the event arguments for <see cref="E:Terminal.Gui.TableView.SelectedCellChanged"/> 
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.SelectedCellChangedEventArgs.Table">
            <summary>
            The current table to which the new indexes refer.  May be null e.g. if selection change is the result of clearing the table from the view
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableView.SelectedCellChangedEventArgs.OldCol">
            <summary>
            The previous selected column index.  May be invalid e.g. when the selection has been changed as a result of replacing the existing Table with a smaller one
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableView.SelectedCellChangedEventArgs.NewCol">
            <summary>
            The newly selected column index.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableView.SelectedCellChangedEventArgs.OldRow">
            <summary>
            The previous selected row index.  May be invalid e.g. when the selection has been changed as a result of deleting rows from the table
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableView.SelectedCellChangedEventArgs.NewRow">
            <summary>
            The newly selected row index.
            </summary>
            <value></value>
        </member>
        <member name="M:Terminal.Gui.TableView.SelectedCellChangedEventArgs.#ctor(System.Data.DataTable,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of arguments describing a change in selected cell in a <see cref="T:Terminal.Gui.TableView"/>
            </summary>
            <param name="t"></param>
            <param name="oldCol"></param>
            <param name="newCol"></param>
            <param name="oldRow"></param>
            <param name="newRow"></param>
        </member>
        <member name="T:Terminal.Gui.TableView.TableSelection">
            <summary>
            Describes a selected region of the table
            </summary>
        </member>
        <member name="P:Terminal.Gui.TableView.TableSelection.Origin">
            <summary>
            Corner of the <see cref="P:Terminal.Gui.TableView.TableSelection.Rect"/> where selection began
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TableView.TableSelection.Rect">
            <summary>
            Area selected
            </summary>
            <value></value>
        </member>
        <member name="M:Terminal.Gui.TableView.TableSelection.#ctor(Terminal.Gui.Point,Terminal.Gui.Rect)">
            <summary>
            Creates a new selected area starting at the origin corner and covering the provided rectangular area
            </summary>
            <param name="origin"></param>
            <param name="rect"></param>
        </member>
        <member name="T:Terminal.Gui.TabView">
            <summary>
            Control that hosts multiple sub views, presenting a single one at once
            </summary>
        </member>
        <member name="F:Terminal.Gui.TabView.DefaultMaxTabTextWidth">
            <summary>
            The default <see cref="P:Terminal.Gui.TabView.MaxTabTextWidth"/> to set on new <see cref="T:Terminal.Gui.TabView"/> controls
            </summary>
        </member>
        <member name="F:Terminal.Gui.TabView.tabsBar">
            <summary>
            This sub view is the 2 or 3 line control that represents the actual tabs themselves
            </summary>
        </member>
        <member name="F:Terminal.Gui.TabView.contentView">
            <summary>
            This sub view is the main client area of the current tab.  It hosts the <see cref="P:Terminal.Gui.TabView.Tab.View"/> 
            of the tab, the <see cref="P:Terminal.Gui.TabView.SelectedTab"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TabView.Tabs">
            <summary>
            All tabs currently hosted by the control
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TabView.TabScrollOffset">
            <summary>
            When there are too many tabs to render, this indicates the first
            tab to render on the screen.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TabView.MaxTabTextWidth">
            <summary>
            The maximum number of characters to render in a Tab header.  This prevents one long tab 
            from pushing out all the others.
            </summary>
        </member>
        <member name="E:Terminal.Gui.TabView.SelectedTabChanged">
            <summary>
            Event for when <see cref="P:Terminal.Gui.TabView.SelectedTab"/> changes
            </summary>
        </member>
        <member name="E:Terminal.Gui.TabView.TabClicked">
            <summary>
            Event fired when a <see cref="T:Terminal.Gui.TabView.Tab"/> is clicked.  Can be used to cancel navigation,
            show context menu (e.g. on right click) etc.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TabView.SelectedTab">
            <summary>
            The currently selected member of <see cref="P:Terminal.Gui.TabView.Tabs"/> chosen by the user
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TabView.Style">
            <summary>
            Render choices for how to display tabs.  After making changes, call <see cref="M:Terminal.Gui.TabView.ApplyStyleChanges"/>
            </summary>
            <value></value>
        </member>
        <member name="M:Terminal.Gui.TabView.#ctor">
            <summary>
            Initializes a <see cref="T:Terminal.Gui.TabView"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> layout.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TabView.ApplyStyleChanges">
            <summary>
            Updates the control to use the latest state settings in <see cref="P:Terminal.Gui.TabView.Style"/>.
            This can change the size of the client area of the tab (for rendering the 
            selected tab's content).  This method includes a call 
            to <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.TabView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TabView.Dispose(System.Boolean)">
            <summary>
            Disposes the control and all <see cref="P:Terminal.Gui.TabView.Tabs"/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Terminal.Gui.TabView.OnSelectedTabChanged(Terminal.Gui.TabView.Tab,Terminal.Gui.TabView.Tab)">
            <summary>
            Raises the <see cref="E:Terminal.Gui.TabView.SelectedTabChanged"/> event
            </summary>
        </member>
        <member name="M:Terminal.Gui.TabView.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TabView.SwitchTabBy(System.Int32)">
            <summary>
            Changes the <see cref="P:Terminal.Gui.TabView.SelectedTab"/> by the given <paramref name="amount"/>.  
            Positive for right, negative for left.  If no tab is currently selected then
            the first tab will become selected
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:Terminal.Gui.TabView.EnsureValidScrollOffsets">
            <summary>
            Updates <see cref="P:Terminal.Gui.TabView.TabScrollOffset"/> to be a valid index of <see cref="P:Terminal.Gui.TabView.Tabs"/>
            </summary>
            <remarks>Changes will not be immediately visible in the display until you call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/></remarks>
        </member>
        <member name="M:Terminal.Gui.TabView.EnsureSelectedTabIsVisible">
            <summary>
            Updates <see cref="P:Terminal.Gui.TabView.TabScrollOffset"/> to ensure that <see cref="P:Terminal.Gui.TabView.SelectedTab"/> is visible
            </summary>
        </member>
        <member name="M:Terminal.Gui.TabView.GetTabHeight(System.Boolean)">
            <summary>
            Returns the number of rows occupied by rendering the tabs, this depends 
            on <see cref="P:Terminal.Gui.TabView.TabStyle.ShowTopLine"/> and can be 0 (e.g. if 
            <see cref="P:Terminal.Gui.TabView.TabStyle.TabsOnBottom"/> and you ask for <paramref name="top"/>).
            </summary>
            <param name="top">True to measure the space required at the top of the control,
            false to measure space at the bottom</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TabView.CalculateViewport(Terminal.Gui.Rect)">
            <summary>
            Returns which tabs to render at each x location
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TabView.AddTab(Terminal.Gui.TabView.Tab,System.Boolean)">
            <summary>
            Adds the given <paramref name="tab"/> to <see cref="P:Terminal.Gui.TabView.Tabs"/>
            </summary>
            <param name="tab"></param>
            <param name="andSelect">True to make the newly added Tab the <see cref="P:Terminal.Gui.TabView.SelectedTab"/></param>
        </member>
        <member name="M:Terminal.Gui.TabView.RemoveTab(Terminal.Gui.TabView.Tab)">
            <summary>
            Removes the given <paramref name="tab"/> from <see cref="P:Terminal.Gui.TabView.Tabs"/>.
            Caller is responsible for disposing the tab's hosted <see cref="P:Terminal.Gui.TabView.Tab.View"/>
            if appropriate.
            </summary>
            <param name="tab"></param>
        </member>
        <member name="P:Terminal.Gui.TabView.TabToRender.IsSelected">
            <summary>
            True if the tab that is being rendered is the selected one
            </summary>
            <value></value>
        </member>
        <member name="M:Terminal.Gui.TabView.TabRowView.RenderOverline(Terminal.Gui.TabView.TabToRender[],System.Int32)">
            <summary>
            Renders the line of the tabs that does not adjoin the content
            </summary>
            <param name="tabLocations"></param>
            <param name="width"></param>
        </member>
        <member name="M:Terminal.Gui.TabView.TabRowView.RenderTabLine(Terminal.Gui.TabView.TabToRender[],System.Int32)">
            <summary>
            Renders the line with the tab names in it
            </summary>
            <param name="tabLocations"></param>
            <param name="width"></param>
        </member>
        <member name="M:Terminal.Gui.TabView.TabRowView.RenderUnderline(Terminal.Gui.TabView.TabToRender[],System.Int32)">
            <summary>
            Renders the line of the tab that adjoins the content of the tab
            </summary>
            <param name="tabLocations"></param>
            <param name="width"></param>
        </member>
        <member name="M:Terminal.Gui.TabView.TabRowView.ScreenToScrollIndicator(System.Int32,System.Int32)">
            <summary>
            Calculates whether scroll indicators are visible and if so whether the click
            was on one of them.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>-1 for click in scroll left, 1 for scroll right or 0 for no hit</returns>
        </member>
        <member name="M:Terminal.Gui.TabView.TabRowView.ScreenToTab(System.Int32,System.Int32)">
            <summary>
            Translates the client coordinates of a click into a tab when the click is on top of a tab
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TabView.OnTabClicked(Terminal.Gui.TabView.TabMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Terminal.Gui.TabView.TabClicked"/> event.
            </summary>
            <param name="tabMouseEventArgs"></param>
        </member>
        <member name="T:Terminal.Gui.TabView.TabMouseEventArgs">
            <summary>
            Describes a mouse event over a specific <see cref="T:Terminal.Gui.TabView.Tab"/> in a <see cref="T:Terminal.Gui.TabView"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TabView.TabMouseEventArgs.Tab">
            <summary>
            Gets the <see cref="T:Terminal.Gui.TabView.Tab"/> (if any) that the mouse
            was over when the <see cref="P:Terminal.Gui.TabView.TabMouseEventArgs.MouseEvent"/> occurred.
            </summary>
            <remarks>This will be null if the click is after last tab
            or before first.</remarks>
        </member>
        <member name="P:Terminal.Gui.TabView.TabMouseEventArgs.MouseEvent">
            <summary>
            Gets the actual mouse event.  Use <see cref="P:Terminal.Gui.MouseEvent.Handled"/> to cancel this event
            and perform custom behavior (e.g. show a context menu).
            </summary>
        </member>
        <member name="M:Terminal.Gui.TabView.TabMouseEventArgs.#ctor(Terminal.Gui.TabView.Tab,Terminal.Gui.MouseEvent)">
            <summary>
            Creates a new instance of the <see cref="T:Terminal.Gui.TabView.TabMouseEventArgs"/> class.
            </summary>
            <param name="tab"><see cref="T:Terminal.Gui.TabView.Tab"/> that the mouse was over when the event occurred.</param>
            <param name="mouseEvent">The mouse activity being reported</param>
        </member>
        <member name="T:Terminal.Gui.TabView.Tab">
            <summary>
            A single tab in a <see cref="T:Terminal.Gui.TabView"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TabView.Tab.Text">
            <summary>
            The text to display in a <see cref="T:Terminal.Gui.TabView"/>
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TabView.Tab.View">
            <summary>
            The control to display when the tab is selected
            </summary>
            <value></value>
        </member>
        <member name="M:Terminal.Gui.TabView.Tab.#ctor">
            <summary>
            Creates a new unamed tab with no controls inside
            </summary>
        </member>
        <member name="M:Terminal.Gui.TabView.Tab.#ctor(System.String,Terminal.Gui.View)">
            <summary>
            Creates a new tab with the given text hosting a view
            </summary>
            <param name="text"></param>
            <param name="view"></param>
        </member>
        <member name="T:Terminal.Gui.TabView.TabStyle">
            <summary>
            Describes render stylistic selections of a <see cref="T:Terminal.Gui.TabView"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TabView.TabStyle.ShowTopLine">
            <summary>
            True to show the top lip of tabs.  False to directly begin with tab text during 
            rendering.  When true header line occupies 3 rows, when false only 2.
            Defaults to true.
            
            <para>When <see cref="P:Terminal.Gui.TabView.TabStyle.TabsOnBottom"/> is enabled this instead applies to the
             bottommost line of the control</para>
            </summary> 
        </member>
        <member name="P:Terminal.Gui.TabView.TabStyle.ShowBorder">
            <summary>
            True to show a solid box around the edge of the control.  Defaults to true.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TabView.TabStyle.TabsOnBottom">
            <summary>
            True to render tabs at the bottom of the view instead of the top
            </summary>
        </member>
        <member name="T:Terminal.Gui.TabView.TabChangedEventArgs">
            <summary>
            Describes a change in <see cref="P:Terminal.Gui.TabView.SelectedTab"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TabView.TabChangedEventArgs.OldTab">
            <summary>
            The previously selected tab. May be null
            </summary>
        </member>
        <member name="P:Terminal.Gui.TabView.TabChangedEventArgs.NewTab">
            <summary>
            The currently selected tab. May be null
            </summary>
        </member>
        <member name="M:Terminal.Gui.TabView.TabChangedEventArgs.#ctor(Terminal.Gui.TabView.Tab,Terminal.Gui.TabView.Tab)">
            <summary>
            Documents a tab change
            </summary>
            <param name="oldTab"></param>
            <param name="newTab"></param>
        </member>
        <member name="T:Terminal.Gui.TextField">
            <summary>
              Single-line text entry <see cref="T:Terminal.Gui.View"/>
            </summary>
            <remarks>
              The <see cref="T:Terminal.Gui.TextField"/> <see cref="T:Terminal.Gui.View"/> provides editing functionality and mouse support.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextField.Used">
            <summary>
            Tracks whether the text field should be considered "used", that is, that the user has moved in the entry, so new input should be appended at the cursor position, rather than clearing the entry
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.ReadOnly">
            <summary>
            If set to true its not allow any changes in the text.
            </summary>
        </member>
        <member name="E:Terminal.Gui.TextField.TextChanging">
            <summary>
            Changing event, raised before the <see cref="P:Terminal.Gui.TextField.Text"/> changes and can be canceled or changing the new text.
            </summary>
        </member>
        <member name="E:Terminal.Gui.TextField.TextChanged">
            <summary>
              Changed event, raised when the text has changed.
            </summary>
            <remarks>
              This event is raised when the <see cref="P:Terminal.Gui.TextField.Text"/> changes. 
            </remarks>
            <remarks>
              The passed <see cref="T:System.EventArgs"/> is a <see cref="T:NStack.ustring"/> containing the old value. 
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.TextField"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
            <param name="text">Initial text contents.</param>
        </member>
        <member name="M:Terminal.Gui.TextField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.TextField"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.#ctor(NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.TextField"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
            <param name="text">Initial text contents.</param>
        </member>
        <member name="M:Terminal.Gui.TextField.#ctor(System.Int32,System.Int32,System.Int32,NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.TextField"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> positioning.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="w">The width.</param>
            <param name="text">Initial text contents.</param>
        </member>
        <member name="M:Terminal.Gui.TextField.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextField.Autocomplete">
            <summary>
            Provides autocomplete context menu based on suggestions at the current cursor
            position. Populate <see cref="P:Terminal.Gui.Autocomplete.AllSuggestions"/> to enable this feature.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.Frame">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextField.Text">
            <summary>
              Sets or gets the text held by the view.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextField.Secret">
            <summary>
              Sets the secret property.
            </summary>
            <remarks>
              This makes the text entry suitable for entering passwords.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextField.CursorPosition">
            <summary>
               Sets or gets the current cursor position.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.ScrollOffset">
            <summary>
            Gets the left offset position.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.IsDirty">
            <summary>
            Indicates whatever the text was changed or not.
            <see langword="true"/> if the text was changed <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.HasHistoryChanges">
            <summary>
            Indicates whatever the text has history changes or not.
            <see langword="true"/> if the text has history changes <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.ContextMenu">
            <summary>
            Get the <see cref="P:Terminal.Gui.TextField.ContextMenu"/> for this view.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.PositionCursor">
            <summary>
              Sets the cursor position.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextField.GetNormalColor">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextField.CanFocus">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextField.ProcessKey(Terminal.Gui.KeyEvent)">
            <summary>
            Processes key presses for the <see cref="T:Terminal.Gui.TextField"/>.
            </summary>
            <param name="kb"></param>
            <returns></returns>
            <remarks>
            The <see cref="T:Terminal.Gui.TextField"/> control responds to the following keys:
            <list type="table">
               <listheader>
                   <term>Keys</term>
                   <description>Function</description>
               </listheader>
               <item>
                   <term><see cref="F:Terminal.Gui.Key.Delete"/>, <see cref="F:Terminal.Gui.Key.Backspace"/></term>
                   <description>Deletes the character before cursor.</description>
               </item>
            </list>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextField.KillWordBackwards">
            <summary>
            Deletes word backwards.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.KillWordForwards">
            <summary>
            Deletes word forwards.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.DeleteCharLeft(System.Boolean)">
            <summary>
            Deletes the left character.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.DeleteCharRight">
            <summary>
            Deletes the right character.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.SelectAll">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.DeleteAll">
            <summary>
            Deletes all text.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.SelectedStart">
            <summary>
            Start position of the selected text.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.SelectedLength">
            <summary>
            Length of the selected text.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextField.SelectedText">
            <summary>
            The selected text.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextField.ClearAllSelection">
            <summary>
            Clear the selected text.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Copy">
            <summary>
            Copy the selected text to the clipboard.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Cut">
            <summary>
            Cut the selected text to the clipboard.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.Paste">
            <summary>
            Paste the selected text from the clipboard.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.OnTextChanging(NStack.ustring)">
            <summary>
            Virtual method that invoke the <see cref="E:Terminal.Gui.TextField.TextChanging"/> event if it's defined.
            </summary>
            <param name="newText">The new text to be replaced.</param>
            <returns>Returns the <see cref="T:Terminal.Gui.TextChangingEventArgs"/></returns>
        </member>
        <member name="P:Terminal.Gui.TextField.DesiredCursorVisibility">
            <summary>
            Get / Set the wished cursor when the field is focused
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextField.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextField.InsertText(System.String,System.Boolean)">
            <summary>
            Inserts the given <paramref name="toAdd"/> text at the current cursor position
            exactly as if the user had just typed it
            </summary>
            <param name="toAdd">Text to add</param>
            <param name="useOldCursorPos">If uses the <see cref="F:Terminal.Gui.TextField.oldCursorPos"/>.</param>
        </member>
        <member name="M:Terminal.Gui.TextField.ClearHistoryChanges">
            <summary>
            Allows clearing the <see cref="T:Terminal.Gui.HistoryText.HistoryTextItem"/> items updating the original text.
            </summary>
        </member>
        <member name="T:Terminal.Gui.TextChangingEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> which allows passing a cancelable new text value event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextChangingEventArgs.NewText">
            <summary>
            The new text to be replaced.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextChangingEventArgs.Cancel">
            <summary>
            Flag which allows to cancel the new text value.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextChangingEventArgs.#ctor(NStack.ustring)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.TextChangingEventArgs"/>
            </summary>
            <param name="newText">The new <see cref="P:Terminal.Gui.TextField.Text"/> to be replaced.</param>
        </member>
        <member name="T:Terminal.Gui.TextFieldAutocomplete">
            <summary>
            Renders an overlay on another view at a given point that allows selecting
            from a range of 'autocomplete' options.
            An implementation on a TextField.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextFieldAutocomplete.DeleteTextBackwards">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextFieldAutocomplete.GetCurrentWord(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextFieldAutocomplete.InsertText(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.TextValidateProviders.ITextValidateProvider">
            <summary>
            TextValidateField Providers Interface.
            All TextValidateField are created with a ITextValidateProvider.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.ITextValidateProvider.Fixed">
            <summary>
            Set that this provider uses a fixed width.
            e.g. Masked ones are fixed.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.Cursor(System.Int32)">
            <summary>
            Set Cursor position to <paramref name="pos"/>.
            </summary>
            <param name="pos"></param>
            <returns>Return first valid position.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.CursorLeft(System.Int32)">
            <summary>
            First valid position before <paramref name="pos"/>.
            </summary>
            <param name="pos"></param>
            <returns>New cursor position if any, otherwise returns <paramref name="pos"/></returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.CursorRight(System.Int32)">
            <summary>
            First valid position after <paramref name="pos"/>.
            </summary>
            <param name="pos">Current position.</param>
            <returns>New cursor position if any, otherwise returns <paramref name="pos"/></returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.CursorStart">
            <summary>
            Find the first valid character position.
            </summary>
            <returns>New cursor position.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.CursorEnd">
            <summary>
            Find the last valid character position.
            </summary>
            <returns>New cursor position.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.Delete(System.Int32)">
            <summary>
            Deletes the current character in <paramref name="pos"/>.
            </summary>
            <param name="pos"></param>
            <returns>true if the character was successfully removed, otherwise false.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.ITextValidateProvider.InsertAt(System.Char,System.Int32)">
            <summary>
            Insert character <paramref name="ch"/> in position <paramref name="pos"/>.
            </summary>
            <param name="ch"></param>
            <param name="pos"></param>
            <returns>true if the character was successfully inserted, otherwise false.</returns>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.ITextValidateProvider.IsValid">
            <summary>
            True if the input is valid, otherwise false.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.ITextValidateProvider.Text">
            <summary>
            Set the input text and get the current value.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.ITextValidateProvider.DisplayText">
            <summary>
            Gets the formatted string for display.
            </summary>
        </member>
        <member name="T:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider">
            <summary>
            .Net MaskedTextProvider Provider for TextValidateField.
            <para></para>
            <para><a href="https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.maskedtextprovider?view=net-5.0">Wrapper around MaskedTextProvider</a></para>
            <para><a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.maskedtextbox.mask?view=net-5.0">Masking elements</a></para>
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.#ctor(System.String)">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.Mask">
            <summary>
            Mask property
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.Text">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.IsValid">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.Fixed">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.DisplayText">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.Cursor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.CursorStart">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.CursorEnd">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.CursorLeft(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.CursorRight(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.Delete(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.NetMaskedTextProvider.InsertAt(System.Char,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.TextValidateProviders.TextRegexProvider">
            <summary>
            Regex Provider for TextValidateField.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.#ctor(System.String)">
            <summary>
            Empty Constructor.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.Pattern">
            <summary>
            Regex pattern property.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.Text">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.DisplayText">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.IsValid">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.Fixed">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateProviders.TextRegexProvider.ValidateOnInput">
            <summary>
            When true, validates with the regex pattern on each input, preventing the input if it's not valid.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.Cursor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.CursorStart">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.CursorEnd">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.CursorLeft(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.CursorRight(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.Delete(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.InsertAt(System.Char,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateProviders.TextRegexProvider.CompileMask">
            <summary>
            Compiles the regex pattern for validation./>
            </summary>
        </member>
        <member name="T:Terminal.Gui.TextValidateField">
            <summary>
            Text field that validates input through a  <see cref="T:Terminal.Gui.TextValidateProviders.ITextValidateProvider"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.TextValidateField"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.#ctor(Terminal.Gui.TextValidateProviders.ITextValidateProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.TextValidateField"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextValidateField.Provider">
            <summary>
            Provider
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateField.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.PositionCursor">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.GetMargins(System.Int32)">
            <summary>
            Margins for text alignment.
            </summary>
            <param name="width">Total width</param>
            <returns>Left and right margins</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.CursorLeft">
            <summary>
            Try to move the cursor to the left.
            </summary>
            <returns>True if moved.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.CursorRight">
            <summary>
            Try to move the cursor to the right.
            </summary>
            <returns>True if moved.</returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.BackspaceKeyHandler">
            <summary>
            Delete char at cursor position - 1, moving the cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.DeleteKeyHandler">
            <summary>
            Deletes char at current position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.HomeKeyHandler">
            <summary>
            Moves the cursor to first char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.EndKeyHandler">
            <summary>
            Moves the cursor to the last char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TextValidateField.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextValidateField.IsValid">
            <summary>
            This property returns true if the input is valid.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextModel.Count">
            <summary>
            The number of text lines in the model
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextModel.GetLine(System.Int32)">
            <summary>
            Returns the specified line as a List of Rune
            </summary>
            <returns>The line.</returns>
            <param name="line">Line number to retrieve.</param>
        </member>
        <member name="M:Terminal.Gui.TextModel.AddLine(System.Int32,System.Collections.Generic.List{System.Rune})">
            <summary>
            Adds a line to the model at the specified position.
            </summary>
            <param name="pos">Line number where the line will be inserted.</param>
            <param name="runes">The line of text, as a List of Rune.</param>
        </member>
        <member name="M:Terminal.Gui.TextModel.RemoveLine(System.Int32)">
            <summary>
            Removes the line at the specified position
            </summary>
            <param name="pos">Position.</param>
        </member>
        <member name="M:Terminal.Gui.TextModel.GetMaxVisibleLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the maximum line length of the visible lines.
            </summary>
            <param name="first">The first line.</param>
            <param name="last">The last line.</param>
            <param name="tabWidth">The tab width.</param>
        </member>
        <member name="M:Terminal.Gui.TextModel.ResetContinuousFind(Terminal.Gui.Point)">
            <summary>
            Redefine column and line tracking.
            </summary>
            <param name="point">Contains the column and line.</param>
        </member>
        <member name="T:Terminal.Gui.TextView">
            <summary>
             Multi-line text editing <see cref="T:Terminal.Gui.View"/>.
            </summary>
            <remarks>
             <para>
              <see cref="T:Terminal.Gui.TextView"/> provides a multi-line text editor. Users interact
              with it with the standard Windows, Mac, and Linux (Emacs) commands. 
             </para> 
             <list type="table"> 
              <listheader>
               <term>Shortcut</term>
               <description>Action performed</description>
              </listheader>
              <item>
               <term>Left cursor, Control-b</term>
               <description>
                Moves the editing point left.
               </description>
              </item>
              <item>
               <term>Right cursor, Control-f</term>
               <description>
                Moves the editing point right.
               </description>
              </item>
              <item>
               <term>Alt-b</term>
               <description>
                Moves one word back.
               </description>
              </item>
              <item>
               <term>Alt-f</term>
               <description>
                Moves one word forward.
               </description>
              </item>
              <item>
               <term>Up cursor, Control-p</term>
               <description>
                Moves the editing point one line up.
               </description>
              </item>
              <item>
               <term>Down cursor, Control-n</term>
               <description>
                Moves the editing point one line down
               </description>
              </item>
              <item>
               <term>Home key, Control-a</term>
               <description>
                Moves the cursor to the beginning of the line.
               </description>
              </item>
              <item>
               <term>End key, Control-e</term>
               <description>
                Moves the cursor to the end of the line.
               </description>
              </item>
              <item>
               <term>Control-Home</term>
               <description>
                Scrolls to the first line and moves the cursor there.
               </description>
              </item>
              <item>
               <term>Control-End</term>
               <description>
                Scrolls to the last line and moves the cursor there.
               </description>
              </item>
              <item>
               <term>Delete, Control-d</term>
               <description>
                Deletes the character in front of the cursor.
               </description>
              </item>
              <item>
               <term>Backspace</term>
               <description>
                Deletes the character behind the cursor.
               </description>
              </item>
              <item>
               <term>Control-k</term>
               <description>
                Deletes the text until the end of the line and replaces the kill buffer
                with the deleted text. You can paste this text in a different place by
                using Control-y.
               </description>
              </item>
              <item>
               <term>Control-y</term>
               <description>
                 Pastes the content of the kill ring into the current position.
               </description>
              </item>
              <item>
               <term>Alt-d</term>
               <description>
                 Deletes the word above the cursor and adds it to the kill ring. You 
                 can paste the contents of the kill ring with Control-y.
               </description>
              </item>
              <item>
               <term>Control-q</term>
               <description>
                Quotes the next input character, to prevent the normal processing of
                key handling to take place.
               </description>
              </item>
             </list>
            </remarks>
        </member>
        <member name="E:Terminal.Gui.TextView.TextChanged">
            <summary>
            Raised when the <see cref="P:Terminal.Gui.TextView.Text"/> property of the <see cref="T:Terminal.Gui.TextView"/> changes.
            </summary>
            <remarks>
            The <see cref="P:Terminal.Gui.TextView.Text"/> property of <see cref="T:Terminal.Gui.TextView"/> only changes when it is explicitly
            set, not as the user types. To be notified as the user changes the contents of the TextView
            see <see cref="P:Terminal.Gui.TextView.IsDirty"/>.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.TextView.ContentsChanged">
            <summary>
             Raised when the contents of the <see cref="T:Terminal.Gui.TextView"/> are changed. 
            </summary>
            <remarks>
            Unlike the <see cref="E:Terminal.Gui.TextView.TextChanged"/> event, this event is raised whenever the user types or
            otherwise changes the contents of the <see cref="T:Terminal.Gui.TextView"/>.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.TextView.UnwrappedCursorPosition">
            <summary>
            Invoked with the unwrapped <see cref="P:Terminal.Gui.TextView.CursorPosition"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Autocomplete">
            <summary>
            Provides autocomplete context menu based on suggestions at the current cursor
            position. Populate <see cref="P:Terminal.Gui.Autocomplete.AllSuggestions"/> to enable this feature
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.#ctor(Terminal.Gui.Rect)">
            <summary>
             Initializes a <see cref="T:Terminal.Gui.TextView"/> on the specified area, with absolute position and size.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TextView.#ctor">
            <summary>
             Initializes a <see cref="T:Terminal.Gui.TextView"/> on the specified area, 
             with dimensions controlled with the X, Y, Width and Height properties.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Used">
            <summary>
            Tracks whether the text view should be considered "used", that is, that the user has moved in the entry,
            so new input should be appended at the cursor position, rather than clearing the entry
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Text">
            <summary>
             Sets or gets the text in the <see cref="T:Terminal.Gui.TextView"/>.
            </summary>
            <remarks>
            The <see cref="E:Terminal.Gui.TextView.TextChanged"/> event is fired whenever this property is set. Note, however,
            that Text is not set by <see cref="T:Terminal.Gui.TextView"/> as the user types.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TextView.Frame">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextView.TopRow">
            <summary>
            Gets or sets the top row.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.LeftColumn">
            <summary>
            Gets or sets the left column.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Maxlength">
            <summary>
            Gets the maximum visible length line.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Lines">
            <summary>
            Gets the number of lines.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.CursorPosition">
            <summary>
             Sets or gets the current cursor position.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.SelectionStartColumn">
            <summary>
            Start column position of the selected text.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.SelectionStartRow">
            <summary>
            Start row position of the selected text.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.SelectedText">
            <summary>
            The selected text.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.SelectedLength">
            <summary>
            Length of the selected text.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Selecting">
            <summary>
            Get or sets the selecting.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.WordWrap">
            <summary>
            Allows word wrap the to fit the available container width.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.BottomOffset">
            <summary>
            The bottom offset needed to use a horizontal scrollbar or for another reason.
            This is only needed with the keyboard navigation.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.RightOffset">
            <summary>
            The right offset needed to use a vertical scrollbar or for another reason.
            This is only needed with the keyboard navigation.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.AllowsReturn">
            <summary>
            Gets or sets a value indicating whether pressing ENTER in a <see cref="T:Terminal.Gui.TextView"/>
            creates a new line of text in the view or activates the default button for the toplevel.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.AllowsTab">
            <summary>
            Gets or sets whether the <see cref="T:Terminal.Gui.TextView"/> inserts a tab character into the text or ignores 
            tab input. If set to `false` and the user presses the tab key (or shift-tab) the focus will move to the
            next view (or previous with shift-tab). The default is `true`; if the user presses the tab key, a tab 
            character will be inserted into the text.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.TabWidth">
            <summary>
            Gets or sets a value indicating the number of whitespace when pressing the TAB key.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.Multiline">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.TextView"/> is a multiline text view.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.IsDirty">
            <summary>
            Indicates whatever the text was changed or not.
            <see langword="true"/> if the text was changed <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.HasHistoryChanges">
            <summary>
            Indicates whatever the text has history changes or not.
            <see langword="true"/> if the text has history changes <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.ContextMenu">
            <summary>
            Get the <see cref="P:Terminal.Gui.TextView.ContextMenu"/> for this view.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.LoadFile(System.String)">
            <summary>
            Loads the contents of the file into the <see cref="T:Terminal.Gui.TextView"/>.
            </summary>
            <returns><c>true</c>, if file was loaded, <c>false</c> otherwise.</returns>
            <param name="path">Path to the file to load.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the stream into the <see cref="T:Terminal.Gui.TextView"/>.
            </summary>
            <returns><c>true</c>, if stream was loaded, <c>false</c> otherwise.</returns>
            <param name="stream">Stream to load the contents from.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.CloseFile">
            <summary>
            Closes the contents of the stream into the <see cref="T:Terminal.Gui.TextView"/>.
            </summary>
            <returns><c>true</c>, if stream was closed, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Terminal.Gui.TextView.CurrentRow">
            <summary>
             Gets the current cursor row.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.CurrentColumn">
            <summary>
            Gets the cursor column.
            </summary>
            <value>The cursor column.</value>
        </member>
        <member name="M:Terminal.Gui.TextView.PositionCursor">
            <summary>
             Positions the cursor on the current row and column
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.SetNormalColor">
            <summary>
            Sets the driver to the default color for the control where no text is being rendered. Defaults to <see cref="P:Terminal.Gui.ColorScheme.Normal"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.SetNormalColor(System.Collections.Generic.List{System.Rune},System.Int32)">
            <summary>
            Sets the <see cref="P:Terminal.Gui.View.Driver"/> to an appropriate color for rendering the given <paramref name="idx"/> of the
            current <paramref name="line"/>. Override to provide custom coloring by calling <see cref="M:Terminal.Gui.ConsoleDriver.SetAttribute(Terminal.Gui.Attribute)"/>
            Defaults to <see cref="P:Terminal.Gui.ColorScheme.Normal"/>.
            </summary>
            <param name="line"></param>
            <param name="idx"></param>
        </member>
        <member name="M:Terminal.Gui.TextView.SetSelectionColor(System.Collections.Generic.List{System.Rune},System.Int32)">
            <summary>
            Sets the <see cref="P:Terminal.Gui.View.Driver"/> to an appropriate color for rendering the given <paramref name="idx"/> of the
            current <paramref name="line"/>. Override to provide custom coloring by calling <see cref="M:Terminal.Gui.ConsoleDriver.SetAttribute(Terminal.Gui.Attribute)"/>
            Defaults to <see cref="P:Terminal.Gui.ColorScheme.Focus"/>.
            </summary>
            <param name="line"></param>
            <param name="idx"></param>
        </member>
        <member name="M:Terminal.Gui.TextView.SetReadOnlyColor(System.Collections.Generic.List{System.Rune},System.Int32)">
            <summary>
            Sets the <see cref="P:Terminal.Gui.View.Driver"/> to an appropriate color for rendering the given <paramref name="idx"/> of the
            current <paramref name="line"/>. Override to provide custom coloring by calling <see cref="M:Terminal.Gui.ConsoleDriver.SetAttribute(Terminal.Gui.Attribute)"/>
            Defaults to <see cref="P:Terminal.Gui.ColorScheme.Focus"/>.
            </summary>
            <param name="line"></param>
            <param name="idx"></param>
        </member>
        <member name="M:Terminal.Gui.TextView.SetUsedColor(System.Collections.Generic.List{System.Rune},System.Int32)">
            <summary>
            Sets the <see cref="P:Terminal.Gui.View.Driver"/> to an appropriate color for rendering the given <paramref name="idx"/> of the
            current <paramref name="line"/>. Override to provide custom coloring by calling <see cref="M:Terminal.Gui.ConsoleDriver.SetAttribute(Terminal.Gui.Attribute)"/>
            Defaults to <see cref="P:Terminal.Gui.ColorScheme.HotFocus"/>.
            </summary>
            <param name="line"></param>
            <param name="idx"></param>
        </member>
        <member name="P:Terminal.Gui.TextView.ReadOnly">
            <summary>
            Gets or sets whether the <see cref="T:Terminal.Gui.TextView"/> is in read-only mode or not
            </summary>
            <value>Boolean value(Default false)</value>
        </member>
        <member name="P:Terminal.Gui.TextView.DesiredCursorVisibility">
            <summary>
            Get / Set the wished cursor when the field is focused
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.OnLeave(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.SelectAll">
            <summary>
            Select all text.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.FindNextText(NStack.ustring,System.Boolean@,System.Boolean,System.Boolean,NStack.ustring,System.Boolean)">
            <summary>
            Find the next text based on the match case with the option to replace it.
            </summary>
            <param name="textToFind">The text to find.</param>
            <param name="gaveFullTurn"><c>true</c>If all the text was forward searched.<c>false</c>otherwise.</param>
            <param name="matchCase">The match case setting.</param>
            <param name="matchWholeWord">The match whole word setting.</param>
            <param name="textToReplace">The text to replace.</param>
            <param name="replace"><c>true</c>If is replacing.<c>false</c>otherwise.</param>
            <returns><c>true</c>If the text was found.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.TextView.FindPreviousText(NStack.ustring,System.Boolean@,System.Boolean,System.Boolean,NStack.ustring,System.Boolean)">
            <summary>
            Find the previous text based on the match case with the option to replace it.
            </summary>
            <param name="textToFind">The text to find.</param>
            <param name="gaveFullTurn"><c>true</c>If all the text was backward searched.<c>false</c>otherwise.</param>
            <param name="matchCase">The match case setting.</param>
            <param name="matchWholeWord">The match whole word setting.</param>
            <param name="textToReplace">The text to replace.</param>
            <param name="replace"><c>true</c>If the text was found.<c>false</c>otherwise.</param>
            <returns><c>true</c>If the text was found.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.TextView.FindTextChanged">
            <summary>
            Reset the flag to stop continuous find.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.ReplaceAllText(NStack.ustring,System.Boolean,System.Boolean,NStack.ustring)">
            <summary>
            Replaces all the text based on the match case.
            </summary>
            <param name="textToFind">The text to find.</param>
            <param name="matchCase">The match case setting.</param>
            <param name="matchWholeWord">The match whole word setting.</param>
            <param name="textToReplace">The text to replace.</param>
            <returns><c>true</c>If the text was found.<c>false</c>otherwise.</returns>
        </member>
        <member name="M:Terminal.Gui.TextView.SetWrapModel(System.String)">
            <summary>
            Restore from original model.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.UpdateWrapModel(System.String)">
            <summary>
            Update the original model.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.OnUnwrappedCursorPosition(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Invoke the <see cref="E:Terminal.Gui.TextView.UnwrappedCursorPosition"/> event with the unwrapped <see cref="P:Terminal.Gui.TextView.CursorPosition"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.GetNormalColor">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.TextView.CanFocus">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.InsertText(System.String)">
            <summary>
            Inserts the given <paramref name="toAdd"/> text at the current cursor position
            exactly as if the user had just typed it
            </summary>
            <param name="toAdd">Text to add</param>
        </member>
        <member name="M:Terminal.Gui.TextView.GetCurrentLine">
            <summary>
            Returns the characters on the current line (where the cursor is positioned).
            Use <see cref="P:Terminal.Gui.TextView.CurrentColumn"/> to determine the position of the cursor within
            that line
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.TextView.ContentsChangedEventArgs">
            <summary>
            Event arguments for events for when the contents of the TextView change. E.g. the <see cref="E:Terminal.Gui.TextView.ContentsChanged"/> event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.ContentsChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="E:Terminal.Gui.TextView.ContentsChanged"/> instance.
            </summary>
            <param name="currentRow">Contains the row where the change occurred.</param>
            <param name="currentColumn">Contains the column where the change occured.</param>
        </member>
        <member name="P:Terminal.Gui.TextView.ContentsChangedEventArgs.Row">
            <summary>
            
            Contains the row where the change occurred.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TextView.ContentsChangedEventArgs.Col">
            <summary>
            Contains the column where the change occurred.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.OnContentsChanged">
            <summary>
            Called when the contents of the TextView change. E.g. when the user types text or deletes text. Raises
            the <see cref="E:Terminal.Gui.TextView.ContentsChanged"/> event.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.ScrollTo(System.Int32,System.Boolean)">
            <summary>
            Will scroll the <see cref="T:Terminal.Gui.TextView"/> to display the specified row at the top if <paramref name="isRow"/> is true or
            will scroll the <see cref="T:Terminal.Gui.TextView"/> to display the specified column at the left if <paramref name="isRow"/> is false.
            </summary>
            <param name="idx">Row that should be displayed at the top or Column that should be displayed at the left,
            if the value is negative it will be reset to zero</param>
            <param name="isRow">If true (default) the <paramref name="idx"/> is a row, column otherwise.</param>
        </member>
        <member name="M:Terminal.Gui.TextView.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.DeleteCharRight">
            <summary>
            Deletes all the selected or a single character at right from the position of the cursor.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.DeleteCharLeft">
            <summary>
            Deletes all the selected or a single character at left from the position of the cursor.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.DeleteAll">
            <summary>
            Deletes all text.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.OnKeyUp(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.Copy">
            <summary>
            Copy the selected text to the clipboard contents.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.Cut">
            <summary>
            Cut the selected text to the clipboard contents.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.Paste">
            <summary>
            Paste the clipboard contents into the current selected position.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.MoveEnd">
            <summary>
            Will scroll the <see cref="T:Terminal.Gui.TextView"/> to the last line and position the cursor there.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.MoveHome">
            <summary>
            Will scroll the <see cref="T:Terminal.Gui.TextView"/> to the first line and position the cursor there.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextView.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextView.ClearHistoryChanges">
            <summary>
            Allows clearing the <see cref="T:Terminal.Gui.HistoryText.HistoryTextItem"/> items updating the original text.
            </summary>
        </member>
        <member name="T:Terminal.Gui.TextViewAutocomplete">
            <summary>
            Renders an overlay on another view at a given point that allows selecting
            from a range of 'autocomplete' options.
            An implementation on a TextView.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TextViewAutocomplete.GetCurrentWord(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextViewAutocomplete.DeleteTextBackwards">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TextViewAutocomplete.InsertText(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.TimeField">
            <summary>
              Time editing <see cref="T:Terminal.Gui.View"/>
            </summary>
            <remarks>
              The <see cref="T:Terminal.Gui.TimeField"/> <see cref="T:Terminal.Gui.View"/> provides time editing functionality with mouse support.
            </remarks>
        </member>
        <member name="E:Terminal.Gui.TimeField.TimeChanged">
            <summary>
              TimeChanged event, raised when the Date has changed.
            </summary>
            <remarks>
              This event is raised when the <see cref="P:Terminal.Gui.TimeField.Time"/> changes.
            </remarks>
            <remarks>
              The passed <see cref="T:System.EventArgs"/> is a <see cref="T:Terminal.Gui.DateTimeEventArgs`1"/> containing the old value, new value, and format string.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.TimeField.#ctor(System.Int32,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
               Initializes a new instance of <see cref="T:Terminal.Gui.TimeField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Absolute"/> positioning.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="time">Initial time.</param>
            <param name="isShort">If true, the seconds are hidden. Sets the <see cref="P:Terminal.Gui.TimeField.IsShortFormat"/> property.</param>
        </member>
        <member name="M:Terminal.Gui.TimeField.#ctor(System.TimeSpan)">
            <summary>
               Initializes a new instance of <see cref="T:Terminal.Gui.TimeField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
            <param name="time">Initial time</param>
        </member>
        <member name="M:Terminal.Gui.TimeField.#ctor">
            <summary>
               Initializes a new instance of <see cref="T:Terminal.Gui.TimeField"/> using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TimeField.Time">
            <summary>
              Gets or sets the time of the <see cref="T:Terminal.Gui.TimeField"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Terminal.Gui.TimeField.IsShortFormat">
            <summary>
            Get or sets whether <see cref="T:Terminal.Gui.TimeField"/> uses the short or long time format.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TimeField.CursorPosition">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TimeField.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TimeField.DeleteCharLeft(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TimeField.DeleteCharRight">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TimeField.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TimeField.OnTimeChanged(Terminal.Gui.DateTimeEventArgs{System.TimeSpan})">
            <summary>
            Event firing method that invokes the <see cref="E:Terminal.Gui.TimeField.TimeChanged"/> event.
            </summary>
            <param name="args">The event arguments</param>
        </member>
        <member name="T:Terminal.Gui.ITreeView">
            <summary>
            Interface for all non generic members of <see cref="T:Terminal.Gui.TreeView`1"/>.
            
            <a href="https://gui-cs.github.io/Terminal.Gui/articles/treeview.html">See TreeView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.ITreeView.Style">
            <summary>
            Contains options for changing how the tree is rendered.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ITreeView.ClearObjects">
            <summary>
            Removes all objects from the tree and clears selection.
            </summary>
        </member>
        <member name="M:Terminal.Gui.ITreeView.SetNeedsDisplay">
            <summary>
            Sets a flag indicating this view needs to be redisplayed because its state has changed.
            </summary>
        </member>
        <member name="T:Terminal.Gui.TreeView">
            <summary>
            Convenience implementation of generic <see cref="T:Terminal.Gui.TreeView`1"/> for any tree were all nodes
            implement <see cref="T:Terminal.Gui.Trees.ITreeNode"/>.
            
            <a href="https://gui-cs.github.io/Terminal.Gui/articles/treeview.html">See TreeView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView.#ctor">
            <summary>
            Creates a new instance of the tree control with absolute positioning and initialises
            <see cref="T:Terminal.Gui.Trees.TreeBuilder`1"/> with default <see cref="T:Terminal.Gui.Trees.ITreeNode"/> based builder.
            </summary>
        </member>
        <member name="T:Terminal.Gui.TreeView`1">
            <summary>
            Hierarchical tree view with expandable branches. Branch objects are dynamically determined
            when expanded using a user defined <see cref="T:Terminal.Gui.Trees.ITreeBuilder`1"/>.
            
            <a href="https://gui-cs.github.io/Terminal.Gui/articles/treeview.html">See TreeView Deep Dive for more information</a>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.TreeBuilder">
            <summary>
            Determines how sub branches of the tree are dynamically built at runtime as the user
            expands root nodes.
            </summary>
            <value></value>
        </member>
        <member name="F:Terminal.Gui.TreeView`1.selectedObject">
            <summary>
            private variable for <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/>
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.Style">
            <summary>
            Contains options for changing how the tree is rendered.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.MultiSelect">
            <summary>
            True to allow multiple objects to be selected at once.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.MaxDepth">
            <summary>
            Maximum number of nodes that can be expanded in any given branch.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.AllowLetterBasedNavigation">
            <summary>
            True makes a letter key press navigate to the next visible branch that begins with
            that letter/digit.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.SelectedObject">
            <summary>
            The currently selected object in the tree. When <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/> is true this
            is the object at which the cursor is at.
            </summary>
        </member>
        <member name="E:Terminal.Gui.TreeView`1.ObjectActivated">
            <summary>
            This event is raised when an object is activated e.g. by double clicking or 
            pressing <see cref="P:Terminal.Gui.TreeView`1.ObjectActivationKey"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ObjectActivationKey">
            <summary>
            Key which when pressed triggers <see cref="E:Terminal.Gui.TreeView`1.ObjectActivated"/>.
            Defaults to Enter.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ObjectActivationButton">
            <summary>
            Mouse event to trigger <see cref="E:Terminal.Gui.TreeView`1.ObjectActivated"/>.
            Defaults to double click (<see cref="F:Terminal.Gui.MouseFlags.Button1DoubleClicked"/>).
            Set to null to disable this feature.
            </summary>
            <value></value>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ColorGetter">
            <summary>
            Delegate for multi colored tree views. Return the <see cref="T:Terminal.Gui.ColorScheme"/> to use
            for each passed object or null to use the default.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TreeView`1.multiSelectedRegions">
            <summary>
            Secondary selected regions of tree when <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/> is true.
            </summary>
        </member>
        <member name="F:Terminal.Gui.TreeView`1.cachedLineMap">
            <summary>
            Cached result of <see cref="M:Terminal.Gui.TreeView`1.BuildLineMap"/>
            </summary>
        </member>
        <member name="F:Terminal.Gui.TreeView`1.NoBuilderError">
            <summary>
            Error message to display when the control is not properly initialized at draw time 
            (nodes added but no tree builder set).
            </summary>
        </member>
        <member name="E:Terminal.Gui.TreeView`1.SelectionChanged">
            <summary>
            Called when the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> changes.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.Objects">
            <summary>
            The root objects in the tree, note that this collection is of root objects only.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.roots">
            <summary>
            Map of root objects to the branches under them. All objects have 
            a <see cref="T:Terminal.Gui.Trees.Branch`1"/> even if that branch has no children.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ScrollOffsetVertical">
            <summary>
            The amount of tree view that has been scrolled off the top of the screen (by the user 
            scrolling down).
            </summary>
            <remarks>Setting a value of less than 0 will result in a offset of 0. To see changes 
            in the UI call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>.</remarks>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ScrollOffsetHorizontal">
            <summary>
            The amount of tree view that has been scrolled to the right (horizontally).
            </summary>
            <remarks>Setting a value of less than 0 will result in a offset of 0. To see changes 
            in the UI call <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/>.</remarks>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.ContentHeight">
            <summary>
            The current number of rows in the tree (ignoring the controls bounds).
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.AspectGetter">
            <summary>
            Returns the string representation of model objects hosted in the tree. Default 
            implementation is to call <see cref="M:System.Object.ToString"/>.
            </summary>
            <value></value>
        </member>
        <member name="F:Terminal.Gui.TreeView`1.Filter">
            <summary>
            Interface for filtering which lines of the tree are displayed
             e.g. to provide text searching.  Defaults to <see langword="null"/>
            (no filtering).
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.DesiredCursorVisibility">
            <summary>
            Get / Set the wished cursor when the tree is focused.
            Only applies when <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/> is true.
            Defaults to <see cref="F:Terminal.Gui.CursorVisibility.Invisible"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.#ctor">
            <summary>
            Creates a new tree view with absolute positioning. 
            Use <see cref="M:Terminal.Gui.TreeView`1.AddObjects(System.Collections.Generic.IEnumerable{`0})"/> to set set root objects for the tree.
            Children will not be rendered until you set <see cref="P:Terminal.Gui.TreeView`1.TreeBuilder"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.#ctor(Terminal.Gui.Trees.ITreeBuilder{`0})">
            <summary>
            Initialises <see cref="P:Terminal.Gui.TreeView`1.TreeBuilder"/>.Creates a new tree view with absolute 
            positioning. Use <see cref="M:Terminal.Gui.TreeView`1.AddObjects(System.Collections.Generic.IEnumerable{`0})"/> to set set root 
            objects for the tree.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AddObject(`0)">
            <summary>
            Adds a new root level object unless it is already a root of the tree.
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ClearObjects">
            <summary>
            Removes all objects from the tree and clears <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Remove(`0)">
            <summary>
            Removes the given root object from the tree
            </summary>
            <remarks>If <paramref name="o"/> is the currently <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> then the
            selection is cleared</remarks>.
            <param name="o"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AddObjects(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds many new root level objects. Objects that are already root objects are ignored.
            </summary>
            <param name="collection">Objects to add as new root level objects.</param>.\
        </member>
        <member name="M:Terminal.Gui.TreeView`1.RefreshObject(`0,System.Boolean)">
            <summary>
            Refreshes the state of the object <paramref name="o"/> in the tree. This will 
            recompute children, string representation etc.
            </summary>
            <remarks>This has no effect if the object is not exposed in the tree.</remarks>
            <param name="o"></param>
            <param name="startAtTop">True to also refresh all ancestors of the objects branch 
            (starting with the root). False to refresh only the passed node.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.RebuildTree">
            <summary>
            Rebuilds the tree structure for all exposed objects starting with the root objects.
            Call this method when you know there are changes to the tree but don't know which 
            objects have changed (otherwise use <see cref="M:Terminal.Gui.TreeView`1.RefreshObject(`0,System.Boolean)"/>).
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetChildren(`0)">
            <summary>
            Returns the currently expanded children of the passed object. Returns an empty
            collection if the branch is not exposed or not expanded.
            </summary>
            <param name="o">An object in the tree.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetParent(`0)">
            <summary>
            Returns the parent object of <paramref name="o"/> in the tree. Returns null if 
            the object is not exposed in the tree.
            </summary>
            <param name="o">An object in the tree.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Redraw(Terminal.Gui.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetScrollOffsetOf(`0)">
            <summary>
            Returns the index of the object <paramref name="o"/> if it is currently exposed (it's 
            parent(s) have been expanded). This can be used with <see cref="P:Terminal.Gui.TreeView`1.ScrollOffsetVertical"/>
            and <see cref="M:Terminal.Gui.View.SetNeedsDisplay"/> to scroll to a specific object.
            </summary>
            <remarks>Uses the Equals method and returns the first index at which the object is found
            or -1 if it is not found.</remarks>
            <param name="o">An object that appears in your tree and is currently exposed.</param>
            <returns>The index the object was found at or -1 if it is not currently revealed or
            not in the tree at all.</returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetContentWidth(System.Boolean)">
            <summary>
            Returns the maximum width line in the tree including prefix and expansion symbols.
            </summary>
            <param name="visible">True to consider only rows currently visible (based on window
            bounds and <see cref="P:Terminal.Gui.TreeView`1.ScrollOffsetVertical"/>. False to calculate the width of 
            every exposed branch in the tree.</param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.BuildLineMap">
            <summary>
            Calculates all currently visible/expanded branches (including leafs) and outputs them 
            by index from the top of the screen.
            </summary>
            <remarks>Index 0 of the returned array is the first item that should be visible in the
            top of the control, index 1 is the next etc.</remarks>
            <returns></returns>
        </member>
        <member name="P:Terminal.Gui.TreeView`1.KeystrokeNavigator">
            <summary>
            Gets the <see cref="T:Terminal.Gui.CollectionNavigator"/> that searches the <see cref="P:Terminal.Gui.TreeView`1.Objects"/> collection as
            the user types.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ActivateSelectedObjectIfAny">
            <summary>
            <para>Triggers the <see cref="E:Terminal.Gui.TreeView`1.ObjectActivated"/> event with the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/>.</para>
            
            <para>This method also ensures that the selected object is visible.</para>
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetObjectRow(`0)">
            <summary>
            <para>
            Returns the Y coordinate within the <see cref="P:Terminal.Gui.View.Bounds"/> of the
            tree at which <paramref name="toFind"/> would be displayed or null if
            it is not currently exposed (e.g. its parent is collapsed).
            </para>
            <para>
            Note that the returned value can be negative if the TreeView is scrolled
            down and the <paramref name="toFind"/> object is off the top of the view.
            </para>
            </summary>
            <param name="toFind"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AdjustSelectionToNextItemBeginningWith(System.Char,System.StringComparison)">
            <summary>
            <para>Moves the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> to the next item that begins with <paramref name="character"/>.</para>
            <para>This method will loop back to the start of the tree if reaching the end without finding a match.</para>
            </summary>
            <param name="character">The first character of the next item you want selected.</param>
            <param name="caseSensitivity">Case sensitivity of the search.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.MovePageUp(System.Boolean)">
            <summary>
            Moves the selection up by the height of the control (1 page).
            </summary>
            <param name="expandSelection">True if the navigation should add the covered nodes to the selected current selection.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.MovePageDown(System.Boolean)">
            <summary>
            Moves the selection down by the height of the control (1 page).
            </summary>
            <param name="expandSelection">True if the navigation should add the covered nodes to the selected current selection.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ScrollDown">
            <summary>
            Scrolls the view area down a single line without changing the current selection.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ScrollUp">
            <summary>
            Scrolls the view area up a single line without changing the current selection.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.OnObjectActivated(Terminal.Gui.Trees.ObjectActivatedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Terminal.Gui.TreeView`1.ObjectActivated"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetObjectOnRow(System.Int32)">
            <summary>
            Returns the object in the tree list that is currently visible.
            at the provided row. Returns null if no object is at that location.
            <remarks>
            </remarks>
            If you have screen coordinates then use <see cref="M:Terminal.Gui.View.ScreenToView(System.Int32,System.Int32)"/>
            to translate these into the client area of the <see cref="T:Terminal.Gui.TreeView`1"/>.
            </summary>
            <param name="row">The row of the <see cref="P:Terminal.Gui.View.Bounds"/> of the <see cref="T:Terminal.Gui.TreeView`1"/>.</param>
            <returns>The object currently displayed on this row or null.</returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.MouseEvent(Terminal.Gui.MouseEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.HitTest(System.Int32)">
            <summary>
            Returns the branch at the given <paramref name="y"/> client
            coordinate e.g. following a click event.
            </summary>
            <param name="y">Client Y position in the controls bounds.</param>
            <returns>The clicked branch or null if outside of tree region.</returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.PositionCursor">
            <summary>
            Positions the cursor at the start of the selected objects line (if visible).
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.CursorLeft(System.Boolean)">
            <summary>
            Determines systems behaviour when the left arrow key is pressed. Default behaviour is
            to collapse the current tree node if possible otherwise changes selection to current 
            branches parent.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GoToFirst">
            <summary>
            Changes the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> to the first root object and resets 
            the <see cref="P:Terminal.Gui.TreeView`1.ScrollOffsetVertical"/> to 0.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GoToEnd">
            <summary>
            Changes the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> to the last object in the tree and scrolls so
            that it is visible.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GoTo(`0)">
            <summary>
            Changes the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> to <paramref name="toSelect"/> and scrolls to ensure
            it is visible. Has no effect if <paramref name="toSelect"/> is not exposed in the tree (e.g. 
            its parents are collapsed).
            </summary>
            <param name="toSelect"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AdjustSelection(System.Int32,System.Boolean)">
            <summary>
            The number of screen lines to move the currently selected object by. Supports negative values.
            <paramref name="offset"/>. Each branch occupies 1 line on screen.
            </summary>
            <remarks>If nothing is currently selected or the selected object is no longer in the tree
            then the first object in the tree is selected instead.</remarks>
            <param name="offset">Positive to move the selection down the screen, negative to move it up</param>
            <param name="expandSelection">True to expand the selection (assuming 
            <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/> is enabled). False to replace.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AdjustSelectionToBranchStart">
            <summary>
            Moves the selection to the first child in the currently selected level.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AdjustSelectionToBranchEnd">
            <summary>
            Moves the selection to the last child in the currently selected level.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.AdjustSelectionToNext(System.Func{Terminal.Gui.Trees.Branch{`0},System.Boolean})">
            <summary>
            Sets the selection to the next branch that matches the <paramref name="predicate"/>.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.EnsureVisible(`0)">
            <summary>
            Adjusts the <see cref="P:Terminal.Gui.TreeView`1.ScrollOffsetVertical"/> to ensure the given
            <paramref name="model"/> is visible. Has no effect if already visible.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Expand">
            <summary>
            Expands the currently <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Expand(`0)">
            <summary>
            Expands the supplied object if it is contained in the tree (either as a root object or 
            as an exposed branch object).
            </summary>
            <param name="toExpand">The object to expand.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ExpandAll(`0)">
            <summary>
            Expands the supplied object and all child objects.
            </summary>
            <param name="toExpand">The object to expand.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ExpandAll">
            <summary>
            Fully expands all nodes in the tree, if the tree is very big and built dynamically this
            may take a while (e.g. for file system).
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.CanExpand(`0)">
            <summary>
            Returns true if the given object <paramref name="o"/> is exposed in the tree and can be
            expanded otherwise false.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.IsExpanded(`0)">
            <summary>
            Returns true if the given object <paramref name="o"/> is exposed in the tree and 
            expanded otherwise false.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Collapse">
            <summary>
            Collapses the <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.Collapse(`0)">
            <summary>
            Collapses the supplied object if it is currently expanded .
            </summary>
            <param name="toCollapse">The object to collapse.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.CollapseAll(`0)">
            <summary>
            Collapses the supplied object if it is currently expanded. Also collapses all children
            branches (this will only become apparent when/if the user expands it again).
            </summary>
            <param name="toCollapse">The object to collapse.</param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.CollapseAll">
            <summary>
            Collapses all root nodes in the tree.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.CollapseImpl(`0,System.Boolean)">
            <summary>
            Implementation of <see cref="M:Terminal.Gui.TreeView`1.Collapse(`0)"/> and <see cref="M:Terminal.Gui.TreeView`1.CollapseAll(`0)"/>. Performs
            operation and updates selection if disapeared.
            </summary>
            <param name="toCollapse"></param>
            <param name="all"></param>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.InvalidateLineMap">
            <summary>
            Clears any cached results of the tree state.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.ObjectToBranch(`0)">
            <summary>
            Returns the corresponding <see cref="T:Terminal.Gui.Trees.Branch`1"/> in the tree for
            <paramref name="toFind"/>. This will not work for objects hidden
            by their parent being collapsed.
            </summary>
            <param name="toFind"></param>
            <returns>The branch for <paramref name="toFind"/> or null if it is not currently 
            exposed in the tree.</returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.IsSelected(`0)">
            <summary>
            Returns true if the <paramref name="model"/> is either the 
            <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> or part of a <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/>.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.GetAllSelectedObjects">
            <summary>
            Returns <see cref="P:Terminal.Gui.TreeView`1.SelectedObject"/> (if not null) and all multi selected objects if 
            <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/> is true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.SelectAll">
            <summary>
            Selects all objects in the tree when <see cref="P:Terminal.Gui.TreeView`1.MultiSelect"/> is enabled otherwise 
            does nothing.
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeView`1.OnSelectionChanged(Terminal.Gui.Trees.SelectionChangedEventArgs{`0})">
            <summary>
            Raises the SelectionChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Terminal.Gui.TreeSelection`1.#ctor(Terminal.Gui.Trees.Branch{`0},System.Int32,System.Collections.Generic.IReadOnlyCollection{Terminal.Gui.Trees.Branch{`0}})">
            <summary>
            Creates a new selection between two branches in the tree
            </summary>
            <param name="from"></param>
            <param name="toIndex"></param>
            <param name="map"></param>
        </member>
        <member name="T:Terminal.Gui.TreeViewTextFilter`1">
            <summary>
            <see cref="T:Terminal.Gui.ITreeViewFilter`1"/> implementation which searches the
            <see cref="P:Terminal.Gui.TreeView`1.AspectGetter"/> of the model for the given
            <see cref="P:Terminal.Gui.TreeViewTextFilter`1.Text"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Terminal.Gui.TreeViewTextFilter`1.#ctor(Terminal.Gui.TreeView{`0})">
            <summary>
            Creates a new instance of the filter for use with <paramref name="forTree"/>.
            Set <see cref="P:Terminal.Gui.TreeViewTextFilter`1.Text"/> to begin filtering.
            </summary>
            <param name="forTree"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Terminal.Gui.TreeViewTextFilter`1.Comparer">
            <summary>
            The case sensitivity of the search match. 
            Defaults to <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.TreeViewTextFilter`1.Text">
            <summary>
            The text that will be searched for in the <see cref="T:Terminal.Gui.TreeView`1"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.TreeViewTextFilter`1.IsMatch(`0)">
            <summary>
            Returns <typeparamref name="T"/> if there is no <see cref="P:Terminal.Gui.TreeViewTextFilter`1.Text"/> or
            the text matches the <see cref="P:Terminal.Gui.TreeView`1.AspectGetter"/> of the
            <paramref name="model"/>.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Terminal.Gui.Dialog">
            <summary>
            The <see cref="T:Terminal.Gui.Dialog"/> <see cref="T:Terminal.Gui.View"/> is a <see cref="T:Terminal.Gui.Window"/> that by default is centered and contains one 
            or more <see cref="T:Terminal.Gui.Button"/>s. It defaults to the <see cref="P:Terminal.Gui.Colors.Dialog"/> color scheme and has a 1 cell padding around the edges.
            </summary>
            <remarks>
             To run the <see cref="T:Terminal.Gui.Dialog"/> modally, create the <see cref="T:Terminal.Gui.Dialog"/>, and pass it to <see cref="M:Terminal.Gui.Application.Run(System.Func{System.Exception,System.Boolean})"/>. 
             This will execute the dialog until it terminates via the [ESC] or [CTRL-Q] key, or when one of the views
             or buttons added to the dialog calls <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/>.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Dialog.#ctor(NStack.ustring,System.Int32,System.Int32,Terminal.Gui.Button[])">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Dialog"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning 
            and an optional set of <see cref="T:Terminal.Gui.Button"/>s to display
            </summary>
            <param name="title">Title for the dialog.</param>
            <param name="width">Width for the dialog.</param>
            <param name="height">Height for the dialog.</param>
            <param name="buttons">Optional buttons to lay out at the bottom of the dialog.</param>
            <remarks>
            if <c>width</c> and <c>height</c> are both 0, the Dialog will be vertically and horizontally centered in the
            container and the size will be 85% of the container. 
            After initialization use <c>X</c>, <c>Y</c>, <c>Width</c>, and <c>Height</c> to override this with a location or size.
            </remarks>
            <remarks>
            Use the constructor that does not take a <c>width</c> and <c>height</c> instead.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Dialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Dialog"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/>.
            </summary>
            <remarks>
            <para>
            Te Dialog will be vertically and horizontally centered in the container and the size will be 85% of the container. 
            After initialization use <c>X</c>, <c>Y</c>, <c>Width</c>, and <c>Height</c> to override this with a location or size.
            </para>
            <para>
            Use <see cref="M:Terminal.Gui.Dialog.AddButton(Terminal.Gui.Button)"/> to add buttons to the dialog.
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Dialog.#ctor(NStack.ustring,Terminal.Gui.Button[])">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Dialog"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning 
            and with an optional set of <see cref="T:Terminal.Gui.Button"/>s to display
            </summary>
            <param name="title">Title for the dialog.</param>
            <param name="buttons">Optional buttons to lay out at the bottom of the dialog.</param>
            <remarks>
            Te Dialog will be vertically and horizontally centered in the container and the size will be 85% of the container. 
            After initialization use <c>X</c>, <c>Y</c>, <c>Width</c>, and <c>Height</c> to override this with a location or size.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Dialog.AddButton(Terminal.Gui.Button)">
            <summary>
            Adds a <see cref="T:Terminal.Gui.Button"/> to the <see cref="T:Terminal.Gui.Dialog"/>, its layout will be controlled by the <see cref="T:Terminal.Gui.Dialog"/>
            </summary>
            <param name="button">Button to add.</param>
        </member>
        <member name="T:Terminal.Gui.Dialog.ButtonAlignments">
            <summary>
            Determines the horizontal alignment of the Dialog buttons.
            </summary>
        </member>
        <member name="F:Terminal.Gui.Dialog.ButtonAlignments.Center">
            <summary>
            Center-aligns the buttons (the default).
            </summary>
        </member>
        <member name="F:Terminal.Gui.Dialog.ButtonAlignments.Justify">
            <summary>
            Justifies the buttons
            </summary>
        </member>
        <member name="F:Terminal.Gui.Dialog.ButtonAlignments.Left">
            <summary>
            Left-aligns the buttons
            </summary>
        </member>
        <member name="F:Terminal.Gui.Dialog.ButtonAlignments.Right">
            <summary>
            Right-aligns the buttons
            </summary>
        </member>
        <member name="P:Terminal.Gui.Dialog.ButtonAlignment">
            <summary>
            Determines how the <see cref="T:Terminal.Gui.Dialog"/> <see cref="T:Terminal.Gui.Button"/>s are aligned along the 
            bottom of the dialog. 
            </summary>
        </member>
        <member name="M:Terminal.Gui.Dialog.ProcessKey(Terminal.Gui.KeyEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Terminal.Gui.DirListView.OnEnter(Terminal.Gui.View)">
            <inheritdoc/>
        </member>
        <member name="T:Terminal.Gui.FileDialog">
            <summary>
            Base class for the <see cref="T:Terminal.Gui.OpenDialog"/> and the <see cref="T:Terminal.Gui.SaveDialog"/>
            </summary>
        </member>
        <member name="M:Terminal.Gui.FileDialog.#ctor">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.FileDialog"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.FileDialog.#ctor(NStack.ustring,NStack.ustring,NStack.ustring,NStack.ustring,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.FileDialog"/>
            </summary>
            <param name="title">The title.</param>
            <param name="prompt">The prompt.</param>
            <param name="nameFieldLabel">The name of the file field label..</param>
            <param name="message">The message.</param>
            <param name="allowedTypes">The allowed types.</param>
        </member>
        <member name="M:Terminal.Gui.FileDialog.#ctor(NStack.ustring,NStack.ustring,NStack.ustring,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.FileDialog"/>
            </summary>
            <param name="title">The title.</param>
            <param name="prompt">The prompt.</param>
            <param name="message">The message.</param>
            <param name="allowedTypes">The allowed types.</param>
        </member>
        <member name="M:Terminal.Gui.FileDialog.#ctor(NStack.ustring,NStack.ustring,NStack.ustring,NStack.ustring,NStack.ustring,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.FileDialog"/>
            </summary>
            <param name="title">The title.</param>
            <param name="prompt">The prompt.</param>
            <param name="nameDirLabel">The name of the directory field label.</param>
            <param name="nameFieldLabel">The name of the file field label..</param>
            <param name="message">The message.</param>
            <param name="allowedTypes">The allowed types.</param>
        </member>
        <member name="M:Terminal.Gui.FileDialog.WillPresent">
            <inheritdoc/>
        </member>
        <member name="P:Terminal.Gui.FileDialog.Prompt">
            <summary>
            Gets or sets the prompt label for the <see cref="T:Terminal.Gui.Button"/> displayed to the user
            </summary>
            <value>The prompt.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.NameDirLabel">
            <summary>
            Gets or sets the name of the directory field label.
            </summary>
            <value>The name of the directory field label.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.NameFieldLabel">
            <summary>
            Gets or sets the name field label.
            </summary>
            <value>The name field label.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.Message">
            <summary>
            Gets or sets the message displayed to the user, defaults to nothing
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.CanCreateDirectories">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.FileDialog"/> can create directories.
            </summary>
            <value><c>true</c> if can create directories; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.IsExtensionHidden">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.FileDialog"/> is extension hidden.
            </summary>
            <value><c>true</c> if is extension hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.DirectoryPath">
            <summary>
            Gets or sets the directory path for this panel
            </summary>
            <value>The directory path.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.AllowedFileTypes">
            <summary>
            The array of filename extensions allowed, or null if all file extensions are allowed.
            </summary>
            <value>The allowed file types.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.AllowsOtherFileTypes">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.FileDialog"/> allows the file to be saved with a different extension
            </summary>
            <value><c>true</c> if allows other file types; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.FilePath">
            <summary>
            The File path that is currently shown on the panel
            </summary>
            <value>The absolute file path for the file path entered.</value>
        </member>
        <member name="P:Terminal.Gui.FileDialog.Canceled">
            <summary>
            Check if the dialog was or not canceled.
            </summary>
        </member>
        <member name="T:Terminal.Gui.SaveDialog">
            <summary>
             The <see cref="T:Terminal.Gui.SaveDialog"/> provides an interactive dialog box for users to pick a file to 
             save.
            </summary>
            <remarks>
            <para>
              To use, create an instance of <see cref="T:Terminal.Gui.SaveDialog"/>, and pass it to
              <see cref="M:Terminal.Gui.Application.Run(System.Func{System.Exception,System.Boolean})"/>. This will run the dialog modally,
              and when this returns, the <see cref="P:Terminal.Gui.SaveDialog.FileName"/>property will contain the selected file name or 
              null if the user canceled. 
            </para>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.SaveDialog.#ctor">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.SaveDialog"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.SaveDialog.#ctor(NStack.ustring,NStack.ustring,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.SaveDialog"/>.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
            <param name="allowedTypes">The allowed types.</param>
        </member>
        <member name="P:Terminal.Gui.SaveDialog.FileName">
            <summary>
            Gets the name of the file the user selected for saving, or null
            if the user canceled the <see cref="T:Terminal.Gui.SaveDialog"/>.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="T:Terminal.Gui.OpenDialog">
            <summary>
            The <see cref="T:Terminal.Gui.OpenDialog"/>provides an interactive dialog box for users to select files or directories.
            </summary>
            <remarks>
            <para>
              The open dialog can be used to select files for opening, it can be configured to allow
              multiple items to be selected (based on the AllowsMultipleSelection) variable and
              you can control whether this should allow files or directories to be selected.
            </para>
            <para>
              To use, create an instance of <see cref="T:Terminal.Gui.OpenDialog"/>, and pass it to
              <see cref="M:Terminal.Gui.Application.Run(System.Func{System.Exception,System.Boolean})"/>. This will run the dialog modally,
              and when this returns, the list of files will be available on the <see cref="P:Terminal.Gui.OpenDialog.FilePaths"/> property.
            </para>
            <para>
            To select more than one file, users can use the spacebar, or control-t.
            </para>
            </remarks>
        </member>
        <member name="T:Terminal.Gui.OpenDialog.OpenMode">
            <summary>
            Determine which <see cref="N:System.IO"/> type to open.
            </summary>
        </member>
        <member name="F:Terminal.Gui.OpenDialog.OpenMode.File">
            <summary>
            Opens only file or files.
            </summary>
        </member>
        <member name="F:Terminal.Gui.OpenDialog.OpenMode.Directory">
            <summary>
            Opens only directory or directories.
            </summary>
        </member>
        <member name="F:Terminal.Gui.OpenDialog.OpenMode.Mixed">
            <summary>
            Opens files and directories.
            </summary>
        </member>
        <member name="M:Terminal.Gui.OpenDialog.#ctor">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.OpenDialog"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.OpenDialog.#ctor(NStack.ustring,NStack.ustring,System.Collections.Generic.List{System.String},Terminal.Gui.OpenDialog.OpenMode)">
            <summary>
            Initializes a new <see cref="T:Terminal.Gui.OpenDialog"/>.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
            <param name="allowedTypes">The allowed types.</param>
            <param name="openMode">The open mode.</param>
        </member>
        <member name="P:Terminal.Gui.OpenDialog.CanChooseFiles">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.OpenDialog"/> can choose files.
            </summary>
            <value><c>true</c> if can choose files; otherwise, <c>false</c>.  Defaults to <c>true</c></value>
        </member>
        <member name="P:Terminal.Gui.OpenDialog.CanChooseDirectories">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.OpenDialog"/> can choose directories.
            </summary>
            <value><c>true</c> if can choose directories; otherwise, <c>false</c> defaults to <c>false</c>.</value>
        </member>
        <member name="P:Terminal.Gui.OpenDialog.AllowsMultipleSelection">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Terminal.Gui.OpenDialog"/> allows multiple selection.
            </summary>
            <value><c>true</c> if allows multiple selection; otherwise, <c>false</c>, defaults to false.</value>
        </member>
        <member name="P:Terminal.Gui.OpenDialog.FilePaths">
            <summary>
            Returns the selected files, or an empty list if nothing has been selected
            </summary>
            <value>The file paths.</value>
        </member>
        <member name="T:Terminal.Gui.MessageBox">
            <summary>
            MessageBox displays a modal message to the user, with a title, a message and a series of options that the user can choose from.
            </summary>
            <para>
              The difference between the <see cref="M:Terminal.Gui.MessageBox.Query(NStack.ustring,NStack.ustring,NStack.ustring[])"/> and <see cref="M:Terminal.Gui.MessageBox.ErrorQuery(NStack.ustring,NStack.ustring,NStack.ustring[])"/> 
              method is the default set of colors used for the message box.
            </para>
            <para>
            The following example pops up a <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and text, plus two <see cref="T:Terminal.Gui.Button"/>s.
            The value -1 is returned when the user cancels the <see cref="T:Terminal.Gui.MessageBox"/> by pressing the ESC key.
            </para>
            <example>
            <code lang="c#">
            var n = MessageBox.Query ("Quit Demo", "Are you sure you want to quit this demo?", "Yes", "No");
            if (n == 0)
               quit = true;
            else
               quit = false;
            </code>
            </example>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(System.Int32,System.Int32,NStack.ustring,NStack.ustring,NStack.ustring[])">
            <summary>
            Presents a normal <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            Use <see cref="M:Terminal.Gui.MessageBox.Query(NStack.ustring,NStack.ustring,NStack.ustring[])"/> instead; it automatically sizes the MessageBox based on the contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(NStack.ustring,NStack.ustring,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            The message box will be vertically and horizontally centered in the container and the size will be automatically determined
            from the size of the message and buttons.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(System.Int32,System.Int32,NStack.ustring,NStack.ustring,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            Use <see cref="M:Terminal.Gui.MessageBox.ErrorQuery(NStack.ustring,NStack.ustring,NStack.ustring[])"/> instead; it automatically sizes the MessageBox based on the contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(NStack.ustring,NStack.ustring,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            The message box will be vertically and horizontally centered in the container and the size will be automatically determined
            from the size of the title, message. and buttons.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(System.Int32,System.Int32,NStack.ustring,NStack.ustring,System.Int32,NStack.ustring[])">
            <summary>
            Presents a normal <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            Use <see cref="M:Terminal.Gui.MessageBox.Query(NStack.ustring,NStack.ustring,NStack.ustring[])"/> instead; it automatically sizes the MessageBox based on the contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(NStack.ustring,NStack.ustring,System.Int32,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            The message box will be vertically and horizontally centered in the container and the size will be automatically determined
            from the size of the message and buttons.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(System.Int32,System.Int32,NStack.ustring,NStack.ustring,System.Int32,Terminal.Gui.Border,NStack.ustring[])">
            <summary>
            Presents a normal <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="border">The border settings.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            Use <see cref="M:Terminal.Gui.MessageBox.Query(NStack.ustring,NStack.ustring,NStack.ustring[])"/> instead; it automatically sizes the MessageBox based on the contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.Query(NStack.ustring,NStack.ustring,System.Int32,Terminal.Gui.Border,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="border">The border settings.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            The message box will be vertically and horizontally centered in the container and the size will be automatically determined
            from the size of the message and buttons.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(System.Int32,System.Int32,NStack.ustring,NStack.ustring,System.Int32,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            Use <see cref="M:Terminal.Gui.MessageBox.ErrorQuery(NStack.ustring,NStack.ustring,NStack.ustring[])"/> instead; it automatically sizes the MessageBox based on the contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(NStack.ustring,NStack.ustring,System.Int32,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            The message box will be vertically and horizontally centered in the container and the size will be automatically determined
            from the size of the title, message. and buttons.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(System.Int32,System.Int32,NStack.ustring,NStack.ustring,System.Int32,Terminal.Gui.Border,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="width">Width for the window.</param>
            <param name="height">Height for the window.</param>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="border">The border settings.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            Use <see cref="M:Terminal.Gui.MessageBox.ErrorQuery(NStack.ustring,NStack.ustring,NStack.ustring[])"/> instead; it automatically sizes the MessageBox based on the contents.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.MessageBox.ErrorQuery(NStack.ustring,NStack.ustring,System.Int32,Terminal.Gui.Border,NStack.ustring[])">
            <summary>
            Presents an error <see cref="T:Terminal.Gui.MessageBox"/> with the specified title and message and a list of buttons to show to the user.
            </summary>
            <returns>The index of the selected button, or -1 if the user pressed ESC to close the dialog.</returns>
            <param name="title">Title for the query.</param>
            <param name="message">Message to display, might contain multiple lines.</param>
            <param name="defaultButton">Index of the default button.</param>
            <param name="border">The border settings.</param>
            <param name="buttons">Array of buttons to add.</param>
            <remarks>
            The message box will be vertically and horizontally centered in the container and the size will be automatically determined
            from the size of the title, message. and buttons.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.MessageBox.Clicked">
            <summary>
            The index of the selected button, or -1 if the user pressed ESC to close the dialog.
            This is useful for web based console where by default there is no SynchronizationContext or TaskScheduler.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Wizard">
            <summary>
            Provides navigation and a user interface (UI) to collect related data across multiple steps. Each step (<see cref="T:Terminal.Gui.Wizard.WizardStep"/>) can host 
            arbitrary <see cref="T:Terminal.Gui.View"/>s, much like a <see cref="T:Terminal.Gui.Dialog"/>. Each step also has a pane for help text. Along the
            bottom of the Wizard view are customizable buttons enabling the user to navigate forward and backward through the Wizard. 
            </summary>
            <remarks>
            The Wizard can be displayed either as a modal (pop-up) <see cref="T:Terminal.Gui.Window"/> (like <see cref="T:Terminal.Gui.Dialog"/>) or as an embedded <see cref="T:Terminal.Gui.View"/>. 
            
            By default, <see cref="P:Terminal.Gui.Wizard.Modal"/> is <c>true</c>. In this case launch the Wizard with <c>Application.Run(wizard)</c>. 
            
            See <see cref="P:Terminal.Gui.Wizard.Modal"/> for more details.
            </remarks>
            <example>
            <code>
            using Terminal.Gui;
            using NStack;
            
            Application.Init();
            
            var wizard = new Wizard ($"Setup Wizard");
            
            // Add 1st step
            var firstStep = new Wizard.WizardStep ("End User License Agreement");
            wizard.AddStep(firstStep);
            firstStep.NextButtonText = "Accept!";
            firstStep.HelpText = "This is the End User License Agreement.";
            
            // Add 2nd step
            var secondStep = new Wizard.WizardStep ("Second Step");
            wizard.AddStep(secondStep);
            secondStep.HelpText = "This is the help text for the Second Step.";
            var lbl = new Label ("Name:") { AutoSize = true };
            secondStep.Add(lbl);
            
            var name = new TextField () { X = Pos.Right (lbl) + 1, Width = Dim.Fill () - 1 };
            secondStep.Add(name);
            
            wizard.Finished += (args) =>
            {
                MessageBox.Query("Wizard", $"Finished. The Name entered is '{name.Text}'", "Ok");
                Application.RequestStop();
            };
            
            Application.Top.Add (wizard);
            Application.Run ();
            Application.Shutdown ();
            </code>
            </example>
        </member>
        <member name="T:Terminal.Gui.Wizard.WizardStep">
            <summary>
            Represents a basic step that is displayed in a <see cref="T:Terminal.Gui.Wizard"/>. The <see cref="T:Terminal.Gui.Wizard.WizardStep"/> view is divided horizontally in two. On the left is the
            content view where <see cref="T:Terminal.Gui.View"/>s can be added,  On the right is the help for the step.
            Set <see cref="P:Terminal.Gui.Wizard.WizardStep.HelpText"/> to set the help text. If the help text is empty the help pane will not
            be shown. 
            
            If there are no Views added to the WizardStep the <see cref="P:Terminal.Gui.Wizard.WizardStep.HelpText"/> (if not empty) will fill the wizard step. 
            </summary>
            <remarks>
            If <see cref="T:Terminal.Gui.Button"/>s are added, do not set <see cref="P:Terminal.Gui.Button.IsDefault"/> to true as this will conflict
            with the Next button of the Wizard.
            
            Subscribe to the <see cref="E:Terminal.Gui.View.VisibleChanged"/> event to be notified when the step is active; see also: <see cref="E:Terminal.Gui.Wizard.StepChanged"/>.
            
            To enable or disable a step from being shown to the user, set <see cref="P:Terminal.Gui.View.Enabled"/>.
            
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Wizard.WizardStep.Title">
            <summary>
            The title of the <see cref="T:Terminal.Gui.Wizard.WizardStep"/>. 
            </summary>
            <remarks>The Title is only displayed when the <see cref="T:Terminal.Gui.Wizard"/> is used as a modal pop-up (see <see cref="P:Terminal.Gui.Wizard.Modal"/>.</remarks>
        </member>
        <member name="T:Terminal.Gui.Wizard.WizardStep.TitleEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> which allows passing a cancelable new <see cref="P:Terminal.Gui.Wizard.WizardStep.Title"/> value event.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Wizard.WizardStep.TitleEventArgs.NewTitle">
            <summary>
            The new Window Title.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Wizard.WizardStep.TitleEventArgs.OldTitle">
            <summary>
            The old Window Title.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Wizard.WizardStep.TitleEventArgs.Cancel">
            <summary>
            Flag which allows cancelling the Title change.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.WizardStep.TitleEventArgs.#ctor(NStack.ustring,NStack.ustring)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.Wizard.WizardStep.TitleEventArgs"/>
            </summary>
            <param name="oldTitle">The <see cref="P:Terminal.Gui.Wizard.WizardStep.Title"/> that is/has been replaced.</param>
            <param name="newTitle">The new <see cref="P:Terminal.Gui.Wizard.WizardStep.Title"/> to be replaced.</param>
        </member>
        <member name="M:Terminal.Gui.Wizard.WizardStep.OnTitleChanging(NStack.ustring,NStack.ustring)">
            <summary>
            Called before the <see cref="P:Terminal.Gui.Wizard.WizardStep.Title"/> changes. Invokes the <see cref="E:Terminal.Gui.Wizard.WizardStep.TitleChanging"/> event, which can be cancelled.
            </summary>
            <param name="oldTitle">The <see cref="P:Terminal.Gui.Wizard.WizardStep.Title"/> that is/has been replaced.</param>
            <param name="newTitle">The new <see cref="P:Terminal.Gui.Wizard.WizardStep.Title"/> to be replaced.</param>
            <returns><c>true</c> if an event handler cancelled the Title change.</returns>
        </member>
        <member name="E:Terminal.Gui.Wizard.WizardStep.TitleChanging">
            <summary>
            Event fired when the <see cref="P:Terminal.Gui.Wizard.WizardStep.Title"/> is changing. Set <see cref="P:Terminal.Gui.Wizard.WizardStep.TitleEventArgs.Cancel"/> to 
            <c>true</c> to cancel the Title change.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.WizardStep.OnTitleChanged(NStack.ustring,NStack.ustring)">
            <summary>
            Called when the <see cref="P:Terminal.Gui.Wizard.WizardStep.Title"/> has been changed. Invokes the <see cref="E:Terminal.Gui.Wizard.WizardStep.TitleChanged"/> event.
            </summary>
            <param name="oldTitle">The <see cref="P:Terminal.Gui.Wizard.WizardStep.Title"/> that is/has been replaced.</param>
            <param name="newTitle">The new <see cref="P:Terminal.Gui.Wizard.WizardStep.Title"/> to be replaced.</param>
        </member>
        <member name="E:Terminal.Gui.Wizard.WizardStep.TitleChanged">
            <summary>
            Event fired after the <see cref="P:Terminal.Gui.Wizard.WizardStep.Title"/> has been changed. 
            </summary>
        </member>
        <member name="T:Terminal.Gui.Wizard.WizardStep.WizardContentView">
            <summary>
            WizardContentView is an internal implementation detail of Window. It is used to host Views added with <see cref="M:Terminal.Gui.Wizard.WizardStep.Add(Terminal.Gui.View)"/>. 
            Its ONLY reason for being is to provide a simple way for Window to expose to those SubViews that the Window's Bounds 
            are actually deflated due to the border. 
            </summary>
        </member>
        <member name="P:Terminal.Gui.Wizard.WizardStep.HelpText">
            <summary>
            Sets or gets help text for the <see cref="T:Terminal.Gui.Wizard.WizardStep"/>.If <see cref="P:Terminal.Gui.Wizard.WizardStep.HelpText"/> is empty
            the help pane will not be visible and the content will fill the entire WizardStep.
            </summary>
            <remarks>The help text is displayed using a read-only <see cref="T:Terminal.Gui.TextView"/>.</remarks>
        </member>
        <member name="P:Terminal.Gui.Wizard.WizardStep.BackButtonText">
            <summary>
            Sets or gets the text for the back button. The back button will only be visible on 
            steps after the first step.
            </summary>
            <remarks>The default text is "Back"</remarks>
        </member>
        <member name="P:Terminal.Gui.Wizard.WizardStep.NextButtonText">
            <summary>
            Sets or gets the text for the next/finish button.
            </summary>
            <remarks>The default text is "Next..." if the Pane is not the last pane. Otherwise it is "Finish"</remarks>
        </member>
        <member name="M:Terminal.Gui.Wizard.WizardStep.#ctor(NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Wizard"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
            <param name="title">Title for the Step. Will be appended to the containing Wizard's title as 
            "Wizard Title - Wizard Step Title" when this step is active.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Wizard.WizardStep.ShowHide">
            <summary>
            Does the work to show and hide the contentView and helpView as appropriate
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.WizardStep.Add(Terminal.Gui.View)">
            <summary>
            Add the specified <see cref="T:Terminal.Gui.View"/> to the <see cref="T:Terminal.Gui.Wizard.WizardStep"/>. 
            </summary>
            <param name="view"><see cref="T:Terminal.Gui.View"/> to add to this container</param>
        </member>
        <member name="M:Terminal.Gui.Wizard.WizardStep.Remove(Terminal.Gui.View)">
            <summary>
              Removes a <see cref="T:Terminal.Gui.View"/> from <see cref="T:Terminal.Gui.Wizard.WizardStep"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Wizard.WizardStep.RemoveAll">
            <summary>
              Removes all <see cref="T:Terminal.Gui.View"/>s from the <see cref="T:Terminal.Gui.Wizard.WizardStep"/>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Wizard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Wizard"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
            <remarks>
            The Wizard will be vertically and horizontally centered in the container.
            After initialization use <c>X</c>, <c>Y</c>, <c>Width</c>, and <c>Height</c> change size and position.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Wizard.#ctor(NStack.ustring)">
            <summary>
            Initializes a new instance of the <see cref="T:Terminal.Gui.Wizard"/> class using <see cref="F:Terminal.Gui.LayoutStyle.Computed"/> positioning.
            </summary>
            <param name="title">Sets the <see cref="P:Terminal.Gui.Wizard.Title"/> for the Wizard.</param>
            <remarks>
            The Wizard will be vertically and horizontally centered in the container.
            After initialization use <c>X</c>, <c>Y</c>, <c>Width</c>, and <c>Height</c> change size and position.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Wizard.ProcessKey(Terminal.Gui.KeyEvent)">
            <summary>
            <see cref="T:Terminal.Gui.Wizard"/> is derived from <see cref="T:Terminal.Gui.Dialog"/> and Dialog causes <c>Esc</c> to call
            <see cref="M:Terminal.Gui.Application.RequestStop(Terminal.Gui.Toplevel)"/>, closing the Dialog. Wizard overrides <see cref="M:Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)"/>
            to instead fire the <see cref="E:Terminal.Gui.Wizard.Cancelled"/> event when Wizard is being used as a non-modal (see <see cref="P:Terminal.Gui.Wizard.Modal"/>.
            See <see cref="M:Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)"/> for more.
            </summary>
            <param name="kb"></param>
            <returns></returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.GoNext">
            <summary>
            Causes the wizad to move to the next enabled step (or last step if <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is not set). 
            If there is no previous step, does nothing.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.GetNextStep">
            <summary>
            Returns the next enabled <see cref="T:Terminal.Gui.Wizard.WizardStep"/> after the current step. Takes into account steps which
            are disabled. If <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is <c>null</c> returns the first enabled step.
            </summary>
            <returns>The next step after the current step, if there is one; otherwise returns <c>null</c>, which 
            indicates either there are no enabled steps or the current step is the last enabled step.</returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.GoBack">
            <summary>
            Causes the wizad to move to the previous enabled step (or first step if <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is not set). 
            If there is no previous step, does nothing.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.GetPreviousStep">
            <summary>
            Returns the first enabled <see cref="T:Terminal.Gui.Wizard.WizardStep"/> before the current step. Takes into account steps which
            are disabled. If <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is <c>null</c> returns the last enabled step.
            </summary>
            <returns>The first step ahead of the current step, if there is one; otherwise returns <c>null</c>, which 
            indicates either there are no enabled steps or the current step is the first enabled step.</returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.GetFirstStep">
            <summary>
            Returns the first enabled step in the Wizard
            </summary>
            <returns>The last enabled step</returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.GetLastStep">
            <summary>
            Returns the last enabled step in the Wizard
            </summary>
            <returns>The last enabled step</returns>
        </member>
        <member name="P:Terminal.Gui.Wizard.BackButton">
            <summary>
            If the <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is not the first step in the wizard, this button causes
            the <see cref="E:Terminal.Gui.Wizard.MovingBack"/> event to be fired and the wizard moves to the previous step. 
            </summary>
            <remarks>
            Use the <see cref="E:Terminal.Gui.Wizard.MovingBack"></see> event to be notified when the user attempts to go back.
            </remarks>
        </member>
        <member name="P:Terminal.Gui.Wizard.NextFinishButton">
            <summary>
            If the <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is the last step in the wizard, this button causes
            the <see cref="E:Terminal.Gui.Wizard.Finished"/> event to be fired and the wizard to close. If the step is not the last step,
            the <see cref="E:Terminal.Gui.Wizard.MovingNext"/> event will be fired and the wizard will move next step. 
            </summary>
            <remarks>
            Use the <see cref="E:Terminal.Gui.Wizard.MovingNext"></see> and <see cref="E:Terminal.Gui.Wizard.Finished"></see> events to be notified 
            when the user attempts go to the next step or finish the wizard.
            </remarks>
        </member>
        <member name="M:Terminal.Gui.Wizard.AddStep(Terminal.Gui.Wizard.WizardStep)">
            <summary>
            Adds a step to the wizard. The Next and Back buttons navigate through the added steps in the
            order they were added.
            </summary>
            <param name="newStep"></param>
            <remarks>The "Next..." button of the last step added will read "Finish" (unless changed from default).</remarks>
        </member>
        <member name="P:Terminal.Gui.Wizard.Title">
            <summary>
            The title of the Wizard, shown at the top of the Wizard with " - currentStep.Title" appended.
            </summary>
            <remarks>
            The Title is only displayed when the <see cref="T:Terminal.Gui.Wizard"/> <see cref="P:Terminal.Gui.Wizard.Modal"/> is set to <c>false</c>.
            </remarks>
        </member>
        <member name="T:Terminal.Gui.Wizard.WizardButtonEventArgs">
            <summary>	
            <see cref="T:System.EventArgs"/> for <see cref="T:Terminal.Gui.Wizard.WizardStep"/> transition events.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Wizard.WizardButtonEventArgs.Cancel">
            <summary>
            Set to true to cancel the transition to the next step.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.WizardButtonEventArgs.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.Wizard.WizardButtonEventArgs"/>
            </summary>
        </member>
        <member name="E:Terminal.Gui.Wizard.MovingBack">
            <summary>
            Raised when the Back button in the <see cref="T:Terminal.Gui.Wizard"/> is clicked. The Back button is always
            the first button in the array of Buttons passed to the <see cref="T:Terminal.Gui.Wizard"/> constructor, if any.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Wizard.MovingNext">
            <summary>
            Raised when the Next/Finish button in the <see cref="T:Terminal.Gui.Wizard"/> is clicked (or the user presses Enter). 
            The Next/Finish button is always the last button in the array of Buttons passed to the <see cref="T:Terminal.Gui.Wizard"/> constructor, 
            if any. This event is only raised if the <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is the last Step in the Wizard flow 
            (otherwise the <see cref="E:Terminal.Gui.Wizard.Finished"/> event is raised).
            </summary>
        </member>
        <member name="E:Terminal.Gui.Wizard.Finished">
            <summary>
            Raised when the Next/Finish button in the <see cref="T:Terminal.Gui.Wizard"/> is clicked. The Next/Finish button is always
            the last button in the array of Buttons passed to the <see cref="T:Terminal.Gui.Wizard"/> constructor, if any. This event is only
            raised if the <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> is the last Step in the Wizard flow 
            (otherwise the <see cref="E:Terminal.Gui.Wizard.Finished"/> event is raised).
            </summary>
        </member>
        <member name="E:Terminal.Gui.Wizard.Cancelled">
            <summary>
            Raised when the user has cancelled the <see cref="T:Terminal.Gui.Wizard"/> by pressin the Esc key. 
            To prevent a modal (<see cref="P:Terminal.Gui.Wizard.Modal"/> is <c>true</c>) Wizard from
            closing, cancel the event by setting <see cref="P:Terminal.Gui.Wizard.WizardButtonEventArgs.Cancel"/> to 
            <c>true</c> before returning from the event handler.
            </summary>
        </member>
        <member name="T:Terminal.Gui.Wizard.StepChangeEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> for <see cref="T:Terminal.Gui.Wizard.WizardStep"/> events.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Wizard.StepChangeEventArgs.OldStep">
            <summary>
            The current (or previous) <see cref="T:Terminal.Gui.Wizard.WizardStep"/>.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Wizard.StepChangeEventArgs.NewStep">
            <summary>
            The <see cref="T:Terminal.Gui.Wizard.WizardStep"/> the <see cref="T:Terminal.Gui.Wizard"/> is changing to or has changed to.
            </summary>
        </member>
        <member name="P:Terminal.Gui.Wizard.StepChangeEventArgs.Cancel">
            <summary>
            Event handlers can set to true before returning to cancel the step transition.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.StepChangeEventArgs.#ctor(Terminal.Gui.Wizard.WizardStep,Terminal.Gui.Wizard.WizardStep)">
            <summary>
            Initializes a new instance of <see cref="T:Terminal.Gui.Wizard.StepChangeEventArgs"/>
            </summary>
            <param name="oldStep">The current <see cref="T:Terminal.Gui.Wizard.WizardStep"/>.</param>
            <param name="newStep">The new <see cref="T:Terminal.Gui.Wizard.WizardStep"/>.</param>
        </member>
        <member name="E:Terminal.Gui.Wizard.StepChanging">
            <summary>
            This event is raised when the current <see cref="P:Terminal.Gui.Wizard.CurrentStep"/>) is about to change. Use <see cref="P:Terminal.Gui.Wizard.StepChangeEventArgs.Cancel"/> 
            to abort the transition.
            </summary>
        </member>
        <member name="E:Terminal.Gui.Wizard.StepChanged">
            <summary>
            This event is raised after the <see cref="T:Terminal.Gui.Wizard"/> has changed the <see cref="P:Terminal.Gui.Wizard.CurrentStep"/>. 
            </summary>
        </member>
        <member name="P:Terminal.Gui.Wizard.CurrentStep">
            <summary>
            Gets or sets the currently active <see cref="T:Terminal.Gui.Wizard.WizardStep"/>.
            </summary>
        </member>
        <member name="M:Terminal.Gui.Wizard.OnStepChanging(Terminal.Gui.Wizard.WizardStep,Terminal.Gui.Wizard.WizardStep)">
            <summary>
            Called when the <see cref="T:Terminal.Gui.Wizard"/> is about to transition to another <see cref="T:Terminal.Gui.Wizard.WizardStep"/>. Fires the <see cref="E:Terminal.Gui.Wizard.StepChanging"/> event. 
            </summary>
            <param name="oldStep">The step the Wizard is about to change from</param>
            <param name="newStep">The step the Wizard is about to change to</param>
            <returns>True if the change is to be cancelled.</returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.OnStepChanged(Terminal.Gui.Wizard.WizardStep,Terminal.Gui.Wizard.WizardStep)">
            <summary>
            Called when the <see cref="T:Terminal.Gui.Wizard"/> has completed transition to a new <see cref="T:Terminal.Gui.Wizard.WizardStep"/>. Fires the <see cref="E:Terminal.Gui.Wizard.StepChanged"/> event. 
            </summary>
            <param name="oldStep">The step the Wizard changed from</param>
            <param name="newStep">The step the Wizard has changed to</param>
            <returns>True if the change is to be cancelled.</returns>
        </member>
        <member name="M:Terminal.Gui.Wizard.GoToStep(Terminal.Gui.Wizard.WizardStep)">
            <summary>
            Changes to the specified <see cref="T:Terminal.Gui.Wizard.WizardStep"/>.
            </summary>
            <param name="newStep">The step to go to.</param>
            <returns>True if the transition to the step succeeded. False if the step was not found or the operation was cancelled.</returns>
        </member>
        <member name="P:Terminal.Gui.Wizard.Modal">
            <summary>
            Determines whether the <see cref="T:Terminal.Gui.Wizard"/> is displayed as modal pop-up or not.
            
            The default is <c>true</c>. The Wizard will be shown with a frame with <see cref="P:Terminal.Gui.Wizard.Title"/> and will behave like
            any <see cref="T:Terminal.Gui.Toplevel"/> window.
            
            If set to <c>false</c> the Wizard will have no frame and will behave like any embedded <see cref="T:Terminal.Gui.View"/>.
            
            To use Wizard as an embedded View 
            <list type="number">
            <item><description>Set <see cref="P:Terminal.Gui.Wizard.Modal"/> to <c>false</c>.</description></item>
            <item><description>Add the Wizard to a containing view with <see cref="M:Terminal.Gui.View.Add(Terminal.Gui.View)"/>.</description></item>
            </list>
            
            If a non-Modal Wizard is added to the application after <see cref="M:Terminal.Gui.Application.Run(System.Func{System.Exception,System.Boolean})"/> has been called
            the first step must be explicitly set by setting <see cref="P:Terminal.Gui.Wizard.CurrentStep"/> to <see cref="M:Terminal.Gui.Wizard.GetNextStep"/>:
            <code>
               wizard.CurrentStep = wizard.GetNextStep();
            </code>
            </summary>
        </member>
    </members>
</doc>
